<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>mybatis-参数获取&amp;查询</title>
    <link href="/mybatis-%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96-%E6%9F%A5%E8%AF%A2/ce8dcd6d1259/"/>
    <url>/mybatis-%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96-%E6%9F%A5%E8%AF%A2/ce8dcd6d1259/</url>
    
    <content type="html"><![CDATA[<h1 id="0-目录"><a href="#0-目录" class="headerlink" title="0 目录"></a>0 目录</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Mybatis/image-20240219215146983.png" alt="image-20240219215146983"></p><h1 id="1-参数获取"><a href="#1-参数获取" class="headerlink" title="1 参数获取"></a>1 参数获取</h1><p>MyBatis获取参数值的两种方式：${}和#{}</p><p>${}的本质就是字符串拼接，**#{}的本质就是占位符赋值**</p><p>${}使用字符串拼接的方式拼接sql，<strong>若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号</strong>；</p><p>但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号。</p><h2 id="1-1-单个字面量"><a href="#1-1-单个字面量" class="headerlink" title="1.1 单个字面量"></a>1.1 单个字面量</h2><p>若mapper接口中的方法参数为单个的字面量类型 此时可以使用$ { }和 # { }以任意的名称获取参数的值。</p><p>注意${}需要手动加单引号</p><h2 id="1-2-多个字面量"><a href="#1-2-多个字面量" class="headerlink" title="1.2 多个字面量"></a>1.2 多个字面量</h2><p>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中，以arg0,arg1…为键，以参数为值；以 param1,param2…为键，以参数为值；因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值。</p><p>注意 $ { }需要手动加单引号</p><h2 id="1-3-map集合类型"><a href="#1-3-map集合类型" class="headerlink" title="1.3 map集合类型"></a>1.3 map集合类型</h2><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中 只需要通过 $ {}和#{}访问map集合的键就可以获取相对应的值。</p><p>注意${}需要手动加单引号</p><h2 id="1-4-实体类型"><a href="#1-4-实体类型" class="headerlink" title="1.4 实体类型"></a>1.4 实体类型</h2><p>若mapper接口中的方法参数为实体类对象时<br>此时可以使用$ {}和#{}，通过访问实体类对象中的属性名获取属性值。只跟get&#x2F;set方法有关</p><p>注意${}需要手动加单引号</p><h2 id="1-5-Param"><a href="#1-5-Param" class="headerlink" title="1.5 @Param"></a>1.5 @Param</h2><p>命名参数<br>可以通过@Param注解标识mapper接口中的方法参数<br>此时，会将这些参数放在map集合中，以@Param注解的value属性值为键，以参数为值；以 param1,param2…为键，以参数为值；只需要通过${}和#{}访问map集合的键就可以获取相对应的值。</p><p> 注意 ${}需要手动加单引号</p><h1 id="2-查询"><a href="#2-查询" class="headerlink" title="2 查询"></a>2 查询</h1><h2 id="2-1-查询一个实体类对象"><a href="#2-1-查询一个实体类对象" class="headerlink" title="2.1 查询一个实体类对象"></a>2.1 查询一个实体类对象</h2><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Mybatis/7cabf542e63c4797b0eb92212f7181d8.png" alt="在这里插入图片描述"></p><h2 id="2-2-查询一个list集合"><a href="#2-2-查询一个list集合" class="headerlink" title="2.2 查询一个list集合"></a>2.2 查询一个list集合</h2><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Mybatis/b0bc187ef3ab45b8966d03a2ac9b94b8.png" alt="在这里插入图片描述"></p><h2 id="2-3-查询单个数据"><a href="#2-3-查询单个数据" class="headerlink" title="2.3 查询单个数据"></a>2.3 查询单个数据</h2><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Mybatis/b0405dadafee447cb3e3eb9bf469774c.png" alt="在这里插入图片描述"></p><h2 id="2-4-查询一条数据为map的集合"><a href="#2-4-查询一条数据为map的集合" class="headerlink" title="2.4 查询一条数据为map的集合"></a>2.4 查询一条数据为map的集合</h2><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Mybatis/4ae0054addb741278f9de439acd89fc2.png" alt="在这里插入图片描述"></p><h2 id="2-5-查询多条数据为map集合"><a href="#2-5-查询多条数据为map集合" class="headerlink" title="2.5 查询多条数据为map集合"></a>2.5 查询多条数据为map集合</h2><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Mybatis/6d9cf111808d472bb82db8aaf63093d6.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis-环境搭建</title>
    <link href="/mybatis-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/64bafa7e8456/"/>
    <url>/mybatis-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/64bafa7e8456/</url>
    
    <content type="html"><![CDATA[<h1 id="0-目录"><a href="#0-目录" class="headerlink" title="0 目录"></a>0 目录</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Mybatis/image-20240219205704269.png" alt="image-20240219205704269"></p><h1 id="1-Maven工程"><a href="#1-Maven工程" class="headerlink" title="1 Maven工程"></a>1 Maven工程</h1><ol><li><p>设置打包方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xxxx.xxx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MyBatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="2-数据库准备"><a href="#2-数据库准备" class="headerlink" title="2 数据库准备"></a>2 数据库准备</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_user` (<br>  `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `age` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gender` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_general_ci;<br><br></code></pre></td></tr></table></figure><h1 id="3-创建Mybatis核心文件"><a href="#3-创建Mybatis核心文件" class="headerlink" title="3 创建Mybatis核心文件"></a>3 创建Mybatis核心文件</h1><p>核心文件取名：mybatis-config.xml，存放位置src&#x2F;main&#x2F;resources</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入mybatis映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="4-实体类、mapper接口"><a href="#4-实体类、mapper接口" class="headerlink" title="4 实体类、mapper接口"></a>4 实体类、mapper接口</h1><ol><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Integer id;<br><br>  <span class="hljs-keyword">private</span> String username;<br><br>  <span class="hljs-keyword">private</span> String password;<br><br>  <span class="hljs-keyword">private</span> Integer age;<br><br>  <span class="hljs-keyword">private</span> String gender;<br><br>  <span class="hljs-keyword">private</span> String email;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">//添加用户信息</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h1 id="5-映射文件"><a href="#5-映射文件" class="headerlink" title="5 映射文件"></a>5 映射文件</h1><blockquote><ol><li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致，在resource下使用&#x2F;代替.</li><li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li></ol></blockquote><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.xxxx.xxx.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        mapper接口和映射文件要保证两个一致：</span><br><span class="hljs-comment">        1.mapper接口的全类名和映射文件的namespace一致</span><br><span class="hljs-comment">        2.mapper接口中的方法的方法名要和映射文件中的sql语句的id保持一致</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--添加--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>        insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;男&#x27;,&quot;123@163.com&quot;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="6-测试"><a href="#6-测试" class="headerlink" title="6 测试"></a>6 测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisTest</span> &#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-comment">//获取核心配置文件的输入流</span><br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>      <span class="hljs-comment">//获取SqlSessionFactoryBuilder对象</span><br>      <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>      <span class="hljs-comment">//获取SqlSessionFactory对象</span><br>      <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(inputStream);<br>      <span class="hljs-comment">//获取sql的会话对象SqlSession(不会自动提交事务)，是MyBatis提供的操作数据库的对象</span><br>      <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>      <span class="hljs-comment">//获取sql的会话对象SqlSession(会自动提交事务)，是MyBatis提供的操作数据库的对象</span><br>      <span class="hljs-comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br>      <span class="hljs-comment">//获取UserMapper的代理实现对象getMapper(Class&lt;T&gt; var1)</span><br>      <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>      <span class="hljs-comment">//调用mapper接口中的方法，实现添加用户信息的功能</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.insertUser();<br>      <span class="hljs-comment">//通过sql语句的唯一标识找到sql并执行，唯一标识是namespace.sqlId</span><br>      <span class="hljs-comment">//int result = sqlSession.insert(&quot;com.xxxx.lln.mapper.UserMapper.insertUser&quot;);</span><br>      System.out.println(<span class="hljs-string">&quot;返回结果：&quot;</span>+result);<br>      <span class="hljs-comment">//提交事务</span><br>      sqlSession.commit();<br>      <span class="hljs-comment">//关闭会话</span><br>      sqlSession.close();<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7-日志"><a href="#7-日志" class="headerlink" title="7 日志"></a>7 日志</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>log4j.xml，位置src&#x2F;main&#x2F;resources</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;log4j.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">xmlns:log4j</span>=<span class="hljs-string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;</span></span><br><span class="hljs-string"><span class="hljs-tag">%m (%F:%L) \n&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">log4j:configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ol><h1 id="8-工具类"><a href="#8-工具类" class="headerlink" title="8 工具类"></a>8 工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlSessionUtil</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-comment">//创建sql的会话对象SqlSession</span><br>      <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">//获取核心配置文件的输入流</span><br>          <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>          <span class="hljs-comment">//获取SqlSessionFactoryBuilder对象</span><br>          <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>          <span class="hljs-comment">//获取SqlSessionFactory对象</span><br>          <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(inputStream);<br>          <span class="hljs-comment">//配置sql的会话对象SqlSession(会自动提交事务)，是MyBatis提供的操作数据库的对象</span><br>          sqlSession = sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>      <span class="hljs-keyword">return</span> sqlSession;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="9-增删改查"><a href="#9-增删改查" class="headerlink" title="9 增删改查"></a>9 增删改查</h1><ol><li><p>mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>  <span class="hljs-comment">//添加用户信息</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">//删除用户信息</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">//修改用户信息</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">//通过id查询一个实体类对象</span><br>  User <span class="hljs-title function_">getUserById</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">//查询实体类集合</span><br>  List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.xxxx.xxx.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        mapper接口和映射文件要保证两个一致：</span><br><span class="hljs-comment">        1.mapper接口的全类名和映射文件的namespace一致</span><br><span class="hljs-comment">        2.mapper接口中的方法的方法名要和映射文件中的sql语句的id保持一致</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--添加用户信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>        insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;男&#x27;,&quot;123@163.com&quot;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--删除用户信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span><br>        delete from t_user where id = 2<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--修改用户信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span>&gt;</span><br>        update t_user set username=&#x27;ybc&#x27;,password=&#x27;123&#x27; where id = 3<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        resultType：自动映射，用于属性名和表中字段名一致的情况</span><br><span class="hljs-comment">        resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--通过id查询一个实体类对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xxxx.lln.pojo.User&quot;</span>&gt;</span><br>        select * from t_user where id = 3<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--查询实体类集合--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xxxx.lln.pojo.User&quot;</span>&gt;</span><br>        select * from t_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>代码测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisTest</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试添加用户信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取核心配置文件的输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-comment">//获取SqlSessionFactoryBuilder对象</span><br>        <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>        <span class="hljs-comment">//获取SqlSessionFactory对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(inputStream);<br>        <span class="hljs-comment">//获取sql的会话对象SqlSession(不会自动提交事务)，是MyBatis提供的操作数据库的对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//获取sql的会话对象SqlSession(会自动提交事务)，是MyBatis提供的操作数据库的对象</span><br>        <span class="hljs-comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br>        <span class="hljs-comment">//获取UserMapper的代理实现对象getMapper(Class&lt;T&gt; var1)</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-comment">//调用mapper接口中的方法，实现添加用户信息的功能</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.insertUser();<br>        <span class="hljs-comment">//通过sql语句的唯一标识找到sql并执行，唯一标识是namespace.sqlId</span><br>        <span class="hljs-comment">//int result = sqlSession.insert(&quot;com.xxxx.lln.mapper.UserMapper.insertUser&quot;);</span><br>        System.out.println(<span class="hljs-string">&quot;返回结果：&quot;</span>+result);<br>        <span class="hljs-comment">//提交事务</span><br>        sqlSession.commit();<br>        <span class="hljs-comment">//关闭会话</span><br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试删除用户信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        userMapper.deleteUser();<br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试修改用户信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        userMapper.updateUser();<br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过id查询一个实体类对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getUserById();<br>        System.out.println(user);<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询实体类对象集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; userList = userMapper.getUserList();<br>userList.forEach(System.out::println);<br>        sqlSession.close();<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><ol><li><p>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系</p><ol><li>resultType：自动映射，用于属性名和表中字段名一致的情况</li><li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</li></ol></li><li><p>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常</p><p>TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</p></li></ol></blockquote><h1 id="10-核心文件详解"><a href="#10-核心文件详解" class="headerlink" title="10 核心文件详解"></a>10 核心文件详解</h1><p>顺序：</p><p>properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,</p><p>reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--开启延迟加载--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            typeAlias：设置某个具体的类型的别名</span><br><span class="hljs-comment">            属性： type：需要设置别名的类型的全类名</span><br><span class="hljs-comment">            alias：设置此类型的别名，若不设置此属性，该类型拥有默认的别名，即类名且不区分大小写</span><br><span class="hljs-comment">            若设置此属性，此时该类型的别名只能使用alias所设置的值</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot; alias=&quot;abc&quot;&gt; &lt;/typeAlias&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--environments：设置多个连接数据库的环境 属性： default：设置默认使用的环境的id --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql_test&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            environment：设置具体的连接数据库的环境信息</span><br><span class="hljs-comment">            属性： id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id， 表示默认使用的环境</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql_test&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                transactionManager：设置事务管理方式 属性：</span><br><span class="hljs-comment">                type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot; type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span><br><span class="hljs-comment">                type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br><br><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                dataSource：设置数据源</span><br><span class="hljs-comment">                属性：type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span><br><span class="hljs-comment">                type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建</span><br><span class="hljs-comment">                type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span><br><span class="hljs-comment">                type=&quot;JNDI&quot;：调用上下文中的数据源</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--设置驱动类的全类名--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的连接地址--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的用户名--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的密码--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><br><br>    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;UserMapper.xml&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            以包为单位，将包下所有的映射文件引入核心配置文件</span><br><span class="hljs-comment">            注意：此方式必须保证mapper接口和mapper映射文件必须在相同的包下</span><br><span class="hljs-comment">            接口名和映射文件名字一致</span><br><span class="hljs-comment">            创建包的时候以斜线为分隔符</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis-缓存</title>
    <link href="/redis-%E7%BC%93%E5%AD%98/22e726666a0f/"/>
    <url>/redis-%E7%BC%93%E5%AD%98/22e726666a0f/</url>
    
    <content type="html"><![CDATA[<h1 id="0-目录"><a href="#0-目录" class="headerlink" title="0 目录"></a>0 目录</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/image-20240217144633116.png" alt="image-20240217144633116"></p><h1 id="1-什么是缓存"><a href="#1-什么是缓存" class="headerlink" title="1 什么是缓存"></a>1 什么是缓存</h1><p>缓存就是数据交换的缓冲区（称作Cache），是存储数据的临时地方，一般读写性能较高</p><h2 id="1-1-作用"><a href="#1-1-作用" class="headerlink" title="1.1 作用"></a>1.1 作用</h2><ul><li>降低后端负载</li><li>提高读写效率，降低响应时间</li></ul><h2 id="1-2-成本"><a href="#1-2-成本" class="headerlink" title="1.2 成本"></a>1.2 成本</h2><ul><li>数据一致性成本</li><li>代码维护成本</li><li>运维成本</li></ul><h1 id="2-添加Redis缓存"><a href="#2-添加Redis缓存" class="headerlink" title="2 添加Redis缓存"></a>2 添加Redis缓存</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/f5fab07a6b6c428686526e0703545046.png" alt="img"></p><ul><li>即：在客户端和数据库之间加一层redis，这样就可以减轻数据库的压力。</li></ul><h1 id="3-缓存更新策略"><a href="#3-缓存更新策略" class="headerlink" title="3 缓存更新策略"></a>3 缓存更新策略</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/fab53328769e46539e642d34dad23b6b.png" alt="img"></p><h2 id="3-1-具体业务场景"><a href="#3-1-具体业务场景" class="headerlink" title="3.1 具体业务场景"></a>3.1 具体业务场景</h2><ul><li><p>低一致性需求：使用内存淘汰机制。例如店铺类型的查询缓存</p></li><li><p>高一致性需求：主动更新，并以超时剔除作为兜底方案。例如店铺详情查询的缓存</p></li></ul><h2 id="3-2-主动更新策略"><a href="#3-2-主动更新策略" class="headerlink" title="3.2 主动更新策略"></a>3.2 主动更新策略</h2><p>即：由缓存调用者在更新数据库的同时更新缓存。</p><h3 id="3-2-1-注意点"><a href="#3-2-1-注意点" class="headerlink" title="3.2.1 注意点"></a>3.2.1 注意点</h3><ul><li>删除还是更新缓存？<ul><li>更新缓存：每次更新都更新缓存，无效写操作较多</li><li>删除缓存：更新数据库时让缓存失效，查询时再更新缓存（胜出）</li></ul></li><li>如何保证缓存和数据库的操作的同时成功或失败？<ul><li>更新缓存：每次更新都更新缓存，无效写操作较多</li><li>删除缓存：更新数据库时让缓存失效，查询时再更新缓存（胜出）</li></ul></li><li>先操作缓存还是先操作数据库？<ul><li>先操作数据库再删缓存，因为出现数据不一致的前提：1.  刚好缓存失效；2. 另一个线程写入时间在前一个线程查询数据库到写入缓存的几短时间内进行了更新操作</li></ul></li></ul><blockquote><ul><li>读操作：<ul><li>缓存命中就返回</li><li>缓存没有命中查数据库，写入缓存同时设定超时时间</li></ul></li><li>写操作：<ul><li>先写数据库再删缓存</li><li>确保数据库和缓存操作的原子性</li></ul></li></ul></blockquote><h2 id="3-3-实现缓存和数据库的双写一致"><a href="#3-3-实现缓存和数据库的双写一致" class="headerlink" title="3.3 实现缓存和数据库的双写一致"></a>3.3 实现缓存和数据库的双写一致</h2><p>在单体系统中，更新方法使用<code>@Transactional</code>对方法进行标记</p><h1 id="4-缓存穿透"><a href="#4-缓存穿透" class="headerlink" title="4 缓存穿透"></a>4 缓存穿透</h1><p>缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/ae54cd7944a94a66b442ccccf97e56d3.png" alt="img"></p><h2 id="4-1-解决"><a href="#4-1-解决" class="headerlink" title="4.1 解决"></a>4.1 解决</h2><ol><li><p>缓存null值</p></li><li><p>布隆过滤</p></li><li><p>增强id的复杂度，避免被猜测id规律</p></li><li><p>做好数据的基础格式校验</p></li><li><p>加强用户权限校验</p></li><li><p>做好热点参数的限流</p></li></ol><h3 id="4-1-1-空值解决"><a href="#4-1-1-空值解决" class="headerlink" title="4.1.1 空值解决"></a>4.1.1 空值解决</h3><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/477d7458be374f6da2c101233ee80aac.png" alt="img"></p><p>步骤</p><ol><li>当缓存没有命中的时候，查询数据库</li><li>判断数据库的数据是否存在<ol><li>存在：将数据写入缓存同时返回</li><li>不存在：写入空值到缓存</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(Long id)</span> &#123;<br>    String key=CACHE_SHOP_KEY+id;<br>    <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>    <span class="hljs-comment">//2.判断是否存在</span><br>    <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson)) &#123;<br>        <span class="hljs-comment">//3.存在，直接返回</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean(shopJson, Shop.class);<br>        <span class="hljs-keyword">return</span> Result.ok(shop);<br>    &#125;<br>    <span class="hljs-comment">//命中的是否为空值</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;&#x27;</span>.equals(shopJson))&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺信息不存在！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//4.不存在，根据id查询数据库</span><br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br>    <span class="hljs-comment">//5.不存在，返回错误</span><br>    <span class="hljs-keyword">if</span>(shop==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//将空值写入redis</span><br>        stringRedisTemplate.opsForValue().set(key,<span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺信息不存在！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//6.存在，写入redis</span><br>    stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);<br>    <span class="hljs-comment">//7.返回</span><br>    <span class="hljs-keyword">return</span> Result.ok(shop);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-缓存雪崩"><a href="#5-缓存雪崩" class="headerlink" title="5 缓存雪崩"></a>5 缓存雪崩</h1><p>缓存雪崩是指同一时刻大量的缓存key同时失效或者redis服务宕机，导致大量请求到达数据库，带来巨大压力</p><h2 id="5-1-解决"><a href="#5-1-解决" class="headerlink" title="5.1 解决"></a>5.1 解决</h2><p>给不同的Key的TTL添加随机值</p><p>利用Redis集群提高服务的可用性</p><p>给缓存业务添加降级限流策略</p><p>给业务添加多级缓存</p><h1 id="6-缓存击穿"><a href="#6-缓存击穿" class="headerlink" title="6 缓存击穿"></a>6 缓存击穿</h1><p>缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/c21f331b1b9e45cfb8bc40d960a1c21e.png" alt="img"></p><h2 id="6-1-解决"><a href="#6-1-解决" class="headerlink" title="6.1 解决"></a>6.1 解决</h2><blockquote><p>前言：涉及到互斥锁，使用redis的一个命令：setnx</p></blockquote><h3 id="6-1-1-互斥锁解决"><a href="#6-1-1-互斥锁解决" class="headerlink" title="6.1.1 互斥锁解决"></a>6.1.1 互斥锁解决</h3><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/image-20240218202535260.png" alt="image-20240218202535260"></p><p>即：当第一个线程查询缓存的时候，没有实现命中，此时第一个线程开始获取互斥锁，当锁获取成功之后，开始查询数据库进行缓存的重建，查询完成之后写入缓存，最后释放锁</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/f30a477e296542b888949cfcb0d2f356.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithMutex</span><span class="hljs-params">(Long id)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY+id;<br>    <span class="hljs-comment">//从redis查询商铺缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>    <span class="hljs-comment">//判断缓存是否命中</span><br>    <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;<br>        <span class="hljs-comment">//命中则直接返回数据</span><br>        <span class="hljs-keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);<br>    &#125;<br>    <span class="hljs-comment">//判断是否是缓存穿透</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;&#x27;</span>.equals(shopJson))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">//实现缓存重建</span><br>    <span class="hljs-comment">//1.获取互斥锁</span><br>    String lockKey=LOCK_SHOP_KEY+id;<br>   <span class="hljs-keyword">try</span>&#123;<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>       <span class="hljs-comment">//2.判断是否获取成功</span><br>       <span class="hljs-keyword">if</span>(!isLock) &#123;<br>           <span class="hljs-comment">//3.失败，则休眠并重试</span><br>           Thread.sleep(<span class="hljs-number">50</span>);<br>           queryWithMutex(id);<br>       &#125;<br>      <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> 此时锁获取成功之后，应该再查询一下缓存，实现双重检查</span><br>       <span class="hljs-comment">//4.成功，根据id查询数据库</span><br>       <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br>       <span class="hljs-comment">//5.不存在，返回错误</span><br>       <span class="hljs-keyword">if</span>(shop==<span class="hljs-literal">null</span>)&#123;<br>           stringRedisTemplate.opsForValue().set(key,<span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>       &#125;<br>       <span class="hljs-comment">//6.存在，写入redis</span><br>       stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL,TimeUnit.MINUTES);<br>       <span class="hljs-keyword">return</span> shop;<br>   &#125;<span class="hljs-keyword">catch</span>(InterruptedException e)&#123;<br>       <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>   &#125;<span class="hljs-keyword">finally</span>&#123;<br>       unlock(lockKey);<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span>&#123;<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.MINUTES);<br>    <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag); <span class="hljs-comment">//为防止程序在拆箱的时候出现空指针，要手动拆箱</span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span>&#123;<br>    stringRedisTemplate.delete(key);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-1-2-逻辑过期解决"><a href="#6-1-2-逻辑过期解决" class="headerlink" title="6.1.2 逻辑过期解决"></a>6.1.2 逻辑过期解决</h3><ul><li>热点key需要先进行预热，将相关数据先放入缓存中，设定的过期时间不是redis的TTL，而是一个逻辑上认定会过期的时间</li></ul><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/image-20240218202644763.png" alt="image-20240218202644763"></p><p>即：当缓存命中的时候，判断设定的缓存逻辑时间是否过期，如果没有，那么就直接返回数据信息；如果过期了，先尝试获取互斥锁，当获取到锁，如果获取锁失败了，将旧数据返回即可；如果获取锁成功，那么开启一个独立的线程进行查询数据库，写入缓存，以及设定逻辑过期时间，最后释放互斥锁。</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/a44029589bb94df680da373e291c346f.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ExecutorService CACHE_REBUILD_EXECUTOR= Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(Long id)</span>&#123;<br>    String key=CACHE_SHOP_KEY+id;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>    <span class="hljs-comment">//缓存未命中</span><br>    <span class="hljs-keyword">if</span>(StrUtil.isBlank(shopJson))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">//命中，需要先把json反序列化为对象</span><br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);<br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class);<br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>    <span class="hljs-comment">//判断是否过期</span><br>    <span class="hljs-keyword">if</span>(expireTime.isAfter(LocalDateTime.now())) &#123;<br>        <span class="hljs-comment">//未过期,直接返回店铺信息</span><br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br>    <span class="hljs-comment">//已过期，需要缓存重建</span><br>    String lockKey=LOCK_SHOP_KEY+id;<br>    <span class="hljs-comment">//获取互斥锁</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>    <span class="hljs-comment">//判断是否获取锁成功</span><br>    <span class="hljs-keyword">if</span>(isLock) &#123;<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 获取锁成功之后，再尝试获取一下缓存数据，没有就开启独立线程实现缓存重建</span><br>        <span class="hljs-comment">//成功，开启独立线程，实现缓存重建</span><br>        CACHE_REBUILD_EXECUTOR.submit(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                saveShop2Redis(id, CACHE_SHOP_TTL);<br>            &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<span class="hljs-keyword">finally</span>&#123;<br>                unlock(lockKey);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-comment">//返过期的商铺信息</span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span>&#123;<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.MINUTES);<br>    <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag); <span class="hljs-comment">//为防止程序在拆箱的时候出现空指针，要手动拆箱</span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span>&#123;<br>    stringRedisTemplate.delete(key);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveShop2Redis</span><span class="hljs-params">(Long id,Long expireSeconds)</span>&#123;<br>    <span class="hljs-comment">//1.查询店铺数据</span><br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br>    <span class="hljs-comment">//2.封装逻辑过期时间</span><br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>    redisData.setData(shop);<br>    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));<br>    <span class="hljs-comment">//3.写入Redis</span><br>    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,JSONUtil.toJsonStr(redisData));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7-缓存工具类"><a href="#7-缓存工具类" class="headerlink" title="7 缓存工具类"></a>7 缓存工具类</h1><p>需要满足以下4个要求：</p><ol><li>任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间</li><li>将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓存击穿问题</li><li>根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题</li><li>根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheClient</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StringRedisTemplate stringRedisTemplate;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheClient</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span>&#123;<br>      <span class="hljs-built_in">this</span>.stringRedisTemplate=stringRedisTemplate;<br>  &#125;<br><br>  <span class="hljs-comment">// 任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit unit)</span>&#123;<br>      stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value),time,unit);<br>  &#125;<br>  <br><br>  <span class="hljs-comment">// 将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓存击穿问题</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWithLogicalExpire</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit unit)</span>&#123;<br>      <span class="hljs-comment">//设置逻辑过期</span><br>      <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>      redisData.setData(value);<br>      redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));<br>      stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));<br>  &#125;<br><br>  <span class="hljs-comment">// 根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题</span><br>  <span class="hljs-keyword">public</span> &lt;R,ID&gt; R <span class="hljs-title function_">queryWithPassThrough</span><span class="hljs-params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID,R&gt;dbFallback,Long time,TimeUnit unit)</span>&#123;<br>      String key=keyPrefix+id;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>      <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(json))&#123;<br>          <span class="hljs-keyword">return</span> JSONUtil.toBean(json,type);<br>      &#125;<br>      <span class="hljs-comment">//判断命中的是否为空值</span><br>      <span class="hljs-keyword">if</span>(json!=<span class="hljs-literal">null</span>)&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>      <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>      <span class="hljs-keyword">if</span>(r==<span class="hljs-literal">null</span>)&#123;<br>          stringRedisTemplate.opsForValue().set(key,<span class="hljs-string">&quot;&quot;</span>,time,unit);<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>      <span class="hljs-built_in">this</span>.set(key,r,time,unit);<br>      <span class="hljs-keyword">return</span> r;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ExecutorService CACHE_REBUILD_EXECUTOR= Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>  <span class="hljs-comment">// 根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</span><br>  <span class="hljs-keyword">public</span> &lt;R,ID&gt; R <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(String keyPrefix,ID id,Class&lt;R&gt; type,Function&lt;ID,R&gt;dbFallback,Long time,TimeUnit unit)</span>&#123;<br>      String key=keyPrefix+id;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>      <span class="hljs-keyword">if</span>(StrUtil.isBlank(json))&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>      <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, RedisData.class);<br>      <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);<br>      <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>      <span class="hljs-comment">//判断是否过期</span><br>      <span class="hljs-keyword">if</span>(expireTime.isAfter(LocalDateTime.now()))&#123;<br>          <span class="hljs-comment">//未过期，直接返回店铺信息</span><br>          <span class="hljs-keyword">return</span> r;<br>      &#125;<br>      <span class="hljs-comment">//已过期，需要缓存重建</span><br>      String lockKey=LOCK_SHOP_KEY+id;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>      <span class="hljs-keyword">if</span>(isLock)&#123;<br>          CACHE_REBUILD_EXECUTOR.submit(()-&gt;&#123;<br>              <span class="hljs-keyword">try</span>&#123;<br>                  <span class="hljs-comment">//重建缓存</span><br>                  <span class="hljs-comment">//1.查询数据库</span><br>                  <span class="hljs-type">R</span> <span class="hljs-variable">apply</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>                  <span class="hljs-comment">//2.存入redis</span><br>                  <span class="hljs-built_in">this</span>.setWithLogicalExpire(key,apply,time,unit);<br>              &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>              &#125;<span class="hljs-keyword">finally</span>&#123;<br>                  unlock(key);<br>              &#125;<br>          &#125;);<br>      &#125;<br>      <span class="hljs-keyword">return</span> r;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span>&#123;<br>      Boolean flag=stringRedisTemplate.opsForValue().setIfAbsent(key,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-number">10</span>,TimeUnit.SECONDS);<br>      <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span>&#123;<br>      stringRedisTemplate.delete(key);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis-短信验证登录</title>
    <link href="/redis-%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%99%BB%E5%BD%95/6c096f110ba0/"/>
    <url>/redis-%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%99%BB%E5%BD%95/6c096f110ba0/</url>
    
    <content type="html"><![CDATA[<h1 id="0-目录"><a href="#0-目录" class="headerlink" title="0 目录"></a>0 目录</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/image-20240218210105896.png" alt="image-20240218210105896"></p><h1 id="1-基于session实现登录"><a href="#1-基于session实现登录" class="headerlink" title="1 基于session实现登录"></a>1 基于session实现登录</h1><h2 id="1-1-发送短信验证码"><a href="#1-1-发送短信验证码" class="headerlink" title="1.1 发送短信验证码"></a>1.1 发送短信验证码</h2><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/image-20240218210209795.png" alt="image-20240218210209795"></p><p>即：将生成的验证码保存到session中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sendCode</span><span class="hljs-params">(String phone, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">//1.校验手机号</span><br>    <span class="hljs-keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;<br>        <span class="hljs-comment">//2.如果不符合，返回错误信息</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//3.符合，生成验证码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> RandomUtil.randomNumbers(<span class="hljs-number">6</span>);<br>    <span class="hljs-comment">//4.保存验证码到session</span><br>    session.setAttribute(<span class="hljs-string">&quot;code&quot;</span>,code);<br>    <span class="hljs-comment">//5.模拟发送验证码</span><br>    log.debug(<span class="hljs-string">&quot;发送短信验证码成功，验证码：&#123;&#125;&quot;</span>+code);<br>    <span class="hljs-comment">//返回ok</span><br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-短信验证码注册登录"><a href="#1-2-短信验证码注册登录" class="headerlink" title="1.2 短信验证码注册登录"></a>1.2 短信验证码注册登录</h2><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/image-20240218210311253.png" alt="image-20240218210311253"></p><p>即：校验完成验证码之后，根据用户手机号去数据库查询，查询用户如果不存在，那么就创建用户，将创建的心用户保存到数据库中；如果查询到用户存在，那么将用户信息保存到session中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginFormDTO</span> &#123;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">private</span> String code;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">//1.校验手机号</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> loginForm.getPhone();<br>    <span class="hljs-keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;<br>        <span class="hljs-comment">//如果不符合，返回错误信息</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//2.校验验证码</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">cacheCode</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;code&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> loginForm.getCode();<br>    <span class="hljs-keyword">if</span>(cacheCode==<span class="hljs-literal">null</span> ||! cacheCode.toString().equals(code))&#123;<br>        <span class="hljs-comment">//3.不一致，报错</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;验证码错误!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//4.一致，根据手机号查询用户 select * from tb_user where phone = ?</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;phone&quot;</span>, phone).one();<br>    <span class="hljs-comment">//5.判断用户是否存在</span><br>    <span class="hljs-keyword">if</span>(user==<span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//6.不存在，创建新用户并保存</span><br>        user=createUsrWithPhone(phone);<br>    &#125;<br>    <span class="hljs-comment">//7.保存用户信息到session中</span><br>    session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;   <br>&#125;<br><br><span class="hljs-keyword">private</span> User <span class="hljs-title function_">createUsrWithPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>    <span class="hljs-comment">//1.创建用户</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setPhone(phone);<br>    user.setNickName(USER_NICK_NAME_PREFIX+RandomUtil.randomString(<span class="hljs-number">10</span>));<br>    <span class="hljs-comment">//2.保存用户</span><br>    save(user);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-校验登录状态"><a href="#1-3-校验登录状态" class="headerlink" title="1.3 校验登录状态"></a>1.3 校验登录状态</h2><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/image-20240218210437940.png" alt="image-20240218210437940"></p><p>即：从拦截器拦截请求之后，从request中获取到cookie，由cookie获取session进而获取到用户信息，此时判断用户是否存在，如果用户不存在进行拦截，用户存在就将用户数据保存到ThreadLocal中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserHolder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;UserDTO&gt; tl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(UserDTO user)</span>&#123;<br>        tl.set(user);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDTO <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> tl.get();<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeUser</span><span class="hljs-params">()</span>&#123;<br>        tl.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-登录校验拦截器"><a href="#2-登录校验拦截器" class="headerlink" title="2 登录校验拦截器"></a>2 登录校验拦截器</h1><h2 id="2-1-拦截器"><a href="#2-1-拦截器" class="headerlink" title="2.1 拦截器"></a>2.1 拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.获取session</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        <span class="hljs-comment">//2.获取session中的用户</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">//3.判断用户是否存在</span><br>        <span class="hljs-keyword">if</span>(user==<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//4.不存在，拦截,返回401状态码，代表未授权</span><br>            response.setStatus(<span class="hljs-number">401</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//5.存在，保存用户信息到ThreadLocal</span><br>        UserHolder.saveUser((UserDTO) user);<br>        <span class="hljs-comment">//6.放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        UserHolder.removeUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-添加拦截器"><a href="#2-2-添加拦截器" class="headerlink" title="2.2 添加拦截器"></a>2.2 添加拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>())<br>                .excludePathPatterns(<span class="hljs-string">&quot;/user/code&quot;</span>,<span class="hljs-string">&quot;/user/login&quot;</span>,<span class="hljs-string">&quot;/blog/hot&quot;</span>,<span class="hljs-string">&quot;/shop/**&quot;</span>,<span class="hljs-string">&quot;/shop-type/**&quot;</span>,<span class="hljs-string">&quot;/voucher/**&quot;</span>,<span class="hljs-string">&quot;/upload/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-session共享问题"><a href="#3-session共享问题" class="headerlink" title="3 session共享问题"></a>3 session共享问题</h1><p>session共享问题：多台Tomcat并不共享session存储空间，当请求切换到不同tomcat服务时导致数据丢失的问题</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/7d7d1467d2fd4e48a88c912e3dfbfaa8.png" alt="img"></p><h1 id="4-Redis替换session业务"><a href="#4-Redis替换session业务" class="headerlink" title="4 Redis替换session业务"></a>4 Redis替换session业务</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/4d931c795aa64ee8b9cfd3b759d0edbc.png" alt="img"></p><h1 id="5-基于Redis实现短信登录"><a href="#5-基于Redis实现短信登录" class="headerlink" title="5 基于Redis实现短信登录"></a>5 基于Redis实现短信登录</h1><h2 id="5-1-发送验证码"><a href="#5-1-发送验证码" class="headerlink" title="5.1 发送验证码"></a>5.1 发送验证码</h2><p>流程修改：生成验证码后，将验证码放入至redis并且设置过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sendCode</span><span class="hljs-params">(String phone, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">//1.校验手机号</span><br>    <span class="hljs-keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;<br>        <span class="hljs-comment">//2.如果不符合，返回错误信息</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//3.符合，生成验证码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> RandomUtil.randomNumbers(<span class="hljs-number">6</span>);<br>    <span class="hljs-comment">//4.保存验证码到redis中</span><br>    stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY+phone,code,LOGIN_CODE_TTL, TimeUnit.MINUTES);<br>    <span class="hljs-comment">//5.发送验证码</span><br>    log.debug(<span class="hljs-string">&quot;发送短信验证码成功，验证码：&#123;&#125;&quot;</span>+code);<br>    <span class="hljs-comment">//返回ok</span><br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-2-验证码登录"><a href="#5-2-验证码登录" class="headerlink" title="5.2 验证码登录"></a>5.2 验证码登录</h2><p>修改：校验的时候，客户端传入的验证码和redis中的验证码进行比对，随后需要将用户信息保存到redis中，此时选择使用Hash结构存储用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">//1.校验手机号</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> loginForm.getPhone();<br>    <span class="hljs-keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;<br>        <span class="hljs-comment">//如果不符合，返回错误信息</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//2.校验验证码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cacheCode</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> loginForm.getCode();<br>    <span class="hljs-keyword">if</span>(cacheCode==<span class="hljs-literal">null</span> ||!cacheCode.equals(code))&#123;<br>        <span class="hljs-comment">//3.不一致，报错</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;验证码错误!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//4.一致，根据手机号查询用户 select * from tb_user where phone = ?</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;phone&quot;</span>, phone).one();<br>    <span class="hljs-comment">//5.判断用户是否存在</span><br>    <span class="hljs-keyword">if</span>(user==<span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//6.不存在，创建新用户并保存</span><br>        user=createUsrWithPhone(phone);<br>    &#125;<br>    <span class="hljs-comment">//保存用户信息到redis中</span><br>    <span class="hljs-comment">//1.随机生成token，作为登录令牌</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>);  <span class="hljs-comment">//true代表isSimple，即不带中划线</span><br>    <span class="hljs-comment">//2.将User对象转为Hash存储</span><br>    UserDTO userDTO=BeanUtil.copyProperties(user,UserDTO.class);<br>    Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO,<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), CopyOptions.create().setIgnoreNullValue(<span class="hljs-literal">true</span>).setFieldValueEditor((fieldName,fieldValue)-&gt;fieldValue.toString()));<br>    String tokenKey=LOGIN_USER_KEY+token;<br>    <span class="hljs-comment">//7.存储</span><br>    stringRedisTemplate.opsForHash().putAll(tokenKey,userMap);<br>    <span class="hljs-comment">//设置token有效期</span><br>    stringRedisTemplate.expire(tokenKey,LOGIN_USER_TTL,TimeUnit.MINUTES);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br><br><span class="hljs-keyword">private</span> User <span class="hljs-title function_">createUsrWithPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>    <span class="hljs-comment">//1.创建用户</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setPhone(phone);<br>    user.setNickName(USER_NICK_NAME_PREFIX+RandomUtil.randomString(<span class="hljs-number">10</span>));<br>    <span class="hljs-comment">//2.保存用户</span><br>    save(user);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-3-拦截器修改"><a href="#5-3-拦截器修改" class="headerlink" title="5.3 拦截器修改"></a>5.3 拦截器修改</h2><p>修改：此时获取的用户信息是从redis中获取而不是从session获取。查询到用户信息之后将Hash数据转为UserDto对象，再存入ThreadLocal中，同时刷新token的有效期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginInterceptor</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span>&#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate=stringRedisTemplate;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.获取请求头中的token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;authorization&quot;</span>);<br>        <span class="hljs-comment">//判断token是否为空</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isBlank(token))&#123;<br>            response.setStatus(<span class="hljs-number">401</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        String key=LOGIN_USER_KEY+token;<br>        <span class="hljs-comment">//2.基于token获取redis中的用户</span><br>        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);<br>        <span class="hljs-comment">//3.判断用户是否存在</span><br>        <span class="hljs-keyword">if</span>(userMap.isEmpty())&#123;<br>            <span class="hljs-comment">//不存在，拦截，返回401状态码</span><br>            response.setStatus(<span class="hljs-number">401</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//5.存在，将查询到的Hash数据转为UserDTO对象</span><br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDTO</span>(), <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//6.保存用户到ThreadLocal</span><br>        UserHolder.saveUser(userDTO);<br>        <span class="hljs-comment">//7.刷新token有效期</span><br>        stringRedisTemplate.expire(key,LOGIN_USER_TTL, TimeUnit.MINUTES);<br>        <span class="hljs-comment">//8.放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        UserHolder.removeUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-登录状态刷新问题"><a href="#6-登录状态刷新问题" class="headerlink" title="6 登录状态刷新问题"></a>6 登录状态刷新问题</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/98f5c29b1b8b4b0fb9108a4bc4f035ee.png" alt="img"></p><p>即：配置两个拦截器</p><p>拦截器1：拦截一切的请求，同时刷新token的有效期</p><p>拦截器2：拦截登录的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RefreshTokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>  <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">RefreshTokenInterceptor</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span>&#123;<br>      <span class="hljs-built_in">this</span>.stringRedisTemplate=stringRedisTemplate;<br>  &#125;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>      <span class="hljs-comment">//1.获取请求头中的token</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;authorization&quot;</span>);<br>      <span class="hljs-comment">//判断token是否为空</span><br>      <span class="hljs-keyword">if</span>(StrUtil.isBlank(token))&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>      String key=LOGIN_USER_KEY+token;<br>      <span class="hljs-comment">//2.基于token获取redis中的用户</span><br>      Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);<br>      <span class="hljs-comment">//3.判断用户是否存在</span><br>      <span class="hljs-keyword">if</span>(userMap.isEmpty())&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>      <span class="hljs-comment">//5.存在，将查询到的Hash数据转为UserDTO对象</span><br>      <span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDTO</span>(), <span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">//6.保存用户到ThreadLocal</span><br>      UserHolder.saveUser(userDTO);<br>      <span class="hljs-comment">//7.刷新token有效期</span><br>      stringRedisTemplate.expire(key,LOGIN_USER_TTL, TimeUnit.MINUTES);<br>      <span class="hljs-comment">//8.放行</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      UserHolder.removeUser();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      <span class="hljs-comment">//判断是否需要拦截（ThreadLocal中是否有用户）</span><br>      <span class="hljs-keyword">if</span>(UserHolder.getUser()==<span class="hljs-literal">null</span>)&#123;<br>          <span class="hljs-comment">//没有，需要拦截，设置状态码</span><br>          response.setStatus(<span class="hljs-number">401</span>);<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>      <span class="hljs-comment">//有用户，则放行</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      UserHolder.removeUser();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">MvcConfig</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">WebMvcConfigurer</span></span> </span>&#123;<br><br>  <span class="hljs-meta">@Resource</span><br>  <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> void addInterceptors(InterceptorRegistry registry) &#123;<br>      registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-type">LoginInterceptor</span>())<br>              .excludePathPatterns(<br>                      <span class="hljs-string">&quot;/user/code&quot;</span>,<br>                      <span class="hljs-string">&quot;/user/login&quot;</span>,<br>                      <span class="hljs-string">&quot;/blog/hot&quot;</span>,<br>                      <span class="hljs-string">&quot;/shop/**&quot;</span>,<br>                      <span class="hljs-string">&quot;/shop-type/**&quot;</span>,<br>                      <span class="hljs-string">&quot;/voucher/**&quot;</span>,<br>                      <span class="hljs-string">&quot;/upload/**&quot;</span>).order(<span class="hljs-number">1</span>);<br>      registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-type">RefreshTokenInterceptor</span>(stringRedisTemplate)).order(<span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>拦截器的顺序，order值越小越小执行</strong></p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis-基础</title>
    <link href="/redis-%E5%9F%BA%E7%A1%80/be1ba4ac3a84/"/>
    <url>/redis-%E5%9F%BA%E7%A1%80/be1ba4ac3a84/</url>
    
    <content type="html"><![CDATA[<h1 id="0-目录"><a href="#0-目录" class="headerlink" title="0 目录"></a>0 目录</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/image-20240218215626001.png" alt="image-20240218215626001"></p><h1 id="1-NoSQL和SQL"><a href="#1-NoSQL和SQL" class="headerlink" title="1 NoSQL和SQL"></a>1 NoSQL和SQL</h1><p>SQL：<strong>传统关系型数据库是结构化数据，每一张表都有严格的约束信息：字段名、字段数据类型、字段约束等等信息，插入的数据必须遵守这些约束</strong></p><p>NoSQL：<strong>NoSql对数据库格式没有严格约束，往往形式松散，自由。可以是key-value,可以是文档，或者图格式</strong></p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/5c1e0a6741c8868bf4ad9996c03e2589.png" alt="image-20221108154744967"></p><h1 id="2-认识Redis"><a href="#2-认识Redis" class="headerlink" title="2 认识Redis"></a>2 认识Redis</h1><p><strong>特征：</strong></p><ul><li><strong>键值（key-value）型，value支持多种不同数据结构，功能丰富</strong></li><li><strong>单线程，每个命令具备原子性</strong></li><li><strong>低延迟，速度快（基于内存、IO多路复用、良好的编码）。</strong></li><li><strong>支持数据持久化(定期将内存搬运到磁盘)</strong></li><li><strong>支持主从集群、分片集群（数据拆分）</strong></li><li><strong>支持多语言客户端</strong></li></ul><h1 id="3-Redis命令"><a href="#3-Redis命令" class="headerlink" title="3 Redis命令"></a>3 Redis命令</h1><ul><li>KEYS：查看符合模板的所有key</li><li>DEL：删除一个指定的KEY</li><li>EXISTS：判断KEY是否存在</li><li>EXPIRE：给一个KEY设置有效期，有效期到期，这个key就会被自动删除（<strong>expire设置存活周期，ttl查看剩余时间，不设置expire的话ttl为-1</strong>）</li></ul><h2 id="3-1-String"><a href="#3-1-String" class="headerlink" title="3.1 String"></a>3.1 String</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ol><li>string：普通字符串</li><li>int：整数类型，可以做自增、自减操作</li><li>float：浮点类型，可以做自增、自减操作</li></ol><p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最 大空间不能超过512m </p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/image-20240218220640595.png" alt="image-20240218220640595"></p><h3 id="3-1-1-常见命令"><a href="#3-1-1-常见命令" class="headerlink" title="3.1.1 常见命令"></a>3.1.1 常见命令</h3><ul><li>SET：添加或者修改已经存在的一个String类型的键值对</li><li>GET：根据key获取String类型的value</li><li>MSET：批量添加多个String类型的键值对</li><li>MGET：根据多个key获取多个String类型的value</li><li>INCR：让一个整型的key自增1</li><li>INCRBY:让一个整型的key自增并指定步长，例如： incrby num 2 让num值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li><li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li>SETEX：添加一个String类型的键值对，并且指定有效期</li></ul><h3 id="3-1-2-Key结构"><a href="#3-1-2-Key结构" class="headerlink" title="3.1.2 Key结构"></a>3.1.2 Key结构</h3><p>可以通过给key添加前缀加以区分，前缀规范：Redis的key允许有多个单词形成层级结构，多个单词之间用’:’隔开，格式如下：</p><blockquote><p>项目名：业务名：类型：id</p></blockquote><h2 id="3-2-Hash"><a href="#3-2-Hash" class="headerlink" title="3.2 Hash"></a>3.2 Hash</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便。</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/image-20240218220722702.png" alt="image-20240218220722702"></p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/image-20240218220620645.png" alt="image-20240218220620645"></p><h3 id="3-2-1-常见命令"><a href="#3-2-1-常见命令" class="headerlink" title="3.2.1 常见命令"></a>3.2.1 常见命令</h3><ul><li>HSET  key  field  value：添加或者修改hash类型key的field的值</li><li>HGET key field：获取一个hash类型key的field的值</li><li>HMSET：批量添加多个hash类型key的field的值</li><li>HMGET：批量获取多个hash类型key的field的值</li><li>HGETALL：获取一个hash类型的key中的所有的field和value</li><li>HKEYS：获取一个hash类型的key中的所有的field</li><li>HVALS：获取一个hash类型的key中的所有的value</li><li>HINCRBY:让一个hash类型key的字段值自增并指定步长</li><li>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</li></ul><h2 id="3-3-List"><a href="#3-3-List" class="headerlink" title="3.3 List"></a>3.3 List</h2><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既 可以支持正向检索和也可以支持反向检索。</p><p><strong>特征也与LinkedList类似：</strong>有序、元素可以重复、插入和删除快、查询速度一般</p><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><h3 id="3-3-1-常见命令"><a href="#3-3-1-常见命令" class="headerlink" title="3.3.1 常见命令"></a>3.3.1 常见命令</h3><ul><li>LPUSH key element  ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li><li>RPUSH key element  ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li></ul><p>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</p><h2 id="3-4-Set"><a href="#3-4-Set" class="headerlink" title="3.4 Set"></a>3.4 Set</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的 HashMap。因为也是一个hash表，因此具备与HashSet类似的特征： 无序、元素不可重复、查找快、支持交集、并集、差集等功能。</p><h3 id="3-4-1-常见命令"><a href="#3-4-1-常见命令" class="headerlink" title="3.4.1 常见命令"></a>3.4.1 常见命令</h3><ul><li>SADD key member  ：向set中添加一个或多个元素</li><li>SREM key member  : 移除set中的指定元素</li><li>SCARD key： 返回set中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于set中</li><li>SMEMBERS：获取set中的所有元素</li><li>SINTER key1 key2  ：求key1与key2的交集</li><li>SDIFF key1 key2  ：求key1与key2的差集</li><li>SUNION key1 key2  ：求key1与key2的并集</li></ul><h2 id="3-5-SortedSet"><a href="#3-5-SortedSet" class="headerlink" title="3.5 SortedSet"></a>3.5 SortedSet</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层 数据结构却差别很大。 SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加  hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性（从小到大排序 ），经常被用来实现排行榜这样的功能。</p><h3 id="3-5-1-常见命令"><a href="#3-5-1-常见命令" class="headerlink" title="3.5.1 常见命令"></a>3.5.1 常见命令</h3><ul><li>ZADD key score member：添加一个或多个元素到sorted set 如果已经存在则更新其score值</li><li>ZREM key member：删除sorted set中的一个指定元素</li><li>ZSCORE key member  :  获取sorted set中的指定元素的score值</li><li>ZRANK key member：获取sorted set 中的指定元素的排名</li><li>ZCARD key：获取sorted set中的元素个数</li><li>ZCOUNT key min max ：统计score值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li><li>ZRANGE key min max ：按照 score排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max ：按照 score排序后，获取指定score范围内的元 素</li><li>ZDIFF、 ZINTER、 ZUNION：求差集、交集、并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><p> <strong>升序</strong>获取sorted set 中的指定元素的排名：  ZRANK key member</p><p> <strong>降序</strong>获取sorted set 中的指定元素的排名：  ZREVRANK key memeber</p><h1 id="4-Redis的Java客户端"><a href="#4-Redis的Java客户端" class="headerlink" title="4 Redis的Java客户端"></a>4 Redis的Java客户端</h1><h2 id="4-1-Jedis"><a href="#4-1-Jedis" class="headerlink" title="4.1 Jedis"></a>4.1 Jedis</h2><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>建立连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br>    <span class="hljs-keyword">private</span> Jedis jedis;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.建立连接</span><br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.200.130&quot;</span>,<span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">//2.设置密码</span><br>        jedis.auth(<span class="hljs-string">&quot;1234&quot;</span>);<br>        <span class="hljs-comment">//3.选择库</span><br>        jedis.select(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;小明&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result= &quot;</span> + result);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name= &quot;</span>+name);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(jedis!=<span class="hljs-literal">null</span>)&#123;<br>            jedis.close();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>Jedis连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JedisPool jedisPool;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-comment">//配置连接池</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>        poolConfig.setMaxWait(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig,<span class="hljs-string">&quot;192.168.200.130&quot;</span>,<span class="hljs-number">6379</span>,<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;1234&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>JedisConnectionFacotry：工厂设计模式是实际开发中非常常用的一种设计模式，我们可以使用工厂，去降低代的耦合，比如Spring中的Bean的创建，就用到了工厂设计模式</p></li><li><p>静态代码块：随着类的加载而加载，确保只能执行一次，我们在加载当前工厂类的时候，就可以执行static的操作完成对 连接池的初始化</p></li><li><p>最后提供返回连接池中连接的方法.</p></li></ol><h2 id="4-2-SpringDataRedis"><a href="#4-2-SpringDataRedis" class="headerlink" title="4.2 SpringDataRedis"></a>4.2 SpringDataRedis</h2><p><strong>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis</strong></p><p><strong>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</strong></p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/Redis/image-20240218221757795.png" alt="image-20240218221757795"></p><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Redis依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--连接池依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br></code></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">1234</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span> <span class="hljs-comment">#最大连接数</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span> <span class="hljs-comment">#最大空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#最小空闲连接</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">100</span> <span class="hljs-comment">#连接等待时间</span><br><br></code></pre></td></tr></table></figure></li><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br><span class="hljs-comment">//JSON工具类ObjectMapper,或者可以用fastjson:JSON.toJSONString(), JSON.parseObject()</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSaveUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setName(<span class="hljs-string">&quot;阿廖莎&quot;</span>);<br>    user.setAge(<span class="hljs-number">21</span>);<br>    <span class="hljs-comment">//手动序列化</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br><br>    stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:100&quot;</span>,json);<br>    <span class="hljs-comment">//反序列化</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> mapper.readValue(stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:100&quot;</span>), User.class);<br>    System.out.println(<span class="hljs-string">&quot;user1 = &quot;</span> + user1);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程技巧-并发处理-01</title>
    <link href="/Java%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7-%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86-01/156a7266de3c/"/>
    <url>/Java%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7-%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86-01/156a7266de3c/</url>
    
    <content type="html"><![CDATA[<blockquote><p>背景：公司的项目，自己写了一个接口的时候，请求接口的具体service涉及到异步A+同步B的情况，需要等到同步B方法执行完成之后才会释放资源，因此如何控制好并发是一个问题</p></blockquote><h1 id="1-解决思路"><a href="#1-解决思路" class="headerlink" title="1. 解决思路"></a>1. 解决思路</h1><p>使用队列进行控制</p><h1 id="2-思路："><a href="#2-思路：" class="headerlink" title="2. 思路："></a>2. 思路：</h1><ol><li>分析出真正会并发的一块代码</li><li>将真正会并发的那一块代码抽取出来，单独封装一个方法</li><li>将调用并发代码之前的方法A加锁，保证该方法A不会出现并发情况</li><li>在方法A中使用一个队列将需要执行的任务进行管理</li><li>当有第一个请求进入的时候，此时list为空，那么直接执行并发方法，如果当list不为空，那么将任务添加进去即可。</li><li>最后当第一个请求执行完成需要释放资源的时候，此时将执行的任务移除，判断list中是否有内容，如果有，取出list首位，并执行并发的方法。</li></ol><h1 id="3-具体代码"><a href="#3-具体代码" class="headerlink" title="3. 具体代码"></a>3. 具体代码</h1><p>第一步：等待编译回调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/apk/&#123;mode&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">jenkinsCompile</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> RobustReq robustReq, <span class="hljs-meta">@PathVariable(&quot;mode&quot;)</span>Integer mode)</span> &#123;<br>        compileRecordService.saveParamAndStartCompile(robustReq.getLiTaskId(), robustReq, mode, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IJenkinsResultCallback</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResult</span><span class="hljs-params">(String taskId, <span class="hljs-type">boolean</span> isSuccess)</span> &#123;<br>                <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>                    robustService.savRobustParam(taskId, robustReq);<br>                    robustService.noticeInstall(taskId);<br>                &#125;<br>            &#125;<br>        &#125;, TaskTypeEnum.ROBUST_TEST.getTaskCode());<br><br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br></code></pre></td></tr></table></figure><p>第二步：回调完成，安装APK</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">noticeInstall</span><span class="hljs-params">(String taskId)</span> &#123;<br>        <span class="hljs-keyword">if</span> (taskIdList.isEmpty()) &#123;<br>            exeInstall(taskId);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            taskIdList.add(taskId);<br>        &#125;<br>    &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exeInstall</span><span class="hljs-params">(String taskId)</span> &#123;<br>      List&lt;Map&lt;String, Object&gt;&gt; envInfoList = getAvaInfoList(rowList);<br><br>      <span class="hljs-comment">// 1~5min</span><br>      <span class="hljs-keyword">while</span> (envInfoList.isEmpty()) &#123;<br>          <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>          <span class="hljs-type">int</span> <span class="hljs-variable">delay</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">5</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>) + <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br><br>          <span class="hljs-keyword">try</span> &#123;<br>              Thread.sleep(delay);<br>          &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>          &#125;<br>          envInfoList = getAvaInfoList(rowList);<br>      &#125;<br><br>      Map&lt;String, Object&gt; envInfo = envInfoList.get(<span class="hljs-number">0</span>);<br>      List&lt;String&gt; devicesList = (List&lt;String&gt;) envInfo.get(<span class="hljs-string">&quot;deviceIds&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">deviceId</span> <span class="hljs-operator">=</span> devicesList.get(<span class="hljs-number">0</span>);<br><br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> (Integer) envInfo.get(<span class="hljs-string">&quot;id&quot;</span>);<br><br>      <span class="hljs-type">String</span> <span class="hljs-variable">installUrl</span> <span class="hljs-operator">=</span> Constants.Win.ADDRESS + Constants.Common.COLON + Constants.Win.JAVA_PORT + Constants.Common.SEPARATOR + Constants.Win.INSTALL_APK_HMI;<br>      HttpUtil.createPost(installUrl)<br>              .header(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)<br>              .body(JSONUtil.toJsonStr(paramMap))<br>              .execute();<br>  &#125;<br></code></pre></td></tr></table></figure><p>第三步：等待另一台服务的响应：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/callback&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">installCallback</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> InstallResp resp)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">taskId</span> <span class="hljs-operator">=</span> resp.getTaskId();<br><br>        <span class="hljs-keyword">if</span> (resp.isSuccess()) &#123;<br>            robustService.startRobust(taskId, infoMap -&gt; &#123;<br>            &#125;, emitter);<br>            <span class="hljs-keyword">return</span> Result.ok();<br><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>第四步：执行任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startRobust</span><span class="hljs-params">(String taskId, ILiATCallback callback, ObservableEmitter&lt;Boolean&gt; emitter)</span> &#123;<br>        executeTask(runTime, returnNum, liTaskId, taskId);<br><br>        startIntervalGetRate(liTaskId, taskId, emitter);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeTask</span><span class="hljs-params">(Integer runtime, Integer returnNum, Integer liTaskId, String taskId)</span> &#123;<br>        List&lt;Map&lt;String, Object&gt;&gt; envList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        Map&lt;String, Object&gt; paramMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><br>        <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> HttpUtil.createPost(<span class="hljs-string">&quot;xxx&quot;</span>)<br>                .header(<span class="hljs-string">&quot;content-type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)<br>                .header(<span class="hljs-string">&quot;authorization&quot;</span>, Constants.LiAT.AUTHORIZATION)<br>                .body(JSONUtil.toJsonStr(paramMap))<br>                .execute();<br><br>        taskIdList.remove(taskId);<br>        <span class="hljs-keyword">if</span> (!taskIdList.isEmpty()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">nextTaskId</span> <span class="hljs-operator">=</span> taskIdList.get(<span class="hljs-number">0</span>);<br>            exeInstall(nextTaskId);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java编程技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java编程技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode-hot100-双指针</title>
    <link href="/leetcode-hot100-%E5%8F%8C%E6%8C%87%E9%92%88/fa7554c1833c/"/>
    <url>/leetcode-hot100-%E5%8F%8C%E6%8C%87%E9%92%88/fa7554c1833c/</url>
    
    <content type="html"><![CDATA[<h1 id="1-移动零"><a href="#1-移动零" class="headerlink" title="1. 移动零"></a>1. 移动零</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/LeetCode/image-20231202172905894.png" alt="image-20231202172905894"></p><h1 id="2-盛最多水的容器"><a href="#2-盛最多水的容器" class="headerlink" title="2. 盛最多水的容器"></a>2. 盛最多水的容器</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/LeetCode/image-20231202174344254.png" alt="image-20231202174344254"></p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode-hot100-哈希</title>
    <link href="/leetcode-hot100-%E5%93%88%E5%B8%8C/91774001b143/"/>
    <url>/leetcode-hot100-%E5%93%88%E5%B8%8C/91774001b143/</url>
    
    <content type="html"><![CDATA[<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/LeetCode/image-20231202170319592.png" alt="image-20231202170319592"></p><h1 id="2-字母异位词分组"><a href="#2-字母异位词分组" class="headerlink" title="2. 字母异位词分组"></a>2. 字母异位词分组</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/LeetCode/image-20231202171402767.png" alt="image-20231202171402767"></p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程技巧-回调函数</title>
    <link href="/Java%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/12bcfab4b0fb/"/>
    <url>/Java%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/12bcfab4b0fb/</url>
    
    <content type="html"><![CDATA[<blockquote><p>背景：<br>开发公司项目的时候，需要用到Jenkins触发编译，打包APK，随后拿到产物地址再进行下一步，但是APK编译时间不确定，但是检测又必须拿到这个产物地址才能进行。</p></blockquote><h1 id="1-回调"><a href="#1-回调" class="headerlink" title="1. 回调"></a>1. 回调</h1><h2 id="1-1-同步回调"><a href="#1-1-同步回调" class="headerlink" title="1.1. 同步回调"></a>1.1. 同步回调</h2><blockquote><p>比如：你去书店买书，进门问老板有书吗？老板说有，同时给你拿出了书，随后，你付钱离开。这一过程，整个流程：</p><ol><li>询问</li><li>等老板给你拿书</li><li>拿到书付钱离开</li></ol></blockquote><p><code>fun(a)</code>调用<code>fun(b)</code>，<code>fun(a)</code><strong>等待</strong><code>fun(b)</code>执行完后再进行下一步。</p><p>同步调用会引起代码的阻塞。</p><h2 id="1-2-异步回调"><a href="#1-2-异步回调" class="headerlink" title="1.2. 异步回调"></a>1.2. 异步回调</h2><blockquote><p>比如：你还是去买书，询问老板有书吗？老板说我去找一下，你回复说那你先找吧，我先去喝一杯奶茶去，我过一会人再来。过了一个小时，老板已经将书放在柜台，你付钱离开。整个过程：</p><ol><li>询问</li><li>老板去招书</li><li>你去喝奶茶</li><li>得到书，付钱离开</li></ol></blockquote><p><code>fun(a)</code>调用<code>fun(b)</code>, <code>fun(a)</code><strong>不等待</strong><code>fun(b)</code>执行完便进行下一步。<br>常见的有Thread、Task等。</p><h2 id="1-3-回调"><a href="#1-3-回调" class="headerlink" title="1.3. 回调"></a>1.3. 回调</h2><blockquote><p>比如：你接着去买书，询问老板有书吗？老板说目前没有，然后你回答说，那我在这儿等，书来了我才走。后面有书了，你得到了书付钱离开。整个过程：</p><ol><li>询问</li><li>老板备货</li><li>等待</li><li>得到书，付钱离开</li></ol></blockquote><p> 回调的机制是：</p><ol><li>类A的<code>a()</code>方法调用类B的<code>b()</code>方法</li><li>类B的<code>b()</code>方法执行完毕主动调用类A的<code>callback()</code>方法</li></ol><p>所以在回调，重要的就是两个类：</p><p>A：调用B后，需要等到B的结果才能继续向下执行。</p><p>B：执行动作。</p><p>设置回调，由于A是需要等到B的结果再向下，所以在A中，需要实现这个接口，或者在调用B方法的参数中，实例化一个Callback对象，B中持有这个回调对象，当B完成之后，就通过这个回调对象发消息。</p><p>比如买书：</p><p>用户需要等书才走，书店老板要备货，那么用户就是A，书店(老板)就是B，用户需要实现一个回调，并且书店要持有这个回调，当备货完成才能通知用户。</p><p>回调：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookAvailableCallback</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBookAvailable</span><span class="hljs-params">(String bookTitle)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;去书店买书&quot;</span>);<br>        <span class="hljs-type">BookStore</span> <span class="hljs-variable">bookStore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookStore</span>();<br>        bookStore.prepareBook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookAvailableCallback</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBookAvailable</span><span class="hljs-params">(String bookTitle)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;买到了书---《&quot;</span> + bookTitle + <span class="hljs-string">&quot;》&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>书店：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookStore</span> &#123;<br>    <span class="hljs-keyword">private</span> BookAvailableCallback callback;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareBook</span><span class="hljs-params">(BookAvailableCallback callback)</span> &#123;<br>        <span class="hljs-built_in">this</span>.callback = callback;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;书店正在备货，请稍候...&quot;</span>);<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>); <span class="hljs-comment">// 模拟备货过程，等待5秒</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        haveBook();<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">haveBook</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bookTitle</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java Programming&quot;</span>; <span class="hljs-comment">// 模拟书店有了书</span><br><br>        <span class="hljs-comment">// 当书店有书时，调用回调通知用户</span><br>        <span class="hljs-keyword">if</span> (callback != <span class="hljs-literal">null</span>) &#123;<br>            callback.onBookAvailable(bookTitle);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BookStore</span> <span class="hljs-variable">bookStore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookStore</span>();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><br>        user.buyBook();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实回调就是一个很好的面向接口编程的实例，在接口中定义好要做什么事，根据接口定义的职责，实例出来的对象就具备这个接口能力，那么只需要在另一边持有对应的引用就可以通过回调定义的能力将最终结果返回。</p>]]></content>
    
    
    <categories>
      
      <category>Java编程技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java编程技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程-ThreadLocal</title>
    <link href="/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-ThreadLocal/5c8cef3482ea/"/>
    <url>/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-ThreadLocal/5c8cef3482ea/</url>
    
    <content type="html"><![CDATA[<h1 id="1、ThreadLocal是什么？"><a href="#1、ThreadLocal是什么？" class="headerlink" title="1、ThreadLocal是什么？"></a>1、ThreadLocal是什么？</h1><ul><li>提供线程内局部变量，不同线程之间不会相互干扰。</li><li>ThreadLocal 实例通常来说都是 <code>private static</code> 修饰的，用于关联线程和线程的上下文。</li><li><code>减少同一个线程内的函数 或 组件之间传递变量的复杂性</code>。</li></ul><p>小结：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 线程并发：在多线程并发的场景<br><span class="hljs-bullet">2.</span> 传递数据：通过ThreadLocal在同一线程不同组件中传递公共变量。<br><span class="hljs-bullet">3.</span> 线程隔离：每个线程的变量都是独立的，不会互相影响<br></code></pre></td></tr></table></figure><h2 id="1-1、举例-线程隔离"><a href="#1-1、举例-线程隔离" class="headerlink" title="1.1、举例-线程隔离"></a>1.1、举例-线程隔离</h2><ul><li><p>不使用ThreadLocal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content= content;<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    demo.setContent(Thread.currentThread().getName() + <span class="hljs-string">&quot;的数据&quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;------------&quot;</span>);<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----&gt;&quot;</span> + demo.getContent());<br>                &#125;<br>            &#125;, <span class="hljs-string">&quot;线程&quot;</span> + i).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/image-20230722155750292.png" alt="image-20230722155750292"></p></li><li><p>使用ThreadLocal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    ThreadLocal&lt;String&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        threadLocal.set(content);<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> threadLocal.get();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    demo.setContent(Thread.currentThread().getName() + <span class="hljs-string">&quot;的数据&quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;------------&quot;</span>);<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----&gt;&quot;</span> + demo.getContent());<br>                &#125;<br>            &#125;, <span class="hljs-string">&quot;线程&quot;</span> + i).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/image-20230722155708884.png" alt="image-20230722155708884"></p></li></ul><h2 id="1-2、对比synchronized"><a href="#1-2、对比synchronized" class="headerlink" title="1.2、对比synchronized"></a>1.2、对比synchronized</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">synchronizedDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content= content;<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">synchronizedDemo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">synchronizedDemo</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    <span class="hljs-keyword">synchronized</span> (synchronizedDemo.class) &#123;<br>                        demo.setContent(Thread.currentThread().getName() + <span class="hljs-string">&quot;的数据&quot;</span>);<br>                        System.out.println(<span class="hljs-string">&quot;------------&quot;</span>);<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----&gt;&quot;</span> + demo.getContent());<br>                    &#125;<br>                &#125;<br>            &#125;, <span class="hljs-string">&quot;线程&quot;</span> + i).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/image-20230722161534672.png" alt="image-20230722161534672"></p><p>虽然 <code>ThreadLocal</code> 和 <code>Synchronized</code> 关键字都是用于处理多线程并发访问变量的问题，不过两者处理问题的角度和思路不同。</p><table><thead><tr><th align="center"></th><th align="center">Synchronized</th><th align="center">ThreadLocal</th></tr></thead><tbody><tr><td align="center">原理</td><td align="center">同步机制采用“以时间换空间”的方式，只提供了一份变量，让不同的线程排队访问。</td><td align="center">采用 “以空间换时间”的方式，为每一个线程都提供了一份变量的副本，从而实现同时访问而不互相干扰。</td></tr><tr><td align="center">侧重点</td><td align="center">多个线程之间访问资源的<strong>同步</strong>。</td><td align="center">并发情况下让每个线程之间数据相互<strong>隔离</strong>。</td></tr></tbody></table><h2 id="1-3、ThreadLocal的好处"><a href="#1-3、ThreadLocal的好处" class="headerlink" title="1.3、ThreadLocal的好处"></a>1.3、ThreadLocal的好处</h2><ol><li>传递数据：保证每个线程保定的数据在需要的地方可以直接使用，这样避免了进行参数传递而带来的代码耦合问题。</li><li>线程隔离：各个线程之间的数据相互隔离但有具备并发性，同事避免了使用synchronized加锁带来的性能损耗问题。</li></ol><h1 id="2、案例"><a href="#2、案例" class="headerlink" title="2、案例"></a>2、案例</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/image.png" alt="img"></p><p>那么可以看到在service到Dao层的时候，都会使用connection，那么此时将connection对象和当前线程进行绑定，这样就能保证数据的一致性，并且避免传参导致的代码耦合问题。</p><h2 id="2-1、Service层"><a href="#2-1、Service层" class="headerlink" title="2.1、Service层"></a>2.1、Service层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.transfer.service;<br><br><span class="hljs-keyword">import</span> com.itheima.transfer.dao.AccountDao;<br><span class="hljs-keyword">import</span> com.itheima.transfer.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String outUser, String inUser, <span class="hljs-type">int</span> money)</span> &#123;<br>        <span class="hljs-type">AccountDao</span> <span class="hljs-variable">ad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountDao</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JdbcUtils.getConnection();<br>            <span class="hljs-comment">//开启事务</span><br>            conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">// 转出 ： 这里不需要传参了 ！</span><br>            ad.out(outUser, money);<br>            <span class="hljs-comment">// 模拟转账过程中的异常</span><br><span class="hljs-comment">//            int i = 1 / 0;</span><br>            <span class="hljs-comment">// 转入</span><br>            ad.in(inUser, money);<br>            <span class="hljs-comment">//事务提交</span><br>            JdbcUtils.commitAndClose();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-comment">//事务回滚</span><br>           JdbcUtils.rollbackAndClose();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-2、Dao层"><a href="#2-2、Dao层" class="headerlink" title="2.2、Dao层"></a>2.2、Dao层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.transfer.dao;<br><br><span class="hljs-keyword">import</span> com.itheima.transfer.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountDao</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">(String outUser, <span class="hljs-type">int</span> money)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = money - ? where name = ?&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JdbcUtils.getConnection();<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstm</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>        pstm.setInt(<span class="hljs-number">1</span>,money);<br>        pstm.setString(<span class="hljs-number">2</span>,outUser);<br>        pstm.executeUpdate();<br>        <span class="hljs-comment">//照常使用</span><br><span class="hljs-comment">//        JdbcUtils.release(pstm,conn);</span><br>        JdbcUtils.release(pstm);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">(String inUser, <span class="hljs-type">int</span> money)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = money + ? where name = ?&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JdbcUtils.getConnection();<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstm</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>        pstm.setInt(<span class="hljs-number">1</span>,money);<br>        pstm.setString(<span class="hljs-number">2</span>,inUser);<br>        pstm.executeUpdate();<br><span class="hljs-comment">//        JdbcUtils.release(pstm,conn);</span><br>        JdbcUtils.release(pstm);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-3、Utils方法"><a href="#2-3、Utils方法" class="headerlink" title="2.3、Utils方法"></a>2.3、Utils方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.transfer.utils;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUtils</span> &#123;<br>    <span class="hljs-comment">//ThreadLocal对象 : 将connection绑定在当前线程中</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Connection&gt; tl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>();<br><br>    <span class="hljs-comment">// c3p0 数据库连接池对象属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br><br>    <span class="hljs-comment">// 获取连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//取出当前线程绑定的connection对象</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> tl.get();<br>        <span class="hljs-keyword">if</span> (conn == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//如果没有，则从连接池中取出</span><br>            conn = ds.getConnection();<br>            <span class="hljs-comment">//再将connection对象绑定到当前线程中</span><br>            tl.set(conn);<br>        &#125;<br>        <span class="hljs-keyword">return</span> conn;<br>    &#125;<br><br>    <span class="hljs-comment">//释放资源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">(AutoCloseable... ios)</span> &#123;<br>        <span class="hljs-keyword">for</span> (AutoCloseable io : ios) &#123;<br>            <span class="hljs-keyword">if</span> (io != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    io.close();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commitAndClose</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> getConnection();<br>            <span class="hljs-comment">//提交事务</span><br>            conn.commit();<br>            <span class="hljs-comment">//解除绑定</span><br>            tl.remove();<br>            <span class="hljs-comment">//释放连接</span><br>            conn.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollbackAndClose</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> getConnection();<br>            <span class="hljs-comment">//回滚事务</span><br>            conn.rollback();<br>            <span class="hljs-comment">//解除绑定</span><br>            tl.remove();<br>            <span class="hljs-comment">//释放连接</span><br>            conn.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到，在Utils方法中，getConnection的时候，此时使用了一个ThreadLocal对象，将当前Connection对象和当前线程进行绑定了；如果是第一次获取connection对象，那么就从连接池中获取，不是的话，那么直接从ThreadLocal中获取。</p><h1 id="3、内部结构探索"><a href="#3、内部结构探索" class="headerlink" title="3、内部结构探索"></a>3、内部结构探索</h1><h2 id="3-1、内部结构"><a href="#3-1、内部结构" class="headerlink" title="3.1、内部结构"></a>3.1、内部结构</h2><p>在JDK8中ThreadLocal的设计：每个<code>Thread</code>维护一个<code>ThreadLocalMap</code>，这个Map的<code>key</code>是<code>ThreadLocal</code>对象本身，而<code>value</code>就是真正需要存储的值。</p><p>具体：</p><blockquote><p>（1） 每个Thread线程内部都有一个Map (ThreadLocalMap)<br>（2） Map里面存储ThreadLocal对象（key）和线程的变量副本（value）<br>（3）Thread内部的Map是由ThreadLocal维护的，由ThreadLocal负责向map获取和设置线程的变量值。<br>（4）对于不同的线程，每次获取副本值时，别的线程并不能获取到当前线程的副本值，形成了副本的隔离，互不干扰。</p></blockquote><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/image-20230722171217698.png" alt="image-20230722171217698"></p><p>由于每个Thread中维护一个ThreadLocalMap，Map的key为ThreadLocal对象本身，value为设置的值，这样的优势：</p><ol><li>每个<code>Map</code>存储的<code>Entry</code>数量就会变少，JDK7中的存储数量由<code>Thread</code>的数量决定，现在是由<code>ThreadLocal</code>的数量决定。（ThreadLocal的数量远远小于Thread数量）</li><li>当<code>Thread</code>销毁之后，对应的<code>ThreadLocalMap</code>也会随之销毁，能减少内存的使用。</li></ol><h2 id="3-2、核心方法"><a href="#3-2、核心方法" class="headerlink" title="3.2、核心方法"></a>3.2、核心方法</h2><h3 id="3-2-1、set"><a href="#3-2-1、set" class="headerlink" title="3.2.1、set"></a>3.2.1、set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span> &#123;<br><span class="hljs-comment">// 1）拿到当前线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-comment">// 2）通过线程内部的 threadLocals 变量，拿到对应 ThreadLocalMap 对象。对应着分析1</span><br>        <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>        <span class="hljs-comment">// 3）判断如果不为 null ,则直接调用 ThreadLocalMap 中的 set 方法，传入 当前的 ThreadLocal 对象和要指定修改的值 value，对应着分析2</span><br>        <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>            map.set(<span class="hljs-built_in">this</span>, value);<br>        <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// 4）创建 map 为 null，就创建 map, 对应着分析3</span><br>            createMap(t, value);<br>    &#125; <br><br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadLocalMap <span class="hljs-title function_">getMap</span><span class="hljs-params">(Thread t)</span> &#123;<br>    <span class="hljs-keyword">return</span> t.threadLocals;<br>&#125;<br><br><span class="hljs-comment">// Thread类中持有一个ThreadLocalMap类型的对象threadLocals</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    ThreadLocal.<span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">threadLocals</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    ThreadLocal.<span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">inheritableThreadLocals</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>真正进行赋值：</p><blockquote><p>set方法可以进行修改或者新建的操作。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;<br>    <span class="hljs-comment">// 将ThreadLocal对象的存储表table赋值给局部变量tab</span><br>        Entry[] tab = table;<br>    <span class="hljs-comment">// 计算tab的长度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br>    <span class="hljs-comment">// 先找到对应Entry的数组下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (len-<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 循环查找存储表中能匹配的Entry对象，从索引位置开始一直到链表末尾</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> tab[i];<br>             e != <span class="hljs-literal">null</span>;<br>             e = tab[i = nextIndex(i, len)]) &#123;<br>            <span class="hljs-comment">// 取出当前的ThreadLocal对象</span><br>            ThreadLocal&lt;?&gt; k = e.get();<br>            <span class="hljs-comment">// 判断与Key，即是否是一个ThreadLocal对象，如果是，那么就进行以及修改</span><br>            <span class="hljs-keyword">if</span> (k == key) &#123;<br>                e.value = value;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 当前Entry的ThreadLocal对象为空，说明该Entry无效，可能在之前被GC掉了</span><br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 传入key, value, i创建一个新的Entry，存储在数组tab的位置</span><br>                replaceStaleEntry(key, value, i);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>    <span class="hljs-comment">// 循环找都没有匹配ThreadLocal对象</span><br>    <span class="hljs-comment">// 新建一个Entry，</span><br>        tab[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(key, value);<br><span class="hljs-comment">// 增加存储表中的Entry数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sz</span> <span class="hljs-operator">=</span> ++size;<br>    <span class="hljs-comment">// 判断是否需要清理一些无效的Entry&amp;&amp;是否需要去扩容</span><br>        <span class="hljs-keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)<br>            <span class="hljs-comment">// 进行扩容</span><br>            rehash();<br>    &#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">createMap</span><span class="hljs-params">(Thread t, T firstValue)</span> &#123;<br>        t.threadLocals = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(<span class="hljs-built_in">this</span>, firstValue);<br>    &#125;<br>    <br>ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;<br>        <span class="hljs-comment">// 创建一个默认长度大小为 16 的 Entry 数组</span><br>        table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[INITIAL_CAPACITY];<br>        <span class="hljs-comment">// 计算对应的数组的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 插入节点</span><br>        table[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(firstKey, firstValue);<br>        size = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 设置扩容阈值</span><br>        setThreshold(INITIAL_CAPACITY);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-2-2、get"><a href="#3-2-2、get" class="headerlink" title="3.2.2、get"></a>3.2.2、get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前的线程</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-comment">// 获取当前线程的ThreadLocalMap</span><br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 通过 getEntry 找到线程对应着的 Entry 对象, 对应着分析1</span><br>        ThreadLocalMap.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> map.getEntry(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">// 如果不为 null 则直接拿到返回</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (T)e.value;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// map为空，进行initialValue</span><br>    <span class="hljs-keyword">return</span> setInitialValue();<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Entry <span class="hljs-title function_">getEntry</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key)</span> &#123;<br>    <span class="hljs-comment">// 计算出 index 的值</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (table.length - <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 获取当前tab下表为i的Entry</span><br>    <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> table[i];<br>    <span class="hljs-comment">// 如果存在, 判断是不是相同的对象，是就直接返回</span><br>    <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span> &amp;&amp; e.get() == key)<br>        <span class="hljs-keyword">return</span> e;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// 清空 key 为 null 的对象</span><br>        <span class="hljs-keyword">return</span> getEntryAfterMiss(key, i, e);<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> T <span class="hljs-title function_">setInitialValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 会进行初始化, 如果我们重写了就会调用我们自己重写的，否则就调用默认的。</span><br>    <span class="hljs-comment">// protected T initialValue() &#123;return null;&#125;</span><br>    <span class="hljs-type">T</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> initialValue();<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>     <span class="hljs-comment">// 如果 map 不为 null ，就直接添加本地变量，key 为当前线程，值为添加的本地变量值</span><br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>        map.set(<span class="hljs-built_in">this</span>, value);<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-comment">// 如果 map 为 null，说明首次添加，需要首先创建出对应的 map</span><br>        createMap(t, value);<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-3、remove"><a href="#3-2-3、remove" class="headerlink" title="3.2.3、remove"></a>3.2.3、remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前线程绑定的 threadLocals</span><br>     <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> getMap(Thread.currentThread());<br>     <span class="hljs-comment">// 如果 map 不为 null，就移除当前线程中指定 ThreadLocal 实例的本地变量</span><br>     <span class="hljs-keyword">if</span> (m != <span class="hljs-literal">null</span>)<br>         m.remove(<span class="hljs-built_in">this</span>);<br> &#125;<br><br></code></pre></td></tr></table></figure><h1 id="4、ThreadLocal内存泄漏"><a href="#4、ThreadLocal内存泄漏" class="headerlink" title="4、ThreadLocal内存泄漏"></a>4、ThreadLocal内存泄漏</h1><h2 id="4-1、内存泄漏是什么？"><a href="#4-1、内存泄漏是什么？" class="headerlink" title="4.1、内存泄漏是什么？"></a>4.1、内存泄漏是什么？</h2><blockquote><p>不再会使用的对象或者变量占用的内存不能被回收，就是内存泄漏。</p></blockquote><h2 id="4-2、四种引用"><a href="#4-2、四种引用" class="headerlink" title="4.2、四种引用"></a>4.2、四种引用</h2><h3 id="4-2-1、强引用"><a href="#4-2-1、强引用" class="headerlink" title="4.2.1、强引用"></a>4.2.1、强引用</h3><p>一般我们 new 关键字创建的对象就是 Reference（强引用），当内存不足时，JVM 开始垃圾回收，对于强引用对象，就算是出现 OOM 也不会对该对象进行回收。</p><h3 id="4-2-2、软引用"><a href="#4-2-2、软引用" class="headerlink" title="4.2.2、软引用"></a>4.2.2、软引用</h3><p>软引用是一种相对相对于强引用弱化了一些的引用，需要用 SoftReference 类实现，对于软引用来说，当系统内存充足时，软引用对象不会被垃圾回收，不充足时，会被回收。软引用通常用在对内存敏感的程序中，比如高速缓存就有用到软引用，内存够用的时候就保留，不够用就回收！</p><h3 id="4-2-3、弱引用"><a href="#4-2-3、弱引用" class="headerlink" title="4.2.3、弱引用"></a>4.2.3、弱引用</h3><p>弱引用需要用 WeakReference 类实现，它比软引用的生存期更短，对于弱引用对象来说，只要垃圾回收器运行，不管 JVM 内存空间是否足够，都会回收该对象占用的内存。</p><h3 id="4-2-4、虚引用"><a href="#4-2-4、虚引用" class="headerlink" title="4.2.4、虚引用"></a>4.2.4、虚引用</h3><p>虚引用需要 PhantomReference 类来实现，如果一个对象持有虚引用，那么它就和没有任何引用一样，在任何时候都可能会垃圾回收器回收，它不能单独使用也不能通过它访问对象，虚引用必须和引用队列（ReferenceQueue）联合使用。</p><h2 id="4-3、Entry"><a href="#4-3、Entry" class="headerlink" title="4.3、Entry"></a>4.3、Entry</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalMap</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;<br>        <span class="hljs-comment">/** The value associated with this ThreadLocal. */</span><br>        Object value;<br><br>        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;<br>            <span class="hljs-built_in">super</span>(k);<br>            value = v;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上述代码中可以得知，</p><ul><li>ThreadLocalMap是ThreadLocal的一个内部静态类，用来存储每个线程对应的变量值。Entry类来管理每个线程本地变量的key-value。</li><li><code>Entry</code>是<code>ThreadLocalMap</code>的一个内部静态类，继承自<code>WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</code>。<code>Entry</code>表示一个键值对，用于将<code>ThreadLocal</code>对象与其对应的变量值关联起来。<ul><li>表明：<code>ThreadLocal</code>对象在没有其他强引用对象的时候会被垃圾回收器进行回收，而<code>Entry</code>的声明周期也会随着结束，进而避免了内存泄漏。</li></ul></li></ul><h3 id="4-3-1、为什么是弱引用"><a href="#4-3-1、为什么是弱引用" class="headerlink" title="4.3.1、为什么是弱引用"></a>4.3.1、为什么是弱引用</h3><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/20210219124533810.png" alt="图一"></p><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>    ThreadLocal&lt;Integer&gt; tl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br>    tl .set(<span class="hljs-number">2021</span>);<br>    tl .get();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>当调用method的时候，会向栈中插入一条栈帧。</li><li>new关键字创建一个ThreadLocal对象，此时tl是对象的引用<ul><li>new出的对象是一个强引用，通过set方法进行存储值，Key是ThreadLocal对象本身，Value为需要存储的值。</li><li>Entry继承WeakReference，那么Key是弱引用指向了ThreadLocal对象。</li></ul></li><li>当method方法执行完毕之后，栈帧销毁，此时强引用tl就不存在了。<ul><li>但是Thread的ThreadLocalMap中的某一个Entry的key的引用还指向了ThreadLocal对象</li><li>如果这个Key引用是强引用，会导致Key指向的ThreadLocal对象是强引用对象不能被GC，会造成内存泄漏</li><li>如果这个Key引用是弱引用，会大概率减少内存泄漏的问题。使用了弱引用，就可以使ThreadLocal对象在方法执行完毕之后顺利被回收，并且Key的引用会被指向为null。</li></ul></li></ul><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/20210219131444101.png" alt="图二"></p><blockquote><p>总结：</p><ul><li>new一个ThreadLocal对象的时候，就会有一个强引用指向这个对象。</li><li>调用set方法之后，线程中的ThreadLocalMap中的Entry对象中的Key指向ThreadLocal对象。</li><li>如果Key是强引用的话，当方法执行完，栈帧中的强引用销毁了，对象还不能被回收，此时就会造成内存泄漏。</li></ul></blockquote><h3 id="4-3-2、为什么还是会泄漏"><a href="#4-3-2、为什么还是会泄漏" class="headerlink" title="4.3.2、为什么还是会泄漏"></a>4.3.2、为什么还是会泄漏</h3><p>虽然Entry继承了弱引用，保证了Key指向的ThreadLocal对象能被及时回收，但是此时v指向的Value对象需要再ThreadLocalMap调用get、set的时候发现Key为null的时候才能回收整个的entry、Value。</p><blockquote><p>为什么value还持有引用？</p><p>解答：ThreadLocal作为Thread的一个属性，如果当前线程没有手动销毁，那么ThreadLocalMap也还是存在，同理Entry的引用也持有。</p></blockquote><p><code>所以泄露的根本原因就是因为ThreadLocal的生命周期和Thread的生命周期一样，如果线程没有主动销毁，那么entry就不会被销毁。</code><br><img src="https://workspace-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/image-20230725174415384.png" alt="image-20230725174415384"></p><p>所以：弱引用只是帮助我们降低了内存泄漏的概率，并不能完全避免，在使用完成之后，<code>必须手动remove</code>这个对象。</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/20210219134347416.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Java多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程-线程交替打印</title>
    <link href="/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0/4fde684e52ae/"/>
    <url>/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0/4fde684e52ae/</url>
    
    <content type="html"><![CDATA[<p>今日复习来自极海Channel的一个面试</p><blockquote><p>如何实现两个线程实现交替打印，线程A打印A，线程B打印B？</p></blockquote><p>讲真当时看到的时候，脑子里面第一反应就是信号量和synchronized解法，那有synchronized就会有ReentrantLock，那就尝试用这三个解法回答一下吧。</p><p>代码地址：<a href="https://github.com/baijiangLai/LearnOfJUC/tree/master/alternatePrint">线程交替打印</a></p><h2 id="1、synchronized实现"><a href="#1、synchronized实现" class="headerlink" title="1、synchronized实现"></a>1、synchronized实现</h2><p>synchronized的方式实现主要是进行加锁，通过一把对象锁，在代码块内只允许一个线程执行后续操作。</p><p>核心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 持有的lock锁</span><br><span class="hljs-keyword">synchronized</span> (lock) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-comment">// 打印顺序就是A--&gt;B--&gt;C</span><br>        <span class="hljs-keyword">while</span> (currentOrder % <span class="hljs-number">3</span> != order) &#123;<br>            lock.wait(); <span class="hljs-comment">// 当前线程等待，直到轮到自己打印</span><br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;------&quot;</span> + message);<br>        currentOrder++;<br>        lock.notifyAll(); <span class="hljs-comment">// 唤醒其他等待的线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、ReentrantLock实现"><a href="#2、ReentrantLock实现" class="headerlink" title="2、ReentrantLock实现"></a>2、ReentrantLock实现</h2><p>ReentrantLock实现，同样会传入锁，但是lock和unlock是自己规定，所以当需要判断打印的时候，进行枷锁操作，同时每个线程进去之后判断是否是自己需要打印，如果不是，那么就唤醒下一个线程。</p><p>核心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-comment">// 某个线程持有锁，只有一个线程进入后续部分</span><br>    lock.lock();<br>    <span class="hljs-comment">// 条件判断，如果不满足，当前线程等待，</span><br>    <span class="hljs-keyword">while</span> (currentOrder % <span class="hljs-number">3</span> != order) &#123;<br>        current.await();<br>    &#125;<br>    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;------&quot;</span> + message);<br>    currentOrder++;<br>    <span class="hljs-comment">// 使用signal()唤醒下一个线程</span><br>    next.signal();<br>    <span class="hljs-comment">// 锁释放</span><br>    lock.unlock();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：Condition对象是与锁（<strong>ReentrantLock</strong>）关联的条件对象，用于线程间的等待和通知机制。因此锁的类型不并不是Object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>lock.newContional();    <span class="hljs-comment">//ConditionalA</span><br>lock.newContional();    <span class="hljs-comment">//ConditionalB</span><br>lock.newContional();    <span class="hljs-comment">//ConditionalC</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="3、信号量实现"><a href="#3、信号量实现" class="headerlink" title="3、信号量实现"></a>3、信号量实现</h2><p>在使用信号量实现的时候，需要指定谁最先拥有许可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphoreA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">1</span>);   <span class="hljs-comment">//信号量A最先拥有许可，所以从他开始</span><br><span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphoreB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">0</span>);<br><span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphoreC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>核心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 核心：通过获取当前线程的信号量来确定是否轮到自己执行。</span><br><span class="hljs-comment">     * 在执行完打印操作后，释放下一个线程的信号量，从而实现线程的交叉打印。</span><br><span class="hljs-comment">     */</span><br>    current.acquire();      <span class="hljs-comment">// 获取当前线程的信号量</span><br>    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;------&quot;</span> + message);<br>    currentOrder++;<br>    next.release();         <span class="hljs-comment">//释放下一个线程的信号量</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
