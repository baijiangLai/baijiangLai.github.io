<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>尚医通-用户后端管理</title>
    <link href="/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E7%94%A8%E6%88%B7%E5%90%8E%E7%AB%AF%E7%AE%A1%E7%90%86/a564a7e6212c/"/>
    <url>/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E7%94%A8%E6%88%B7%E5%90%8E%E7%AB%AF%E7%AE%A1%E7%90%86/a564a7e6212c/</url>
    
    <content type="html"><![CDATA[<h1 id="1-医院详情"><a href="#1-医院详情" class="headerlink" title="1. 医院详情"></a>1. 医院详情</h1><h2 id="1-1-展示所有科室"><a href="#1-1-展示所有科室" class="headerlink" title="1.1. 展示所有科室"></a>1.1. 展示所有科室</h2><blockquote><p>步骤：</p><ol><li>根据参数传入的hoscode，查找出所有的医院科室列表（findDeptTree）</li></ol></blockquote><h2 id="1-2-展示医院挂号详情"><a href="#1-2-展示医院挂号详情" class="headerlink" title="1.2. 展示医院挂号详情"></a>1.2. 展示医院挂号详情</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;根据医院编号获取医院预约挂号详情&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;findHospDetail/&#123;hoscode&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">item</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String hoscode)</span> &#123;<br>    Map&lt;String, Object&gt; map = hospitalService.item(hoscode);<br>    <span class="hljs-keyword">return</span> Result.ok(map);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li>根据Hoscode得到医院对象</li><li>遍历查找的list集合，对医院等级、省市区进行封装（远程调用）</li><li>放入map中，key-value</li></ol></blockquote><h1 id="2-用户登录"><a href="#2-用户登录" class="headerlink" title="2. 用户登录"></a>2. 用户登录</h1><blockquote><p>背景：用户需要登录了之后才能进行挂号、医院科室的选择等</p></blockquote><p>模块：service-user</p><h2 id="2-1-数据库表-实体类"><a href="#2-1-数据库表-实体类" class="headerlink" title="2.1. 数据库表-实体类"></a>2.1. 数据库表-实体类</h2><p>表字段：</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231029080648045.png" alt="image-20231029080648045"></p><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;UserInfo&quot;)</span><br><span class="hljs-meta">@TableName(&quot;user_info&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;微信openid&quot;)</span><br><span class="hljs-meta">@TableField(&quot;openid&quot;)</span><br><span class="hljs-keyword">private</span> String openid;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;昵称&quot;)</span><br><span class="hljs-meta">@TableField(&quot;nick_name&quot;)</span><br><span class="hljs-keyword">private</span> String nickName;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;手机号&quot;)</span><br><span class="hljs-meta">@TableField(&quot;phone&quot;)</span><br><span class="hljs-keyword">private</span> String phone;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;用户姓名&quot;)</span><br><span class="hljs-meta">@TableField(&quot;name&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;证件类型&quot;)</span><br><span class="hljs-meta">@TableField(&quot;certificates_type&quot;)</span><br><span class="hljs-keyword">private</span> String certificatesType;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;证件编号&quot;)</span><br><span class="hljs-meta">@TableField(&quot;certificates_no&quot;)</span><br><span class="hljs-keyword">private</span> String certificatesNo;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;证件路径&quot;)</span><br><span class="hljs-meta">@TableField(&quot;certificates_url&quot;)</span><br><span class="hljs-keyword">private</span> String certificatesUrl;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;认证状态（0：未认证 1：认证中 2：认证成功 -1：认证失败）&quot;)</span><br><span class="hljs-meta">@TableField(&quot;auth_status&quot;)</span><br><span class="hljs-keyword">private</span> Integer authStatus;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;状态（0：锁定 1：正常）&quot;)</span><br><span class="hljs-meta">@TableField(&quot;status&quot;)</span><br><span class="hljs-keyword">private</span> Integer status;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-手机号登录"><a href="#2-2-手机号登录" class="headerlink" title="2.2. 手机号登录"></a>2.2. 手机号登录</h2><p>登录vo实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description=&quot;登录对象&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginVo</span> &#123;<br><br>  <span class="hljs-meta">@ApiModelProperty(value = &quot;openid&quot;)</span><br>  <span class="hljs-keyword">private</span> String openid;<br><br>  <span class="hljs-meta">@ApiModelProperty(value = &quot;手机号&quot;)</span><br>  <span class="hljs-keyword">private</span> String phone;<br><br>  <span class="hljs-meta">@ApiModelProperty(value = &quot;密码&quot;)</span><br>  <span class="hljs-keyword">private</span> String code;<br><br>  <span class="hljs-meta">@ApiModelProperty(value = &quot;IP&quot;)</span><br>  <span class="hljs-keyword">private</span> String ip;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginVo loginVo)</span> &#123;<br>    Map&lt;String,Object&gt; info = userInfoService.loginUser(loginVo);<br>    <span class="hljs-keyword">return</span> Result.ok(info);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li>从登录信息获得手机号、验证码</li><li>判空操作</li><li>判断验证码是否一致</li><li>判断是否是第一次登录： <ol><li>如果不存在相同手机号即第一次登录</li><li>创建用户到数据库表中（设置字段值）</li></ol></li><li>不是第一次登录，直接登录</li><li>返回登录信息、token信息（验证是否有登录过）</li></ol></blockquote><h3 id="2-2-1-手机验证码发送"><a href="#2-2-1-手机验证码发送" class="headerlink" title="2.2.1. 手机验证码发送"></a>2.2.1. 手机验证码发送</h3><p>需要整合阿里云短信服务</p><p>封装一个短信服务模块：service-sms服务</p><p>读取配置：</p><p>使用<code>@Value</code>读取，同时配置内容如果需要在项目加载的时候就读取，就加上<code>implements InitializingBean</code></p><p>同时使用redis对服务器发送的验证码设置有效期</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;send/&#123;phone&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sendCode</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String phone)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(phone);<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(code)) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br><br>    code = RandomUtil.getSixBitRandom();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isSend</span> <span class="hljs-operator">=</span> msmService.send(phone,code);<br>    <span class="hljs-keyword">if</span>(isSend) &#123;<br>        redisTemplate.opsForValue().set(phone,code,<span class="hljs-number">2</span>, TimeUnit.MINUTES);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> Result.fail().message(<span class="hljs-string">&quot;发送短信失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时redis的结构：key:phone value: code</p><blockquote><p>步骤：</p><ol><li>先判断redis中是否存在验证码<ol><li>不存在，生成验证码，结合短信服务进行发送</li><li>同时将生成的验证码放入至redis中，设置相应有效时间</li><li>存在，直接返回</li></ol></li><li>发送验证码：<ol><li>判断手机号码是否为空，为空直接返回</li><li>结合阿里云三方API发送验证码</li></ol></li></ol></blockquote><h2 id="2-3-微信扫码登录"><a href="#2-3-微信扫码登录" class="headerlink" title="2.3. 微信扫码登录"></a>2.3. 微信扫码登录</h2><p>前置知识点：OAuth2</p><p>需求：点击第三方登录（微信登录）按钮，弹出微信扫描二维码，再绑定手机登录</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231029110213710.png" alt="image-20231029110213710"></p><blockquote><p>步骤：</p><ol><li>生成后微信扫描二维码</li><li>编写回调方法，获取扫描人的信息</li></ol></blockquote><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/ucenter/wx&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeixinApiController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时controller只需要不写为<code>restController</code>，原因：不需要返回数据，需要跳转到指定的页面（跳转更方便）</p><h3 id="2-3-1-微信二维码生成"><a href="#2-3-1-微信二维码生成" class="headerlink" title="2.3.1. 微信二维码生成"></a>2.3.1. 微信二维码生成</h3><p>官方链接：<a href="https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html">https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html</a></p><p>接口定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getLoginParam&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">genQrConnect</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;appid&quot;</span>, ConstantWxPropertiesUtils.WX_OPEN_APP_ID);<br>        map.put(<span class="hljs-string">&quot;scope&quot;</span>,<span class="hljs-string">&quot;snsapi_login&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">wxOpenRedirectUrl</span> <span class="hljs-operator">=</span> ConstantWxPropertiesUtils.WX_OPEN_REDIRECT_URL;<br>        wxOpenRedirectUrl = URLEncoder.encode(wxOpenRedirectUrl, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;redirect_uri&quot;</span>,wxOpenRedirectUrl);<br>        map.put(<span class="hljs-string">&quot;state&quot;</span>,System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span> Result.ok(map);<br>    &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-2-获取扫描人信息"><a href="#2-3-2-获取扫描人信息" class="headerlink" title="2.3.2. 获取扫描人信息"></a>2.3.2. 获取扫描人信息</h3><p>官方地址：<a href="https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Authorized_Interface_Calling_UnionID.html">https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Authorized_Interface_Calling_UnionID.html</a></p><p>此时开发在本地，所以使用的时候老师讲在微信开放平台配置的回调地址重定向到了localhost:8160了，扫描完成后微信会返回两个东西code（临时票据），state</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231029120742167.png" alt="image-20231029120742167"></p><p>根据得到的code发起两次hhtp请求，就可以获取到对应的信息</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231029121506694.png" alt="image-20231029121506694"></p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;callback&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">callback</span><span class="hljs-params">(String code,String state)</span> &#123;<br>    <span class="hljs-comment">//第一步 获取临时票据 code</span><br>    System.out.println(<span class="hljs-string">&quot;code:&quot;</span>+code);<br>    <span class="hljs-comment">//第二步 拿着code和微信id和秘钥，请求微信固定地址 ，得到两个值</span><br>    <span class="hljs-comment">//使用code和appid以及appscrect换取access_token</span><br>    <span class="hljs-comment">//  %s   占位符</span><br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">baseAccessTokenUrl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>()<br>            .append(<span class="hljs-string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token&quot;</span>)<br>            .append(<span class="hljs-string">&quot;?appid=%s&quot;</span>)<br>            .append(<span class="hljs-string">&quot;&amp;secret=%s&quot;</span>)<br>            .append(<span class="hljs-string">&quot;&amp;code=%s&quot;</span>)<br>            .append(<span class="hljs-string">&quot;&amp;grant_type=authorization_code&quot;</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">accessTokenUrl</span> <span class="hljs-operator">=</span> String.format(baseAccessTokenUrl.toString(),<br>            ConstantWxPropertiesUtils.WX_OPEN_APP_ID,<br>            ConstantWxPropertiesUtils.WX_OPEN_APP_SECRET,<br>            code);<br><br>    <span class="hljs-comment">//使用httpclient请求这个地址</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">accesstokenInfo</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//从返回字符串获取两个值 openid  和  access_token</span><br>        accesstokenInfo = HttpClientUtils.get(accessTokenUrl);<br>        <span class="hljs-comment">//  accesstokenInfo:&#123;&quot;access_token&quot;:&quot;73_Hp9BSXxLZgAuGhLggmLaRmx6HogyRY2UagIQ6KLvbiymskV1GRg8K4IETm56iYYfiZm0dR7GqOC-rrqNzXSLKRYdoTCB7JxXj1_OQntL2uU&quot;,&quot;expires_in&quot;:7200,&quot;refresh_token&quot;:&quot;73_5rlfwuUVvWOIMGoR5gWzfZCCTsJMgSrKRTPedE4kkUzfPRYKCP4q1ClZbebrBR7NmDxYN09SPPLLSyI5xCt2C1AF4grqT1ZyKUOPzINC_WQ&quot;,&quot;openid&quot;:&quot;o3_SC5yx1eC7IbwuB9WiH5yfUzTk&quot;,&quot;scope&quot;:&quot;snsapi_login&quot;,&quot;unionid&quot;:&quot;oWgGz1MOUHhgtTn8oeGhz_B5QWNg&quot;&#125;</span><br>        System.out.println(<span class="hljs-string">&quot;accesstokenInfo:&quot;</span>+accesstokenInfo);<br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSONObject.parseObject(accesstokenInfo);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">access_token</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;access_token&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">openid</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;openid&quot;</span>);<br><br>        <span class="hljs-comment">//判断数据库是否存在微信的扫描人信息</span><br>        <span class="hljs-comment">//根据openid判断</span><br>        <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> userInfoService.selectWxInfoOpenId(openid);<br>        <span class="hljs-keyword">if</span> (userInfo == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//第三步 拿着openid  和  access_token请求微信地址，得到扫描人信息</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">baseUserInfoUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/userinfo&quot;</span> +<br>                    <span class="hljs-string">&quot;?access_token=%s&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;openid=%s&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">userInfoUrl</span> <span class="hljs-operator">=</span> String.format(baseUserInfoUrl, access_token, openid);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">resultInfo</span> <span class="hljs-operator">=</span> HttpClientUtils.get(userInfoUrl);<br>            <span class="hljs-comment">//resultInfo:&#123;&quot;openid&quot;:&quot;o3_SC5yx1eC7IbwuB9WiH5yfUzTk&quot;,&quot;nickname&quot;:&quot;卿云&quot;,&quot;sex&quot;:0,&quot;language&quot;:&quot;&quot;,&quot;city&quot;:&quot;&quot;,&quot;province&quot;:&quot;&quot;,&quot;country&quot;:&quot;&quot;,&quot;headimgurl&quot;:&quot;https:\/\/thirdwx.qlogo.cn\/mmopen\/vi_32\/4vNosr1iajSglCXXEIVKBlib2NkibniaODO71ibicNQIF7zm5iaicgyIu7jCuIKNFmWicUMvZffvoxokHHjkOia5oK1S9AeA\/132&quot;,&quot;privilege&quot;:[],&quot;unionid&quot;:&quot;oWgGz1MOUHhgtTn8oeGhz_B5QWNg&quot;&#125;</span><br>            System.out.println(<span class="hljs-string">&quot;resultInfo:&quot;</span> + resultInfo);<br><br>            <span class="hljs-comment">//解析用户信息</span><br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">resultUserInfoJson</span> <span class="hljs-operator">=</span> JSONObject.parseObject(resultInfo);<br>            <span class="hljs-comment">//用户昵称</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">nickname</span> <span class="hljs-operator">=</span> resultUserInfoJson.getString(<span class="hljs-string">&quot;nickname&quot;</span>);<br>            <span class="hljs-comment">//用户头像</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">headimgurl</span> <span class="hljs-operator">=</span> resultUserInfoJson.getString(<span class="hljs-string">&quot;headimgurl&quot;</span>);<br><br><br>            <span class="hljs-comment">//获取扫描人信息添加数据库</span><br>            userInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfo</span>();<br>            userInfo.setNickName(nickname);<br>            userInfo.setOpenid(openid);<br>            userInfo.setStatus(<span class="hljs-number">1</span>);<br>            userInfoService.save(userInfo);<br>        &#125;<br><br><br>        <span class="hljs-comment">//返回name和token字符串</span><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> userInfo.getName();<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(name)) &#123;<br>            name = userInfo.getNickName();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(name)) &#123;<br>            name = userInfo.getPhone();<br>        &#125;<br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, name);<br><br>        <span class="hljs-comment">//判断userInfo是否有手机号，如果手机号为空，返回openid</span><br>        <span class="hljs-comment">//如果手机号不为空，返回openid值是空字符串</span><br>        <span class="hljs-comment">//前端判断：如果openid不为空，绑定手机号，如果openid为空，不需要绑定手机号</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(userInfo.getPhone())) &#123;<br>            map.put(<span class="hljs-string">&quot;openid&quot;</span>, userInfo.getOpenid());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            map.put(<span class="hljs-string">&quot;openid&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//使用jwt生成token字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtHelper.createToken(userInfo.getId(), name);<br>        map.put(<span class="hljs-string">&quot;token&quot;</span>, token);<br><br>        <span class="hljs-comment">//跳转到前端页面</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + ConstantWxPropertiesUtils.YYGH_BASE_URL + <span class="hljs-string">&quot;/weixin/callback?token=&quot;</span>+map.get(<span class="hljs-string">&quot;token&quot;</span>)+ <span class="hljs-string">&quot;&amp;openid=&quot;</span>+map.get(<span class="hljs-string">&quot;openid&quot;</span>)+<span class="hljs-string">&quot;&amp;name=&quot;</span>+URLEncoder.encode(map.get(<span class="hljs-string">&quot;name&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时在登录接口中需要增加判断：</p><p>如果loginVo有openId，表示需要绑定手机号。</p><p>即：第一次扫码登录的时候，在表中有openId，但是没有phone，所以，需要再设置其手机号进行绑定。</p><p>同时如何区分微信登录和手机登录：如果根据openId查找出来的用户是空的，那么就是手机登录。</p><h2 id="2-4-用户认证结合网关"><a href="#2-4-用户认证结合网关" class="headerlink" title="2.4. 用户认证结合网关"></a>2.4. 用户认证结合网关</h2><p>背景：</p><p>所有请求都会经过服务网关，服务网关对外暴露服务，那么就需要在网管进行统一的用户认证。</p><blockquote><p>步骤：</p><ol><li>所有的请求会先进入网关</li><li>实现globalFilter接口，根据获取的request的url判断<ol><li>如果是内部接口，不允许外部访问</li><li>如果是api对外接口，那么需要校验用户是否登录</li></ol></li></ol></blockquote><h1 id="3-实名认证"><a href="#3-实名认证" class="headerlink" title="3. 实名认证"></a>3. 实名认证</h1><p>模块：service-oss</p><p>需要将用户认证相关照片上传至阿里云对象存储中</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;fileUpload&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">fileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;idCard&quot;)</span> MultipartFile file)</span> &#123;<br>    <span class="hljs-comment">//获取上传文件</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> fileService.upload(file);<br>    <span class="hljs-keyword">return</span> Result.ok(url);<br>&#125;<br></code></pre></td></tr></table></figure><p>步骤：</p><blockquote><ol><li>读取配置文件关于阿里云的内容</li><li>利用阿里云的API利用文件流上传文件</li><li>同时为了防止文件名重复，将文件名使用：日期&#x2F;uuid+文件名</li></ol></blockquote><h1 id="4-用户认证"><a href="#4-用户认证" class="headerlink" title="4. 用户认证"></a>4. 用户认证</h1><blockquote><p>需要从登录的信息中拿到用户的信息，这部分可以使用HttpServletRequest或者ThreadLocal做</p></blockquote><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description=&quot;会员认证对象&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAuthVo</span> &#123;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;用户姓名&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;证件类型&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;certificates_type&quot;)</span><br>    <span class="hljs-keyword">private</span> String certificatesType;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;证件编号&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;certificates_no&quot;)</span><br>    <span class="hljs-keyword">private</span> String certificatesNo;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;证件路径&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;certificates_url&quot;)</span><br>    <span class="hljs-keyword">private</span> String certificatesUrl;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;auth/userAuth&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">userAuth</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserAuthVo userAuthVo, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-comment">//传递两个参数，第一个参数用户id，第二个参数认证数据vo对象</span><br>    userInfoService.userAuth(AuthContextHolder.getUserId(request),userAuthVo);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-就诊人管理"><a href="#5-就诊人管理" class="headerlink" title="5. 就诊人管理"></a>5. 就诊人管理</h1><p>表结构：<br><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231029165940577.png" alt="image-20231029165940577"></p><p>即：对表进行增删改查功能</p><p>所有接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/user/patient&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PatientApiController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PatientService patientService;<br><br>    <span class="hljs-comment">//获取就诊人列表</span><br>    <span class="hljs-meta">@GetMapping(&quot;auth/findAll&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findAll</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//获取当前登录用户id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> AuthContextHolder.getUserId(request);<br>        List&lt;Patient&gt; list = patientService.findAllUserId(userId);<br>        <span class="hljs-keyword">return</span> Result.ok(list);<br>    &#125;<br><br>    <span class="hljs-comment">//添加就诊人</span><br>    <span class="hljs-meta">@PostMapping(&quot;auth/save&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">savePatient</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Patient patient, HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//获取当前登录用户id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> AuthContextHolder.getUserId(request);<br>        patient.setUserId(userId);<br>        patientService.save(patient);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br><br>    <span class="hljs-comment">//根据id获取就诊人信息</span><br>    <span class="hljs-meta">@GetMapping(&quot;auth/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getPatient</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-type">Patient</span> <span class="hljs-variable">patient</span> <span class="hljs-operator">=</span> patientService.getPatientId(id);<br>        <span class="hljs-keyword">return</span> Result.ok(patient);<br>    &#125;<br><br>    <span class="hljs-comment">//修改就诊人</span><br>    <span class="hljs-meta">@PostMapping(&quot;auth/update&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">updatePatient</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Patient patient)</span> &#123;<br>        patientService.updateById(patient);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br><br>    <span class="hljs-comment">//删除就诊人</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;auth/remove/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">removePatient</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        patientService.removeById(id);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br><br>    <span class="hljs-comment">//根据就诊人id获取就诊人信息</span><br>    <span class="hljs-meta">@GetMapping(&quot;inner/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Patient <span class="hljs-title function_">getPatientOrder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-type">Patient</span> <span class="hljs-variable">patient</span> <span class="hljs-operator">=</span> patientService.getPatientId(id);<br>        <span class="hljs-keyword">return</span> patient;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-预约挂号详情"><a href="#6-预约挂号详情" class="headerlink" title="6. 预约挂号详情"></a>6. 预约挂号详情</h1><blockquote><p>背景</p><p>（1）根据预约周期，展示可预约日期数据，按分页展示</p><p>（2）选择日期展示当天可预约列表（该接口后台已经实现过）</p></blockquote><p>模块：service-hospital</p><h2 id="6-1-获取可预约的排班数据"><a href="#6-1-获取可预约的排班数据" class="headerlink" title="6.1. 获取可预约的排班数据"></a>6.1. 获取可预约的排班数据</h2><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;获取可预约排班数据&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;auth/getBookingScheduleRule/&#123;page&#125;/&#123;limit&#125;/&#123;hoscode&#125;/&#123;depcode&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getBookingSchedule</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span> Integer page,</span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span> Integer limit,</span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span> String hoscode,</span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span> String depcode)</span> &#123;<br>    <span class="hljs-keyword">return</span> Result.ok(scheduleService.getBookingScheduleRule(page, limit, hoscode, depcode));<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li><p>根据医院编号获取预约规则</p></li><li><p>获取可预约日期的数据（分页），得到可预约的所有数据</p><ol><li><p>获取当天的放号时间（年月日）转换为（年月日，小时分钟）</p></li><li><p>获取预约周期，即：最长有多少天的</p></li><li><p>如果当天的放号的时间已经过了，那么需要展示后一天信息。即：周期+1</p></li><li><p>获取所有可预约的日期，在最后一天显示即将放好</p></li><li><p>如果获取的所有预约数量小于7天，直接显示；如果大于7个，那么要分页进行显示</p></li><li><p>每一页的开始数：(current-1) * limit</p></li><li><p>每一页的结束数：(current-1) * limit + limit</p></li><li><p>如何判断当天获得的数量有没有大于7个，只需要判断每一页的结束数是否大于整个获取的预约数量，如果大于了，那么就说明直接显示这些。否则需要将每页的第一个到每页最后以后添加到List中去，然后再进行分页显示</p></li></ol></li><li><p>获取可预约日期里面科室的剩余预约数</p></li><li><p>使用Map，key:日期，value:预约规则和剩余数量等</p></li><li><p>获取可预约排班规则</p><ol><li>从map集合根据key日期获取value值</li><li>如果当天没有排班医生，设置就诊医生人数，科室剩余预约数  -1表示无号</li><li>如果有的话，那么就设置日期，同时计算当前预约日期对应星期</li><li>最后一页最后一条记录为即将预约，设置其状态为1，如何判断是最后一页的最后一条记录？i &#x3D;&#x3D; len-1 &amp;&amp; page &#x3D;&#x3D; iPage.getPages()。否则的话，其他的状态设置为0（正常）</li><li>同时，如果当天预约如果过了停号时间， 不能预约</li></ol></li></ol></blockquote><h1 id="7-用户预约"><a href="#7-用户预约" class="headerlink" title="7. 用户预约"></a>7. 用户预约</h1><p>模块：service-order</p><p>订单表：</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231029193913632.png" alt="image-20231029193913632"></p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;auth/submitOrder/&#123;scheduleId&#125;/&#123;patientId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">savaOrders</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String scheduleId,</span><br><span class="hljs-params">                         <span class="hljs-meta">@PathVariable</span> Long patientId)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> orderService.saveOrder(scheduleId,patientId);<br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li><p>用户点击下单之后，传入就诊人id和排班id</p></li><li><p>获取就诊人信息</p><ol><li>由于就诊人是在service-user模块中，因此使用远程调用，根据就诊人查出就诊人信息。</li></ol></li><li><p>获取排班相关信息</p><ol><li>同时要根据id得到排班信息和规则，同样需要远程调用，因为医院信息都在service-hosp模块中<ol><li>查出排班信息</li><li>获取预约规则信息</li><li>把获取数据设置到scheduleOrderVo</li><li>退号截止天数（如：就诊前一天为-1，当天为0）</li><li>预约开始时间</li><li>预约截止时间</li><li>当天停止挂号时间</li></ol></li></ol></li><li><p>获取医院签名信息，</p><ol><li>Service-hosp模块，根据医院编号获取医院签名信息</li><li>此时在下单模块中，使用远程调用可以使用该方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;获取医院签名信息&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;inner/getSignInfoVo/&#123;hoscode&#125;&quot;)</span><br><span class="hljs-keyword">public</span> SignInfoVo <span class="hljs-title function_">getSignInfoVo</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@ApiParam(name = &quot;hoscode&quot;, value = &quot;医院code&quot;, required = true)</span></span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable(&quot;hoscode&quot;)</span> String hoscode)</span> &#123;<br>    <span class="hljs-keyword">return</span> hospitalSetService.getSignInfoVo(hoscode);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将所有的信息复制到订到表中，同时设置其他字段值（重要的是订单的状态：未支付）</p></li><li><p>调用医院接口，实现预约挂号操作</p></li><li><p>请求成功之后，根据返回回来的结果更新数据库表。</p></li><li><p>TODO: 成功之后，排班的可预约数量和排班剩余数量需要更新（使用MQ）以及发送短信通知</p></li></ol></blockquote><h2 id="7-1-整合MQ"><a href="#7-1-整合MQ" class="headerlink" title="7.1. 整合MQ"></a>7.1. 整合MQ</h2><p>预约成功之后，需要提高下单的并发性，使用mq发送消息更新数据</p><blockquote><p>为什么需要使用mq？</p><p>以商品订单场景为例，</p><p>如果商品服务和订单服务是两个不同的微服务，在下单的过程中订单服务需要调用商品服务进行扣库存操作。按照传统的方式，下单过程要等到调用完毕之后才能返回下单成功，如果网络产生波动等原因使得商品服务扣库存延迟或者失败，会带来较差的用户体验，如果在高并发的场景下，这样的处理显然是不合适的，那怎么进行优化呢？这就需要消息队列登场了。</p><p>消息队列提供一个异步通信机制，消息的发送者不必一直等待到消息被成功处理才返回，而是立即返回。消息中间件负责处理网络通信，如果网络连接不可用，消息被暂存于队列当中，当网络畅通的时候在将消息转发给相应的应用程序或者服务，当然前提是这些服务订阅了该队列。如果在商品服务和订单服务之间使用消息中间件，既可以提高并发量，又降低服务之间的耦合度。</p><p>RabbitMQ就是这样一款消息队列。RabbitMQ是一个开源的消息代理的队列服务器，用来通过普通协议在完全不同的应用之间共享数据。</p></blockquote><p>需要单独封装一个rabbit-utl模块</p><p>短信模块中引入封装的rabbit-util模块</p><p>使用mq发送通知短信</p><blockquote><p>步骤：</p><ol><li>手机号不为空的时候，得到验证码，再发送</li><li>封装一个mq监听器<ol><li>判断手机号是否为空</li><li>整合阿里云短信服务，设置相关参数</li><li>调用方法进行短信发送</li></ol></li></ol></blockquote><p>医院模块用引入rabbit-util模块</p><p>使用mq更新排班数量</p><blockquote><p>步骤：</p><ol><li>创建更新排班数据接口</li><li>封装一个mq监听器<ol><li>根据监听的orderMqVo对象，判断剩余预约数，如果不为空下单成功更新预约数，否则取消预约更新预约数</li><li>再使用短信服务中的发送短信接口，发送短信</li></ol></li></ol></blockquote><h2 id="7-2-调整下单接口-TODO-成功之后，排班的可预约数量和排班剩余数量需要更新（使用MQ）以及发送短信通知"><a href="#7-2-调整下单接口-TODO-成功之后，排班的可预约数量和排班剩余数量需要更新（使用MQ）以及发送短信通知" class="headerlink" title="7.2. 调整下单接口(TODO: 成功之后，排班的可预约数量和排班剩余数量需要更新（使用MQ）以及发送短信通知)"></a>7.2. 调整下单接口(TODO: 成功之后，排班的可预约数量和排班剩余数量需要更新（使用MQ）以及发送短信通知)</h2><p>模块：service-order，引入rabbit-util</p><p>在最后，需要发送mq消息，号源更新和短信通知</p><blockquote><p>步骤：</p><ol><li>封装一个OrderMqVo对象，设置各字段值</li><li>封装一个MsmVo对象，设置各字段值</li><li>设置orderMqVo的MsmVo值，最后直接使用rabittMQ发送消息</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//发送mq消息，号源更新和短信通知</span><br><span class="hljs-comment">//发送mq信息更新号源</span><br><span class="hljs-type">OrderMqVo</span> <span class="hljs-variable">orderMqVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderMqVo</span>();<br>orderMqVo.setScheduleId(scheduleId);<br>orderMqVo.setReservedNumber(reservedNumber);<br>orderMqVo.setAvailableNumber(availableNumber);<br><br><span class="hljs-comment">//短信提示</span><br><span class="hljs-type">MsmVo</span> <span class="hljs-variable">msmVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MsmVo</span>();<br>msmVo.setPhone(orderInfo.getPatientPhone());<br><span class="hljs-type">String</span> <span class="hljs-variable">reserveDate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(orderInfo.getReserveDate()).toString(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>) + (orderInfo.getReserveTime()==<span class="hljs-number">0</span> ? <span class="hljs-string">&quot;上午&quot;</span> : <span class="hljs-string">&quot;下午&quot;</span>);<br>Map&lt;String,Object&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Object&gt;()&#123;&#123;<br>    put(<span class="hljs-string">&quot;title&quot;</span>, orderInfo.getHosname()+<span class="hljs-string">&quot;|&quot;</span>+orderInfo.getDepname()+<span class="hljs-string">&quot;|&quot;</span>+orderInfo.getTitle());<br>    put(<span class="hljs-string">&quot;amount&quot;</span>, orderInfo.getAmount());<br>    put(<span class="hljs-string">&quot;reserveDate&quot;</span>, reserveDate);<br>    put(<span class="hljs-string">&quot;name&quot;</span>, orderInfo.getPatientName());<br>    put(<span class="hljs-string">&quot;quitTime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(orderInfo.getQuitTime()).toString(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm&quot;</span>));<br>&#125;&#125;;<br>msmVo.setParam(param);<br><br>orderMqVo.setMsmVo(msmVo);<br><br><span class="hljs-comment">//发送</span><br>rabbitService.sendMessage(MqConst.EXCHANGE_DIRECT_ORDER, MqConst.ROUTING_ORDER, orderMqVo);<br></code></pre></td></tr></table></figure><h1 id="8-订单详情"><a href="#8-订单详情" class="headerlink" title="8. 订单详情"></a>8. 订单详情</h1><p>即：根据订单id查询订单详情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;auth/getOrders/&#123;orderId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getOrders</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String orderId)</span> &#123;<br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderService.getOrder(orderId);<br>    <span class="hljs-keyword">return</span> Result.ok(orderInfo);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="9-订单列表"><a href="#9-订单列表" class="headerlink" title="9. 订单列表"></a>9. 订单列表</h1><p>需求：点击挂号订单可以查看所有的订单</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;auth/&#123;page&#125;/&#123;limit&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long page,</span><br><span class="hljs-params">                   <span class="hljs-meta">@PathVariable</span> Long limit,</span><br><span class="hljs-params">                   OrderQueryVo orderQueryVo, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-comment">//设置当前用户id</span><br>    orderQueryVo.setUserId(AuthContextHolder.getUserId(request));<br>    Page&lt;OrderInfo&gt; pageParam = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page,limit);<br>    IPage&lt;OrderInfo&gt; pageModel =<br>            orderService.selectPage(pageParam,orderQueryVo);<br>    <span class="hljs-keyword">return</span> Result.ok(pageModel);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="10-订单支付"><a href="#10-订单支付" class="headerlink" title="10. 订单支付"></a>10. 订单支付</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231029213415816.png" alt="image-20231029213415816"></p><h2 id="10-1-生成微信支付二维码"><a href="#10-1-生成微信支付二维码" class="headerlink" title="10.1. 生成微信支付二维码"></a>10.1. 生成微信支付二维码</h2><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;createNative/&#123;orderId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">createNative</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long orderId)</span> &#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> weixinService.createNative(orderId);<br>    <span class="hljs-keyword">return</span> Result.ok(map);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li>根据orderId获取订单信息</li><li>向支付记录表添加信息<ol><li>根据订单id和支付类型，查询支付记录表是否存在相同订单</li><li>添加记录</li></ol></li><li>设置参数，调用微信接口</li><li>调用微信生成二维码接口,httpclient调用</li><li>发送post请求，得到返回相关数据</li></ol></blockquote><h2 id="10-2-查询支付状态"><a href="#10-2-查询支付状态" class="headerlink" title="10.2. 查询支付状态"></a>10.2. 查询支付状态</h2><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;queryPayStatus/&#123;orderId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryPayStatus</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long orderId)</span> &#123;<br>    <span class="hljs-comment">//调用微信接口实现支付状态查询</span><br>    Map&lt;String,String&gt; resultMap = weixinService.queryPayStatus(orderId);<br>    <span class="hljs-comment">//判断</span><br>    <span class="hljs-keyword">if</span>(resultMap == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail().message(<span class="hljs-string">&quot;支付出错&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;SUCCESS&quot;</span>.equals(resultMap.get(<span class="hljs-string">&quot;trade_state&quot;</span>))) &#123; <span class="hljs-comment">//支付成功</span><br>        <span class="hljs-comment">//更新订单状态</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">out_trade_no</span> <span class="hljs-operator">=</span> resultMap.get(<span class="hljs-string">&quot;out_trade_no&quot;</span>);<span class="hljs-comment">//订单编码</span><br>        paymentService.paySuccess(out_trade_no,resultMap);<br>        <span class="hljs-keyword">return</span> Result.ok().message(<span class="hljs-string">&quot;支付成功&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok().message(<span class="hljs-string">&quot;支付中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>查询订单状态</p><blockquote><p>步骤：</p><ol><li>根据orderId获取订单信息</li><li>封装提交参数</li><li>设置请求内容</li><li>得到微信接口返回数据</li><li>把接口数据返回</li></ol></blockquote><p>更新订单状态</p><p>数据库表：</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231029214815341.png" alt="image-20231029214815341"></p><blockquote><p>步骤：</p><ol><li>根据订单编号得到支付记录</li><li>更新支付记录信息</li><li>根据订单号得到订单信息</li><li>调用医院接口，更新订单支付信息</li></ol></blockquote><h2 id="10-3-取消支付"><a href="#10-3-取消支付" class="headerlink" title="10.3. 取消支付"></a>10.3. 取消支付</h2><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231029215329137.png" alt="image-20231029215329137"></p><p>流程：</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231029220357448.png" alt="image-20231029220357448"></p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;取消预约&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;auth/cancelOrder/&#123;orderId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">cancelOrder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long orderId)</span> &#123;<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">isOrder</span> <span class="hljs-operator">=</span> orderService.cancelOrder(orderId);<br>    <span class="hljs-keyword">return</span> Result.ok(isOrder);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li><p>获取订单信息</p></li><li><p>判断订单退号的时间有没有在当前时间之前</p></li><li><p>调用医院接口实现预约取消</p></li><li><p>根据医院接口返回数据</p><ol><li><p>返回状态码为200，判断当前订单是否可以取消，只有当支付了才需要进行退款</p></li><li><p>调用微信接口进行退款，传参订单编号</p><ol><li>获取支付记录信息</li><li>添加信息到退款记录表</li><li>判断当前订单数据是否已经退款</li><li>调用微信接口实现退款，设置调用接口内容、设置证书信息</li><li>接收返回数据，更新退款表信息</li></ol></li><li><p>更新订单状态</p></li><li><p>取消预约之后，剩余数量要加1，使用MQ</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//发送mq更新预约数量</span><br><span class="hljs-type">OrderMqVo</span> <span class="hljs-variable">orderMqVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderMqVo</span>();<br>orderMqVo.setScheduleId(orderInfo.getScheduleId());<br><span class="hljs-comment">//短信提示</span><br><span class="hljs-type">MsmVo</span> <span class="hljs-variable">msmVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MsmVo</span>();<br>msmVo.setPhone(orderInfo.getPatientPhone());<br><span class="hljs-type">String</span> <span class="hljs-variable">reserveDate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(orderInfo.getReserveDate()).toString(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>) + (orderInfo.getReserveTime()==<span class="hljs-number">0</span> ? <span class="hljs-string">&quot;上午&quot;</span>: <span class="hljs-string">&quot;下午&quot;</span>);<br>Map&lt;String,Object&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Object&gt;()&#123;&#123;<br>    put(<span class="hljs-string">&quot;title&quot;</span>, orderInfo.getHosname()+<span class="hljs-string">&quot;|&quot;</span>+orderInfo.getDepname()+<span class="hljs-string">&quot;|&quot;</span>+orderInfo.getTitle());<br>    put(<span class="hljs-string">&quot;reserveDate&quot;</span>, reserveDate);<br>    put(<span class="hljs-string">&quot;name&quot;</span>, orderInfo.getPatientName());<br>&#125;&#125;;<br>msmVo.setParam(param);<br>orderMqVo.setMsmVo(msmVo);<br>rabbitService.sendMessage(MqConst.EXCHANGE_DIRECT_ORDER, MqConst.ROUTING_ORDER, orderMqVo);<br></code></pre></td></tr></table></figure></li></ol></li></ol></blockquote><h1 id="11-就医提醒"><a href="#11-就医提醒" class="headerlink" title="11. 就医提醒"></a>11. 就医提醒</h1><p>使用定时任务完成，启动定时任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@EnableScheduling</span> <span class="hljs-comment">// 开启定时任务操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledTask</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitService rabbitService;<br><br>    <span class="hljs-comment">//每天8点执行方法，就医提醒</span><br>    <span class="hljs-comment">//cron表达式，设置执行间隔</span><br>    <span class="hljs-comment">//0 0 8 * * ?</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/30 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">taskPatient</span><span class="hljs-params">()</span> &#123;<br>        rabbitService.sendMessage(MqConst.EXCHANGE_DIRECT_TASK,MqConst.ROUTING_TASK_8,<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用MQ发送了消息之后，在订单模块中，设置一个mq监听器，进行就诊人就诊提醒</p><blockquote><p>步骤：</p><ol><li>根据安排日期和订单状态进行提醒，查找出所有的订单列表</li><li>分别进行遍历，使用mq发送信息，在短信模块的监听器见听到了这个信息之后，就调用发送短信接口的方法发送短信，完成就诊提醒</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>尚医通</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程技巧-回调函数</title>
    <link href="/Java%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/12bcfab4b0fb/"/>
    <url>/Java%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/12bcfab4b0fb/</url>
    
    <content type="html"><![CDATA[<blockquote><p>背景：<br>开发公司项目的时候，需要用到Jenkins触发编译，打包APK，随后拿到产物地址再进行下一步，但是APK编译时间不确定，但是检测又必须拿到这个产物地址才能进行。</p></blockquote><h1 id="1-回调"><a href="#1-回调" class="headerlink" title="1. 回调"></a>1. 回调</h1><h2 id="1-1-同步回调"><a href="#1-1-同步回调" class="headerlink" title="1.1. 同步回调"></a>1.1. 同步回调</h2><blockquote><p>比如：你去书店买书，进门问老板有书吗？老板说有，同时给你拿出了书，随后，你付钱离开。这一过程，整个流程：</p><ol><li>询问</li><li>等老板给你拿书</li><li>拿到书付钱离开</li></ol></blockquote><p><code>fun(a)</code>调用<code>fun(b)</code>，<code>fun(a)</code><strong>等待</strong><code>fun(b)</code>执行完后再进行下一步。</p><p>同步调用会引起代码的阻塞。</p><h2 id="1-2-异步回调"><a href="#1-2-异步回调" class="headerlink" title="1.2. 异步回调"></a>1.2. 异步回调</h2><blockquote><p>比如：你还是去买书，询问老板有书吗？老板说我去找一下，你回复说那你先找吧，我先去喝一杯奶茶去，我过一会人再来。过了一个小时，老板已经将书放在柜台，你付钱离开。整个过程：</p><ol><li>询问</li><li>老板去招书</li><li>你去喝奶茶</li><li>得到书，付钱离开</li></ol></blockquote><p><code>fun(a)</code>调用<code>fun(b)</code>, <code>fun(a)</code><strong>不等待</strong><code>fun(b)</code>执行完便进行下一步。<br>常见的有Thread、Task等。</p><h2 id="1-3-回调"><a href="#1-3-回调" class="headerlink" title="1.3. 回调"></a>1.3. 回调</h2><blockquote><p>比如：你接着去买书，询问老板有书吗？老板说目前没有，然后你回答说，那我在这儿等，书来了我才走。后面有书了，你得到了书付钱离开。整个过程：</p><ol><li>询问</li><li>老板备货</li><li>等待</li><li>得到书，付钱离开</li></ol></blockquote><p> 回调的机制是：</p><ol><li>类A的<code>a()</code>方法调用类B的<code>b()</code>方法</li><li>类B的<code>b()</code>方法执行完毕主动调用类A的<code>callback()</code>方法</li></ol><p>所以在回调，重要的就是两个类：</p><p>A：调用B后，需要等到B的结果才能继续向下执行。</p><p>B：执行动作。</p><p>设置回调，由于A是需要等到B的结果再向下，所以在A中，需要实现这个接口，或者在调用B方法的参数中，实例化一个Callback对象，B中持有这个回调对象，当B完成之后，就通过这个回调对象发消息。</p><p>比如买书：</p><p>用户需要等书才走，书店老板要备货，那么用户就是A，书店(老板)就是B，用户需要实现一个回调，并且书店要持有这个回调，当备货完成才能通知用户。</p><p>回调：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookAvailableCallback</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBookAvailable</span><span class="hljs-params">(String bookTitle)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;去书店买书&quot;</span>);<br>        <span class="hljs-type">BookStore</span> <span class="hljs-variable">bookStore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookStore</span>();<br>        bookStore.prepareBook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookAvailableCallback</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBookAvailable</span><span class="hljs-params">(String bookTitle)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;买到了书---《&quot;</span> + bookTitle + <span class="hljs-string">&quot;》&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>书店：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookStore</span> &#123;<br>    <span class="hljs-keyword">private</span> BookAvailableCallback callback;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareBook</span><span class="hljs-params">(BookAvailableCallback callback)</span> &#123;<br>        <span class="hljs-built_in">this</span>.callback = callback;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;书店正在备货，请稍候...&quot;</span>);<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>); <span class="hljs-comment">// 模拟备货过程，等待5秒</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        haveBook();<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">haveBook</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bookTitle</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java Programming&quot;</span>; <span class="hljs-comment">// 模拟书店有了书</span><br><br>        <span class="hljs-comment">// 当书店有书时，调用回调通知用户</span><br>        <span class="hljs-keyword">if</span> (callback != <span class="hljs-literal">null</span>) &#123;<br>            callback.onBookAvailable(bookTitle);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BookStore</span> <span class="hljs-variable">bookStore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookStore</span>();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><br>        user.buyBook();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实回调就是一个很好的面向接口编程的实例，在接口中定义好要做什么事，根据接口定义的职责，实例出来的对象就具备这个接口能力，那么只需要在另一边持有对应的引用就可以通过回调定义的能力将最终结果返回。</p>]]></content>
    
    
    <categories>
      
      <category>Java编程技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java编程技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通-管理员后端管理系统-医院设置管理</title>
    <link href="/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E7%AE%A1%E7%90%86%E5%91%98%E5%90%8E%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-%E5%8C%BB%E9%99%A2%E8%AE%BE%E7%BD%AE%E7%AE%A1%E7%90%86/3f5c61089e7d/"/>
    <url>/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E7%AE%A1%E7%90%86%E5%91%98%E5%90%8E%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-%E5%8C%BB%E9%99%A2%E8%AE%BE%E7%BD%AE%E7%AE%A1%E7%90%86/3f5c61089e7d/</url>
    
    <content type="html"><![CDATA[<h1 id="1-医院设置管理"><a href="#1-医院设置管理" class="headerlink" title="1. 医院设置管理"></a>1. 医院设置管理</h1><h2 id="1-1-医院列表"><a href="#1-1-医院列表" class="headerlink" title="1.1. 医院列表"></a>1.1. 医院列表</h2><h3 id="1-1-1-相关数据库"><a href="#1-1-1-相关数据库" class="headerlink" title="1.1.1 相关数据库"></a>1.1.1 相关数据库</h3><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/hospital_set.png" alt="hospital_set"></p><h3 id="1-1-2-对应模块"><a href="#1-1-2-对应模块" class="headerlink" title="1.1.2. 对应模块"></a>1.1.2. 对应模块</h3><p>Service-hosp</p><h3 id="1-1-3-对应实体类"><a href="#1-1-3-对应实体类" class="headerlink" title="1.1.3. 对应实体类"></a>1.1.3. 对应实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;id&quot;)</span><br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span><br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;create_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;update_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;逻辑删除(1:已删除，0:未删除)&quot;)</span><br>    <span class="hljs-meta">@TableLogic</span><br>    <span class="hljs-meta">@TableField(&quot;is_deleted&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer isDeleted;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;其他参数&quot;)</span><br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;医院设置&quot;)</span><br><span class="hljs-meta">@TableName(&quot;hospital_set&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HospitalSet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;医院名称&quot;)</span><br><span class="hljs-meta">@TableField(&quot;hosname&quot;)</span><br><span class="hljs-keyword">private</span> String hosname;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;医院编号&quot;)</span><br><span class="hljs-meta">@TableField(&quot;hoscode&quot;)</span><br><span class="hljs-keyword">private</span> String hoscode;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;api基础路径&quot;)</span><br><span class="hljs-meta">@TableField(&quot;api_url&quot;)</span><br><span class="hljs-keyword">private</span> String apiUrl;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;签名秘钥&quot;)</span><br><span class="hljs-meta">@TableField(&quot;sign_key&quot;)</span><br><span class="hljs-keyword">private</span> String signKey;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;联系人姓名&quot;)</span><br><span class="hljs-meta">@TableField(&quot;contacts_name&quot;)</span><br><span class="hljs-keyword">private</span> String contactsName;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;联系人手机&quot;)</span><br><span class="hljs-meta">@TableField(&quot;contacts_phone&quot;)</span><br><span class="hljs-keyword">private</span> String contactsPhone;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;状态(0:不可用, 1:可用)&quot;)</span><br><span class="hljs-meta">@TableField(&quot;status&quot;)</span><br><span class="hljs-keyword">private</span> Integer status;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-1-4-进行增删改查操作"><a href="#1-1-4-进行增删改查操作" class="headerlink" title="1.1.4. 进行增删改查操作"></a>1.1.4. 进行增删改查操作</h3><p>创建对应的mapper、service，根据数据库表字段进行相关操作</p><h2 id="1-2-医院、科室、排班设置"><a href="#1-2-医院、科室、排班设置" class="headerlink" title="1.2. 医院、科室、排班设置"></a>1.2. 医院、科室、排班设置</h2><h3 id="1-2-1-相关数据库"><a href="#1-2-1-相关数据库" class="headerlink" title="1.2.1. 相关数据库"></a>1.2.1. 相关数据库</h3><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/hospital_set.png" alt="hospital"></p><p>使用MongoDB保存医院、科室、排班数据，同时给出了一个模拟的医院系统（hospital_manage），统一的调用接口在api&#x2F;ApiController中。</p><h3 id="1-2-2-医院相关CRUD"><a href="#1-2-2-医院相关CRUD" class="headerlink" title="1.2.2. 医院相关CRUD"></a>1.2.2. 医院相关CRUD</h3><p>所有的接口文档均在《尚医通API接口文档》</p><h4 id="1-2-2-1-上传医院接口"><a href="#1-2-2-1-上传医院接口" class="headerlink" title="1.2.2.1 上传医院接口"></a>1.2.2.1 上传医院接口</h4><p>接口路径：&#x2F;api&#x2F;hosp&#x2F;saveHospital</p><p>参数：</p><table><thead><tr><th><strong>字段名</strong></th><th><strong>类型</strong></th><th><strong>长度</strong></th><th><strong>必输</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>hoscode</td><td>string</td><td>30</td><td>是</td><td>给医院分配的唯一标识</td></tr><tr><td>hosname</td><td>string</td><td>50</td><td>是</td><td>医院名称</td></tr><tr><td>hostype</td><td>string</td><td>1</td><td>是</td><td>医院类型(1:三级甲等,2:三级乙等,3:二级甲等,4:二级乙等,5:一级)</td></tr><tr><td>provinceCode</td><td>string</td><td>18</td><td>是</td><td>省code（国家统计局对应省的code）</td></tr><tr><td>cityCode</td><td>string</td><td>50</td><td>是</td><td>市code（国家统计局对应市的code）</td></tr><tr><td>districtCode</td><td>string</td><td>10</td><td>是</td><td>区code（国家统计局对应区的code）</td></tr><tr><td>address</td><td>string</td><td>20</td><td>是</td><td>详情地址</td></tr><tr><td>logoData</td><td>string</td><td>11</td><td>是</td><td>医院logo(转换为base64字符串)</td></tr><tr><td>intro</td><td>string</td><td></td><td>是</td><td>医院简介</td></tr><tr><td>route</td><td>string</td><td>255</td><td>是</td><td>坐车路线</td></tr><tr><td>bookingRule</td><td>string</td><td>8000</td><td>是</td><td>预约规则，json数据</td></tr></tbody></table><blockquote><p>步骤:</p><ol><li>获取传递的医院信息，通过request获取到封装的map</li><li>获取医院系统传递过来的签名,签名进行MD5加密</li><li>根据传递过来医院编码，查询数据库，查询签名<ol><li>此时得到医院的hoscode，去hospital_set表中根据hoscode得到signKey</li><li>将查询到的signKey进行MD5加密。</li></ol></li><li>判断参数中传入的签名和数据库中得到的签名加密之后是否一致<ol><li>签名不一致直接爆出异常</li></ol></li><li>图片处理：在医院接口中，原来的”+”转变为了” “，因此在得到参数之后，需要转换回去。</li><li>根据hoscode判断是否存在相同数据<ol><li>存在，进行修改</li><li>不存在，进行保存</li></ol></li></ol></blockquote><h4 id="1-2-2-2-查询医院接口"><a href="#1-2-2-2-查询医院接口" class="headerlink" title="1.2.2.2. 查询医院接口"></a>1.2.2.2. 查询医院接口</h4><p>地址：&#x2F;api&#x2F;hosp&#x2F;hospital&#x2F;show</p><p>参数：</p><table><thead><tr><th><strong>字段名</strong></th><th><strong>类型</strong></th><th><strong>长度</strong></th><th><strong>必输</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>hoscode</td><td>string</td><td>30</td><td>是</td><td>给医院分配的唯一标识</td></tr><tr><td>timestamp</td><td>long</td><td></td><td>是</td><td>时间戳。从1970-01-01 00:00:00算起的毫秒数</td></tr><tr><td>sign</td><td>string</td><td>32</td><td>是</td><td>验签参数。</td></tr></tbody></table><blockquote><p>步骤：</p><ol><li>得到请求过来的map</li><li>从map中获取医院的编号</li><li>获取医院系统传递过来的签名,签名进行MD5加密</li><li>根据传递过来医院编码，查询数据库，查询签名<ol><li>此时得到医院的hoscode，去hospital_set表中根据hoscode得到signKey</li><li>将查询到的signKey进行MD5加密。</li></ol></li><li>判断参数中传入的签名和数据库中得到的签名加密之后是否一致<ol><li>签名不一致直接爆出异常</li></ol></li><li>根据医院编号(hoscode)进行查询</li></ol></blockquote><h3 id="1-2-3-科室相关CRUD"><a href="#1-2-3-科室相关CRUD" class="headerlink" title="1.2.3. 科室相关CRUD"></a>1.2.3. 科室相关CRUD</h3><h4 id="1-2-3-1-上传科室接口"><a href="#1-2-3-1-上传科室接口" class="headerlink" title="1.2.3.1. 上传科室接口"></a>1.2.3.1. 上传科室接口</h4><p>地址：&#x2F;api&#x2F;hosp&#x2F;saveDepartment</p><table><thead><tr><th><strong>字段名</strong></th><th><strong>类型</strong></th><th><strong>长度</strong></th><th><strong>必输</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>hoscode</td><td>string</td><td>30</td><td>是</td><td>给医院分配的唯一标识</td></tr><tr><td>depcode</td><td>string</td><td>50</td><td>是</td><td>科室编号</td></tr><tr><td>depname</td><td>string</td><td>1</td><td>是</td><td>科室名称</td></tr><tr><td>intro</td><td>string</td><td>18</td><td>是</td><td>科室描述</td></tr><tr><td>bigcode</td><td>string</td><td>50</td><td>是</td><td>大科室编号</td></tr><tr><td>bigname</td><td>string</td><td>10</td><td>是</td><td>大科室名称</td></tr><tr><td>address</td><td>string</td><td>20</td><td>是</td><td>详情地址</td></tr><tr><td>timestamp</td><td>long</td><td></td><td>是</td><td>时间戳。从1970-01-01 00:00:00算起的毫秒数</td></tr><tr><td>sign</td><td>string</td><td>32</td><td>是</td><td>验签参数。</td></tr></tbody></table><blockquote><p>步骤：</p><ol><li>从request中获取传递的map</li><li>从map中获取医院的编号</li><li>获取医院系统传递过来的签名,签名进行MD5加密</li><li>根据传递过来医院编码，查询数据库，查询签名<ol><li>此时得到医院的hoscode，去hospital_set表中根据hoscode得到signKey</li><li>将查询到的signKey进行MD5加密。</li></ol></li><li>判断参数中传入的签名和数据库中得到的签名加密之后是否一致<ol><li>签名不一致直接爆出异常</li></ol></li><li>根据医院编号和科室号到mongodb中进行查询<ol><li>如果查询出来有，更新相关值</li><li>如果查询出来没有，设置相关值，并进行保存</li></ol></li></ol></blockquote><h4 id="1-2-3-2-查询科室接口"><a href="#1-2-3-2-查询科室接口" class="headerlink" title="1.2.3.2. 查询科室接口"></a>1.2.3.2. 查询科室接口</h4><p>地址：&#x2F;api&#x2F;hosp&#x2F;hospital&#x2F;show</p><p>用于查询，所以涉及到一个vo实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;Department&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DepartmentQueryVo</span> &#123;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;医院编号&quot;)</span><br><span class="hljs-keyword">private</span> String hoscode;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;科室编号&quot;)</span><br><span class="hljs-keyword">private</span> String depcode;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;科室名称&quot;)</span><br><span class="hljs-keyword">private</span> String depname;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;大科室编号&quot;)</span><br><span class="hljs-keyword">private</span> String bigcode;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;大科室名称&quot;)</span><br><span class="hljs-keyword">private</span> String bigname;<br><br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>字段名</strong></th><th><strong>类型</strong></th><th><strong>长度</strong></th><th><strong>必输</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>hoscode</td><td>string</td><td>30</td><td>是</td><td>给医院分配的唯一标识</td></tr><tr><td><code>pageNum</code></td><td>Int</td><td></td><td>是</td><td>第几页</td></tr><tr><td><code>pageSize</code></td><td>Int</td><td></td><td>是</td><td>每页个数</td></tr><tr><td>timestamp</td><td>long</td><td></td><td>是</td><td>时间戳。从1970-01-01 00:00:00算起的毫秒数</td></tr><tr><td>sign</td><td>string</td><td>32</td><td>是</td><td>验签参数。</td></tr></tbody></table><blockquote><p>步骤：</p><ol><li>从request中获取传递的map</li><li>从map中获取医院的编号</li><li>获取医院系统传递过来的签名,签名进行MD5加密</li><li>根据传递过来医院编码，查询数据库，查询签名<ol><li>此时得到医院的hoscode，去hospital_set表中根据hoscode得到signKey</li><li>将查询到的signKey进行MD5加密。</li></ol></li><li>判断参数中传入的签名和数据库中得到的签名加密之后是否一致<ol><li>签名不一致直接爆出异常</li></ol></li><li>从map中查询出来page、limit，没有默认为1。</li><li>封装DepartmentQueryVo对象，即设置hoscode</li><li>从MongoDB中进行分页查找，根据相关条件。</li></ol></blockquote><h4 id="1-2-3-3-删除科室接口"><a href="#1-2-3-3-删除科室接口" class="headerlink" title="1.2.3.3. 删除科室接口"></a>1.2.3.3. 删除科室接口</h4><p>地址：&#x2F;api&#x2F;hosp&#x2F;schedule&#x2F;remove</p><table><thead><tr><th><strong>字段名</strong></th><th><strong>类型</strong></th><th><strong>长度</strong></th><th><strong>必输</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>hoscode</td><td>string</td><td>30</td><td>是</td><td>给医院分配的唯一标识</td></tr><tr><td>hosScheduleId</td><td>string</td><td>30</td><td></td><td>排班编号（医院自己的排班主键）</td></tr><tr><td>timestamp</td><td>long</td><td></td><td>是</td><td>时间戳。从1970-01-01 00:00:00算起的毫秒数</td></tr><tr><td>sign</td><td>string</td><td>32</td><td>是</td><td>验签参数。</td></tr></tbody></table><blockquote><p>步骤：</p><ol><li>从request中获取传递的map</li><li>从map中获取医院的编号</li><li>获取医院系统传递过来的签名,签名进行MD5加密</li><li>根据传递过来医院编码，查询数据库，查询签名<ol><li>此时得到医院的hoscode，去hospital_set表中根据hoscode得到signKey</li><li>将查询到的signKey进行MD5加密。</li></ol></li><li>判断参数中传入的签名和数据库中得到的签名加密之后是否一致<ol><li>签名不一致直接爆出异常</li></ol></li><li>从map中获取科室编号</li><li>根据医院编号和科室编号查询出科室对象<ol><li>如果查询出有，根据科室的id进行删除</li></ol></li></ol></blockquote><h3 id="1-2-4-排班相关CRUD"><a href="#1-2-4-排班相关CRUD" class="headerlink" title="1.2.4. 排班相关CRUD"></a>1.2.4. 排班相关CRUD</h3><h4 id="1-2-4-1-上传排班"><a href="#1-2-4-1-上传排班" class="headerlink" title="1.2.4.1. 上传排班"></a>1.2.4.1. 上传排班</h4><p>地址：&#x2F;api&#x2F;hosp&#x2F;saveSchedule</p><table><thead><tr><th><strong>字段名</strong></th><th><strong>类型</strong></th><th><strong>长度</strong></th><th><strong>必输</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>hoscode</td><td>string</td><td>30</td><td>是</td><td>给医院分配的唯一标识</td></tr><tr><td>depcode</td><td>string</td><td>20</td><td>是</td><td>科室编号</td></tr><tr><td>title</td><td>string</td><td>30</td><td>是</td><td>职称</td></tr><tr><td>docname</td><td>string</td><td>30</td><td>是</td><td>医生名称</td></tr><tr><td>skill</td><td>string</td><td>300</td><td>是</td><td>擅长技能</td></tr><tr><td>workDate</td><td>string</td><td>10</td><td>是</td><td>安排日期（yyyy-MM-dd）</td></tr><tr><td>workTime</td><td>int</td><td></td><td>是</td><td>安排时间（0：上午 1：下午）</td></tr><tr><td>reservedNumber</td><td>int</td><td></td><td></td><td>可预约数</td></tr><tr><td>availableNumber</td><td>int</td><td></td><td></td><td>剩余预约数</td></tr><tr><td>amount</td><td>string</td><td>5</td><td></td><td>挂号费</td></tr><tr><td>status</td><td>int</td><td></td><td></td><td>排班状态（-1：停诊 0：停约 1：可约）</td></tr><tr><td>hosScheduleId</td><td>string</td><td>30</td><td></td><td>排班编号（医院自己的排班主键）</td></tr><tr><td>timestamp</td><td>long</td><td></td><td>是</td><td>时间戳。从1970-01-01 00:00:00算起的毫秒数</td></tr><tr><td>sign</td><td>string</td><td>32</td><td>是</td><td>验签参数。</td></tr></tbody></table><blockquote><p>步骤：</p><ol><li>从request中获取传递的map</li><li>从map中获取医院的编号</li><li>获取医院系统传递过来的签名,签名进行MD5加密</li><li>根据传递过来医院编码，查询数据库，查询签名<ol><li>此时得到医院的hoscode，去hospital_set表中根据hoscode得到signKey</li><li>将查询到的signKey进行MD5加密。</li></ol></li><li>判断参数中传入的签名和数据库中得到的签名加密之后是否一致<ol><li>签名不一致直接爆出异常</li></ol></li><li>根据医院编号和排班编号(ScheduleId)查询是否有这一条数据<ol><li>如果有：更新相关值</li><li>如果没有，设置相关值，并进行保存</li></ol></li></ol></blockquote><h4 id="1-2-4-2-查询排班"><a href="#1-2-4-2-查询排班" class="headerlink" title="1.2.4.2. 查询排班"></a>1.2.4.2. 查询排班</h4><p>地址：&#x2F;api&#x2F;hosp&#x2F;schedule&#x2F;list</p><p>查询涉及到实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;Schedule&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleQueryVo</span> &#123;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;医院编号&quot;)</span><br><span class="hljs-keyword">private</span> String hoscode;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;科室编号&quot;)</span><br><span class="hljs-keyword">private</span> String depcode;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;医生编号&quot;)</span><br><span class="hljs-keyword">private</span> String doccode;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;安排日期&quot;)</span><br><span class="hljs-keyword">private</span> Date workDate;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;安排时间（0：上午 1：下午）&quot;)</span><br><span class="hljs-keyword">private</span> Integer workTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>字段名</strong></th><th><strong>类型</strong></th><th><strong>长度</strong></th><th><strong>必输</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>hoscode</td><td>string</td><td>30</td><td>是</td><td>给医院分配的唯一标识</td></tr><tr><td><code>pageNum</code></td><td>Int</td><td></td><td>是</td><td>第几页</td></tr><tr><td><code>pageSize</code></td><td>Int</td><td></td><td>是</td><td>每页个数</td></tr><tr><td>timestamp</td><td>long</td><td></td><td>是</td><td>时间戳。从1970-01-01 00:00:00算起的毫秒数</td></tr><tr><td>sign</td><td>string</td><td>32</td><td>是</td><td>验签参数。</td></tr></tbody></table><blockquote><p>步骤：</p><ol><li>从request中获取传递的map</li><li>从map中获取医院的编号</li><li>获取医院系统传递过来的签名,签名进行MD5加密</li><li>根据传递过来医院编码，查询数据库，查询签名<ol><li>此时得到医院的hoscode，去hospital_set表中根据hoscode得到signKey</li><li>将查询到的signKey进行MD5加密。</li></ol></li><li>判断参数中传入的签名和数据库中得到的签名加密之后是否一致<ol><li>签名不一致直接爆出异常</li></ol></li><li>从map中查询出来page、limit，没有默认为1。同时获取科室编号。</li><li>封装ScheduleQueryVo对象，即设置hoscode</li><li>从MongoDB中进行分页查找，根据相关条件。</li></ol></blockquote><h4 id="1-2-4-3-删除排班"><a href="#1-2-4-3-删除排班" class="headerlink" title="1.2.4.3. 删除排班"></a>1.2.4.3. 删除排班</h4><p>地址：&#x2F;api&#x2F;hosp&#x2F;schedule&#x2F;remove</p><table><thead><tr><th><strong>字段名</strong></th><th><strong>类型</strong></th><th><strong>长度</strong></th><th><strong>必输</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>hoscode</td><td>string</td><td>30</td><td>是</td><td>给医院分配的唯一标识</td></tr><tr><td>hosScheduleId</td><td>string</td><td>30</td><td></td><td>排班编号（医院自己的排班主键）</td></tr><tr><td>timestamp</td><td>long</td><td></td><td>是</td><td>时间戳。从1970-01-01 00:00:00算起的毫秒数</td></tr><tr><td>sign</td><td>string</td><td>32</td><td>是</td><td>验签参数。</td></tr></tbody></table><blockquote><p>步骤：</p><ol><li>从request中获取传递的map</li><li>从map中获取医院的编号</li><li>获取医院系统传递过来的签名,签名进行MD5加密</li><li>根据传递过来医院编码，查询数据库，查询签名<ol><li>此时得到医院的hoscode，去hospital_set表中根据hoscode得到signKey</li><li>将查询到的signKey进行MD5加密。</li></ol></li><li>判断参数中传入的签名和数据库中得到的签名加密之后是否一致<ol><li>签名不一致直接爆出异常</li></ol></li><li>从map中获取排班编号(scheduledId)</li><li>根据医院编号和排班编号查询出排班对象<ol><li>如果查询出有，根据排班对象的id进行删除</li></ol></li></ol></blockquote><h2 id="1-3-医院详情"><a href="#1-3-医院详情" class="headerlink" title="1.3. 医院详情"></a>1.3. 医院详情</h2><p>对应在医院列表中的每一个数据，需要显示出医院名称、等级、地区，点击按钮可以查看具体详情</p><p>但是等级信息是在数据字典数据库表中，mongodb中只有hostype(等级数值)，因此使用<strong>远程调用</strong></p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231022164945276.png" alt="image-20231022164945276"></p><p>注册中心选择：nacos</p><p>同时在需要注册的服务配置文件中</p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 服务注册 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>声明nacos的服务地址</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># nacos服务地址</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><br></code></pre></td></tr></table></figure></li><li><p>启动类上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="1-3-1-医院列表-条件查询分页"><a href="#1-3-1-医院列表-条件查询分页" class="headerlink" title="1.3.1. 医院列表(条件查询分页)"></a>1.3.1. 医院列表(条件查询分页)</h3><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;Hospital&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HospitalQueryVo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;医院编号&quot;)</span><br><span class="hljs-keyword">private</span> String hoscode;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;医院名称&quot;)</span><br><span class="hljs-keyword">private</span> String hosname;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;医院类型&quot;)</span><br><span class="hljs-keyword">private</span> String hostype;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;省code&quot;)</span><br><span class="hljs-keyword">private</span> String provinceCode;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;市code&quot;)</span><br><span class="hljs-keyword">private</span> String cityCode;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;区code&quot;)</span><br><span class="hljs-keyword">private</span> String districtCode;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;状态&quot;)</span><br><span class="hljs-keyword">private</span> Integer status;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//医院列表(条件查询分页)</span><br><span class="hljs-meta">@GetMapping(&quot;list/&#123;page&#125;/&#123;limit&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">listHosp</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer page,</span><br><span class="hljs-params">                       <span class="hljs-meta">@PathVariable</span> Integer limit,</span><br><span class="hljs-params">                       HospitalQueryVo hospitalQueryVo)</span> &#123;<br>    Page&lt;Hospital&gt; pageModel = hospitalService.selectHospPage(page,limit,hospitalQueryVo);<br>    <span class="hljs-keyword">return</span> Result.ok(pageModel);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li><p>创建pageable对象，创建条件匹配器，hospitalSetQueryVo转换Hospital对象，创建对象</p></li><li><p>调用MongoDB方法实现查询</p></li><li><p>获取查询list集合，遍历进行医院等级封装</p><ol><li>根据dictCode和value获取医院等级名称</li></ol><blockquote><p> 在service-cmn模块中的DictController，添加接口：</p><ol><li>根据dictCode和value值查询返回name值，此时根据dictCode查询出dict对象，根据这个对象的id和value值能唯一匹配到这个name</li><li>根据value值查询返回name值，此时没有dictCode，直接构造条件查询出来dict对象，返回name即可</li></ol></blockquote></li><li><p>通过feign进行远程调用：</p><ol><li><p>构建service-client模块，在该模块下面service-cmn-client模块</p></li><li><p>添加Feign接口类：（此时一定要写@PathVariable注解，否则会出错）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;service-cmn&quot;)</span> <span class="hljs-comment">//提供方服务名称</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DictFeignClient</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/admin/cmn/dict/getName/&#123;dictCode&#125;/&#123;value&#125;&quot;)</span><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;dictCode&quot;)</span> String dictCode, <span class="hljs-meta">@PathVariable(&quot;value&quot;)</span> String value)</span>;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/admin/cmn/dict/getName/&#123;value&#125;&quot;)</span><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;value&quot;)</span> String value)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个接口中的内容就是在cmn中添加的两个接口（根据dictCode和value值查询返回name值，根据value值查询返回name值）</p></blockquote></li><li><p>同时在消费端添加<code>service-cmn-client</code>依赖，添加远程调用对象，将所有的信息封装到param中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Hospital <span class="hljs-title function_">setHospitalHosType</span><span class="hljs-params">(Hospital hospital)</span> &#123;<br>    <span class="hljs-comment">//根据dictCode和value获取医院等级名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hostypeString</span> <span class="hljs-operator">=</span> dictFeignClient.getName(<span class="hljs-string">&quot;Hostype&quot;</span>, hospital.getHostype());<br>    <span class="hljs-comment">//查询省 市  地区</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">provinceString</span> <span class="hljs-operator">=</span> dictFeignClient.getName(hospital.getProvinceCode());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cityString</span> <span class="hljs-operator">=</span> dictFeignClient.getName(hospital.getCityCode());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">districtString</span> <span class="hljs-operator">=</span> dictFeignClient.getName(hospital.getDistrictCode());<br><br>    hospital.getParam().put(<span class="hljs-string">&quot;fullAddress&quot;</span>,provinceString+cityString+districtString);<br>    hospital.getParam().put(<span class="hljs-string">&quot;hostypeString&quot;</span>,hostypeString);<br>    <span class="hljs-keyword">return</span> hospital;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>由于远程调用在其他模块中，在消费端的启动类上添加注解，指定扫描路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;com.laibaijiang&quot;)</span><br></code></pre></td></tr></table></figure></li></ol></blockquote><h3 id="1-3-2-查询所有子节点"><a href="#1-3-2-查询所有子节点" class="headerlink" title="1.3.2. 查询所有子节点"></a>1.3.2. 查询所有子节点</h3><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231022172443501.png" alt="image-20231022172443501"></p><p>此时需要在service-cmn模块中添加根据dict_code查询所有子节点数据的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;根据dictCode获取下级节点&quot;)</span><br><span class="hljs-meta">@GetMapping(value = &quot;/findByDictCode/&#123;dictCode&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;List&lt;Dict&gt;&gt; <span class="hljs-title function_">findByDictCode</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span> String dictCode)</span> &#123;<br>    List&lt;Dict&gt; list = dictService.findByDictCode(dictCode);<br>    <span class="hljs-keyword">return</span> Result.ok(list);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li>根据dictCode查询出dict对象</li><li>得到dict对象的id</li><li>根据这个id就可以查询出里面的子数据</li></ol></blockquote><h3 id="1-3-3-更新医院上线状态"><a href="#1-3-3-更新医院上线状态" class="headerlink" title="1.3.3. 更新医院上线状态"></a>1.3.3. 更新医院上线状态</h3><p>传入医院的id和状态值，更新mongodb的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//更新医院上线状态</span><br><span class="hljs-meta">@ApiOperation(value = &quot;更新医院上线状态&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;updateHospStatus/&#123;id&#125;/&#123;status&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">updateHospStatus</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id,<span class="hljs-meta">@PathVariable</span> Integer status)</span> &#123;<br>    hospitalService.updateStatus(id,status);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li>根据id查询出hospital对象</li><li>更新状态值和时间</li><li>保存。</li></ol></blockquote><h3 id="1-3-4-查看医院详情信息"><a href="#1-3-4-查看医院详情信息" class="headerlink" title="1.3.4. 查看医院详情信息"></a>1.3.4. 查看医院详情信息</h3><p>由于在前端中需要展示出医院的相关信息，也需要展示出医院预约的相关信息，因此使用一个map进行封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//医院详情信息</span><br><span class="hljs-meta">@ApiOperation(value = &quot;医院详情信息&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;showHospDetail/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">showHospDetail</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span> &#123;<br>    Map&lt;String, Object&gt; map = hospitalService.getHospById(id);<br>    <span class="hljs-keyword">return</span> Result.ok(map);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li>根据id得到医院对象</li><li>封装医院的等级信息+省市区等信息</li><li>最后将医院对象和预约规则封装到map中</li></ol></blockquote><h3 id="1-3-5-医院排班信息管理"><a href="#1-3-5-医院排班信息管理" class="headerlink" title="1.3.5. 医院排班信息管理"></a>1.3.5. 医院排班信息管理</h3><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231022205432834.png" alt="image-20231022205432834"></p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231022205634604.png" alt="image-20231022205634604"></p><h4 id="1-3-5-1-根据医院编号查询所有科室"><a href="#1-3-5-1-根据医院编号查询所有科室" class="headerlink" title="1.3.5.1. 根据医院编号查询所有科室"></a>1.3.5.1. 根据医院编号查询所有科室</h4><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;Department&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DepartmentVo</span> &#123;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;科室编号&quot;)</span><br><span class="hljs-keyword">private</span> String depcode;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;科室名称&quot;)</span><br><span class="hljs-keyword">private</span> String depname;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;下级节点&quot;)</span><br><span class="hljs-keyword">private</span> List&lt;DepartmentVo&gt; children;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/hosp/department&quot;)</span><br><span class="hljs-comment">//@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DepartmentController</span> &#123;<br><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> DepartmentService departmentService;<br><br>  <span class="hljs-comment">//根据医院编号，查询医院所有科室列表</span><br>  <span class="hljs-meta">@ApiOperation(value = &quot;查询医院所有科室列表&quot;)</span><br>  <span class="hljs-meta">@GetMapping(&quot;getDeptList/&#123;hoscode&#125;&quot;)</span><br>  <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getDeptList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String hoscode)</span> &#123;<br>      List&lt;DepartmentVo&gt; list = departmentService.findDeptTree(hoscode);<br>      <span class="hljs-keyword">return</span> Result.ok(list);<br>  &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li>根据医院编号，在mongodb中查询出所有的科室信息</li><li>根据大科室编号进行分组，获取每个大科室下面的子科室信息（使用stream流）</li><li>遍历得到的map，key：大科室的编号，value：大科室列表<ol><li>封装大科室，设置科室名和科室号</li><li>封装小科室，遍历每一个大科室，得到小科室的科室号和科室名，封装到小科室，设置一个小科室列表，每封装好一个小科室就添加进去</li><li>最终将小科室列表添加到大科室的children。</li><li>将封装好的大科室对象添加到结果中去。</li></ol></li></ol></blockquote><h4 id="1-3-5-2-根据医院和科室查询排班数据"><a href="#1-3-5-2-根据医院和科室查询排班数据" class="headerlink" title="1.3.5.2. 根据医院和科室查询排班数据"></a>1.3.5.2. 根据医院和科室查询排班数据</h4><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;可预约排班规则数据&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookingScheduleRuleVo</span> &#123;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;可预约日期&quot;)</span><br><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span><br><span class="hljs-keyword">private</span> Date workDate;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;可预约日期&quot;)</span><br><span class="hljs-meta">@JsonFormat(pattern = &quot;MM月dd日&quot;)</span><br><span class="hljs-keyword">private</span> Date workDateMd; <span class="hljs-comment">//方便页面使用</span><br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;周几&quot;)</span><br><span class="hljs-keyword">private</span> String dayOfWeek;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;就诊医生人数&quot;)</span><br><span class="hljs-keyword">private</span> Integer docCount;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;科室可预约数&quot;)</span><br><span class="hljs-keyword">private</span> Integer reservedNumber;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;科室剩余预约数&quot;)</span><br><span class="hljs-keyword">private</span> Integer availableNumber;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;状态 0：正常 1：即将放号 -1：当天已停止挂号&quot;)</span><br><span class="hljs-keyword">private</span> Integer status;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value =&quot;查询排班规则数据&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;getScheduleRule/&#123;page&#125;/&#123;limit&#125;/&#123;hoscode&#125;/&#123;depcode&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getScheduleRule</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">long</span> page,</span><br><span class="hljs-params">                              <span class="hljs-meta">@PathVariable</span> <span class="hljs-type">long</span> limit,</span><br><span class="hljs-params">                              <span class="hljs-meta">@PathVariable</span> String hoscode,</span><br><span class="hljs-params">                              <span class="hljs-meta">@PathVariable</span> String depcode)</span> &#123;<br>    Map&lt;String,Object&gt; map = scheduleService.getRuleSchedule(page,limit,hoscode,depcode);<br>    <span class="hljs-keyword">return</span> Result.ok(map);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li>根据医院编号和科室编号进行查询</li><li>根据工作日workDate进行分组，同时需要将查询出来的时期进行转换为星期几</li><li>统计号源数量</li><li>实现分页</li></ol></blockquote><h4 id="1-3-5-3-查询排班详情数据"><a href="#1-3-5-3-查询排班详情数据" class="headerlink" title="1.3.5.3. 查询排班详情数据"></a>1.3.5.3. 查询排班详情数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据医院编号 、科室编号和工作日期，查询排班详细信息</span><br><span class="hljs-meta">@ApiOperation(value = &quot;查询排班详细信息&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;getScheduleDetail/&#123;hoscode&#125;/&#123;depcode&#125;/&#123;workDate&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getScheduleDetail</span><span class="hljs-params">( <span class="hljs-meta">@PathVariable</span> String hoscode,</span><br><span class="hljs-params">                                 <span class="hljs-meta">@PathVariable</span> String depcode,</span><br><span class="hljs-params">                                 <span class="hljs-meta">@PathVariable</span> String workDate)</span> &#123;<br>    List&lt;Schedule&gt; list = scheduleService.getDetailSchedule(hoscode,depcode,workDate);<br>    <span class="hljs-keyword">return</span> Result.ok(list);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li>根据医院编号、科室编号以及转换后的星期几查询排班数据</li><li>遍历得到的list数据，对每一个排班数据中封装对应的信息：医院名称、科室名称、日期对应的星期几</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>尚医通</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通-前置知识</title>
    <link href="/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/0cb2303b23f0/"/>
    <url>/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/0cb2303b23f0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>背景：因为这是一个分布式的项目，会用到各种框架的知识，在此做一个记录，毕竟有些知识自己也不了解，需要后面再去学习</p></blockquote><h1 id="1-Mybatis-Plus"><a href="#1-Mybatis-Plus" class="headerlink" title="1. Mybatis-Plus"></a>1. Mybatis-Plus</h1><p>是一个ORM框架，对于单表来说是一个特别好用的利器，可以不用写sql，但是多于多表的联合查询，还是更推荐使用Mybatis框架。</p><h2 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1. 引入依赖"></a>1.1. 引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis-plus--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-2-配置文件"><a href="#1-2-配置文件" class="headerlink" title="1.2. 配置文件"></a>1.2. 配置文件</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><h2 id="1-3-实体类"><a href="#1-3-实体类" class="headerlink" title="1.3. 实体类"></a>1.3. 实体类</h2><p>注意：对应数据库表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-4-mapper"><a href="#1-4-mapper" class="headerlink" title="1.4. mapper"></a>1.4. mapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-5-Service"><a href="#1-5-Service" class="headerlink" title="1.5. Service"></a>1.5. Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; implement UserService&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-6-分页插件"><a href="#1-6-分页插件" class="headerlink" title="1.6. 分页插件"></a>1.6. 分页插件</h2><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p><p>通常在config包下进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页插件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInterceptor</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-6-1-分页查询数据"><a href="#1-6-1-分页查询数据" class="headerlink" title="1.6.1. 分页查询数据"></a>1.6.1. 分页查询数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectPage</span><span class="hljs-params">()</span> &#123;<br>    Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">//1表示当前页，3表示每一页的数量</span><br>    Page&lt;User&gt; userPage = userMapper.selectPage(page, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//返回对象得到分页所有数据</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">pages</span> <span class="hljs-operator">=</span> userPage.getPages(); <span class="hljs-comment">//总页数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> userPage.getCurrent(); <span class="hljs-comment">//当前页</span><br>    List&lt;User&gt; records = userPage.getRecords(); <span class="hljs-comment">//查询数据集合</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> userPage.getTotal(); <span class="hljs-comment">//总记录数</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">hasNext</span> <span class="hljs-operator">=</span> userPage.hasNext();  <span class="hljs-comment">//下一页</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">hasPrevious</span> <span class="hljs-operator">=</span> userPage.hasPrevious(); <span class="hljs-comment">//上一页</span><br><br>    System.out.println(pages);<br>    System.out.println(current);<br>    System.out.println(records);<br>    System.out.println(total);<br>    System.out.println(hasNext);<br>    System.out.println(hasPrevious);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-7-删除"><a href="#1-7-删除" class="headerlink" title="1.7. 删除"></a>1.7. 删除</h2><ol><li><p>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除数据</p></li><li><p>逻辑删除：假删除，将对应数据中代表是否被删除字段状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</p></li></ol><p>通常在对应实体类的相应属性上增加注解：<code>@TableLogic</code></p><h2 id="1-8-查询条件构造器（Wrapper）"><a href="#1-8-查询条件构造器（Wrapper）" class="headerlink" title="1.8. 查询条件构造器（Wrapper）"></a>1.8. 查询条件构造器（Wrapper）</h2><table><thead><tr><th><strong>查询方式</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>setSqlSelect</strong></td><td>设置 SELECT 查询字段</td></tr><tr><td><strong>where</strong></td><td>WHERE 语句，拼接 + WHERE 条件</td></tr><tr><td><strong>and</strong></td><td>AND 语句，拼接 + AND 字段&#x3D;值</td></tr><tr><td><strong>andNew</strong></td><td>AND 语句，拼接 + AND (字段&#x3D;值)</td></tr><tr><td><strong>or</strong></td><td>OR 语句，拼接 + OR 字段&#x3D;值</td></tr><tr><td><strong>orNew</strong></td><td>OR 语句，拼接 + OR (字段&#x3D;值)</td></tr><tr><td><strong>eq</strong></td><td>等于&#x3D;</td></tr><tr><td><strong>allEq</strong></td><td>基于 map 内容等于&#x3D;</td></tr><tr><td><strong>ne</strong></td><td>不等于&lt;&gt;</td></tr><tr><td><strong>gt</strong></td><td>大于&gt;</td></tr><tr><td><strong>ge</strong></td><td>大于等于&gt;&#x3D;</td></tr><tr><td><strong>lt</strong></td><td>小于&lt;</td></tr><tr><td><strong>le</strong></td><td>小于等于&lt;&#x3D;</td></tr><tr><td><strong>like</strong></td><td>模糊查询 LIKE</td></tr><tr><td><strong>notLike</strong></td><td>模糊查询 NOT LIKE</td></tr><tr><td><strong>in</strong></td><td>IN 查询</td></tr><tr><td><strong>notIn</strong></td><td>NOT IN 查询</td></tr><tr><td><strong>isNull</strong></td><td>NULL 值查询</td></tr><tr><td><strong>isNotNull</strong></td><td>IS NOT NULL</td></tr><tr><td><strong>groupBy</strong></td><td>分组 GROUP BY</td></tr><tr><td><strong>having</strong></td><td>HAVING 关键词</td></tr><tr><td><strong>orderBy</strong></td><td>排序 ORDER BY</td></tr><tr><td><strong>orderAsc</strong></td><td>ASC 排序 ORDER BY</td></tr><tr><td><strong>orderDesc</strong></td><td>DESC 排序 ORDER BY</td></tr><tr><td><strong>exists</strong></td><td>EXISTS 条件语句</td></tr><tr><td><strong>notExists</strong></td><td>NOT EXISTS 条件语句</td></tr><tr><td><strong>between</strong></td><td>BETWEEN 条件语句</td></tr><tr><td><strong>notBetween</strong></td><td>NOT BETWEEN 条件语句</td></tr><tr><td><strong>addFilter</strong></td><td>自由拼接 SQL</td></tr><tr><td><strong>last</strong></td><td>拼接在最后，例如：last(“LIMIT 1”)</td></tr></tbody></table><h1 id="2-MongoDB"><a href="#2-MongoDB" class="headerlink" title="2. MongoDB"></a>2. MongoDB</h1><blockquote><p>优点：</p><ol><li><p>对数据库高并发读写。</p></li><li><p>对海量数据的高效率存储和访问。</p></li><li><p>对数据库的高可扩展性和高可用性。</p></li></ol><p>缺点：</p><ol><li><p>数据库事务一致性需求</p></li><li><p>数据库的写实时性和读实时性需求</p></li><li><p>对复杂的SQL查询，特别是多表关联查询的需求</p></li></ol><p>使用场景：</p><p><strong>适用场景</strong></p><p>1、网站数据：Mongo非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。</p><p>2、缓存：由于性能很高，Mongo也适合作为信息基础设施的缓存层。在系统重启之后，由M ongo搭建的持久化缓存层可以避免下层的数据源过载。</p><p>3、大尺寸，低价值的数据：使用传统的关系型数据库存储一些数据时可能会比较昂贵， 在此之前，很多时候程序员往往会选择传统的文件进行存储。</p><p>4、高伸缩性的场景：Mongo非常适合由数十或数百台服务器组成的数据库。Mongo的路线图中已经包含对Map Reduce弓摩的内置支持。</p><p>5、用于对象及 JSON数据的存储：Mongo的BSON数据格式非常适合文档化格式的存储 及查询。</p><p><strong>不适用场合</strong></p><p>1、高度事务性的系统：例如银行或会计系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。</p><p>2、传统的商业智能应用：针对特定问题的BI数据库会对产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。</p></blockquote><h2 id="2-1-SpringBoot整合mongodb"><a href="#2-1-SpringBoot整合mongodb" class="headerlink" title="2.1. SpringBoot整合mongodb"></a>2.1. SpringBoot整合mongodb</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.data.mongodb.uri</span>=<span class="hljs-string">mongodb://localhost:27017/test</span><br></code></pre></td></tr></table></figure><p>创建实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Document(&quot;User&quot;)</span> <span class="hljs-comment">//指定哪一个colletion进行操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br> <span class="hljs-meta">@Id</span> <span class="hljs-comment">//id生成策略</span><br> <span class="hljs-keyword">private</span> String id;<br> <span class="hljs-keyword">private</span> String name;<br> <span class="hljs-keyword">private</span> Integer age;<br> <span class="hljs-keyword">private</span> String email;<br> <span class="hljs-keyword">private</span> String createDate;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-1-1-MongoTemplate"><a href="#2-1-1-MongoTemplate" class="headerlink" title="2.1.1 MongoTemplate"></a>2.1.1 MongoTemplate</h3><ol><li>mongoTemplate.findAll(User.class): 查询User文档的全部数</li><li>mongoTemplate.findById(<id>, User.class): 查询User文档id为id的数</li><li>mongoTemplate.find(query, User.class);: 根据query内的查询条件查询</li><li>mongoTemplate.upsert(query, update, User.class): 修改</li><li>mongoTemplate.remove(query, User.class): 删除</li><li>mongoTemplate.insert(User): 新增</li></ol><p>条件查询：</p><ol><li>创建一个query对象（用来封装所有条件对象)，再创建一个criteria对象（用来构建条件）</li><li>精准条件：criteria.and(“key”).is(“条件”)</li><li>模糊条件：criteria.and(“key”).regex(“条件”)</li><li>封装条件：query.addCriteria(criteria)</li><li>大于（创建新的criteria）：Criteria gt &#x3D; Criteria.where(“key”).gt（“条件”）</li><li>小于（创建新的criteria）：Criteria lt &#x3D; Criteria.where(“key”).lt（“条件”</li><li>Query.addCriteria(new Criteria().andOperator(gt,lt));</li><li>一个query中只能有一个andOperator()。其参数也可以是Criteria数组。</li><li>排序 ：query.with（new Sort(Sort.Direction.ASC, “age”). and(new Sort(Sort.Direction.DESC, “date”)))</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DemomogoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;<br><br>    <span class="hljs-comment">//添加</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">20</span>);<br>        user.setName(<span class="hljs-string">&quot;test&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;4932200@qq.com&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> mongoTemplate.insert(user);<br>        System.out.println(user1);<br>    &#125;<br><br>    <span class="hljs-comment">//查询所有</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUser</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; userList = mongoTemplate.findAll(User.class);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">//根据id查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <br>mongoTemplate.findById(<span class="hljs-string">&quot;5ffbfa2ac290f356edf9b5aa&quot;</span>, User.class);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-comment">//条件查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUserList</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// name = test and age = 20</span><br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria<br>                .where(<span class="hljs-string">&quot;name&quot;</span>).is(<span class="hljs-string">&quot;test&quot;</span>)<br>                .and(<span class="hljs-string">&quot;age&quot;</span>).is(<span class="hljs-number">20</span>));<br>        List&lt;User&gt; userList = mongoTemplate.find(query, User.class);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">//模糊查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUsersLikeName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;est&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s%s%s&quot;</span>, <span class="hljs-string">&quot;^.*&quot;</span>, name, <span class="hljs-string">&quot;.*$&quot;</span>);<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex, Pattern.CASE_INSENSITIVE);<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;name&quot;</span>).regex(pattern));<br>        List&lt;User&gt; userList = mongoTemplate.find(query, User.class);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">//分页查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUsersPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;est&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pageNo</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s%s%s&quot;</span>, <span class="hljs-string">&quot;^.*&quot;</span>, name, <span class="hljs-string">&quot;.*$&quot;</span>);<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex, Pattern.CASE_INSENSITIVE);<br>        query.addCriteria(Criteria.where(<span class="hljs-string">&quot;name&quot;</span>).regex(pattern));<br>      <span class="hljs-comment">//查询记录数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalCount</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) mongoTemplate.count(query, User.class);<br>      <span class="hljs-comment">//分页</span><br>        List&lt;User&gt; userList = mongoTemplate.find(query.skip((pageNo - <span class="hljs-number">1</span>) * pageSize).limit(pageSize), User.class);<br><br>        Map&lt;String, Object&gt; pageMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        pageMap.put(<span class="hljs-string">&quot;list&quot;</span>, userList);<br>        pageMap.put(<span class="hljs-string">&quot;totalCount&quot;</span>,totalCount);<br>        System.out.println(pageMap);<br>    &#125;<br><br>    <span class="hljs-comment">//修改</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mongoTemplate.findById(<span class="hljs-string">&quot;5ffbfa2ac290f356edf9b5aa&quot;</span>, User.class);<br>        user.setName(<span class="hljs-string">&quot;test_1&quot;</span>);<br>        user.setAge(<span class="hljs-number">25</span>);<br>        user.setEmail(<span class="hljs-string">&quot;493220990@qq.com&quot;</span>);<br>      <br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(user.getId()));<br>        <span class="hljs-type">Update</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Update</span>();<br>        update.set(<span class="hljs-string">&quot;name&quot;</span>, user.getName());<br>        update.set(<span class="hljs-string">&quot;age&quot;</span>, user.getAge());<br>        update.set(<span class="hljs-string">&quot;email&quot;</span>, user.getEmail());<br>      <br>        <span class="hljs-comment">//更新语句操作</span><br>        <span class="hljs-type">UpdateResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mongoTemplate.upsert(query, update, User.class);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> result.getModifiedCount();<br>        System.out.println(count);<br>    &#125;<br><br>    <span class="hljs-comment">//删除操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(<span class="hljs-string">&quot;5ffbfa2ac290f356edf9b5aa&quot;</span>));<br>        <span class="hljs-type">DeleteResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mongoTemplate.remove(query, User.class);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> result.getDeletedCount();<br>        System.out.println(count);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-1-2-MpngoRepository"><a href="#2-1-2-MpngoRepository" class="headerlink" title="2.1.2. MpngoRepository"></a>2.1.2. MpngoRepository</h3><ol><li>创建Repository类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;User, String&gt; &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>CRUD</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DemomogoApplicationTests1</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserRepository userRepository;<br><br>    <span class="hljs-comment">//添加</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">20</span>);<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;3332200@qq.com&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> userRepository.save(user);<br>    &#125;<br><br>    <span class="hljs-comment">//查询所有</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUser</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; userList = userRepository.findAll();<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">//id查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userRepository.findById(<span class="hljs-string">&quot;5ffbfe8197f24a07007bd6ce&quot;</span>).get();<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-comment">//条件查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUserList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        user.setAge(<span class="hljs-number">20</span>);<br>      <span class="hljs-comment">//条件构造</span><br>        Example&lt;User&gt; userExample = Example.of(user);<br>      <br>        List&lt;User&gt; userList = userRepository.findAll(userExample);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">//模糊查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUsersLikeName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//创建匹配器，即如何使用查询条件</span><br>        <span class="hljs-type">ExampleMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> ExampleMatcher.matching() <span class="hljs-comment">//构建对象</span><br>                .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING) <span class="hljs-comment">//改变默认字符串匹配方式：模糊查询</span><br>                .withIgnoreCase(<span class="hljs-literal">true</span>); <span class="hljs-comment">//改变默认大小写忽略方式：忽略大小写</span><br>      <br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;三&quot;</span>);<br>      <br>        Example&lt;User&gt; userExample = Example.of(user, matcher);<br>        List&lt;User&gt; userList = userRepository.findAll(userExample);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">//分页查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUsersPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Sort</span> <span class="hljs-variable">sort</span> <span class="hljs-operator">=</span> Sort.by(Sort.Direction.DESC, <span class="hljs-string">&quot;age&quot;</span>);<br><span class="hljs-comment">//0为第一页</span><br>        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, sort);<br><span class="hljs-comment">//创建匹配器，即如何使用查询条件</span><br>        <span class="hljs-type">ExampleMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> ExampleMatcher.matching() <span class="hljs-comment">//构建对象</span><br>                .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING) <span class="hljs-comment">//改变默认字符串匹配方式：模糊查询</span><br>                .withIgnoreCase(<span class="hljs-literal">true</span>); <span class="hljs-comment">//改变默认大小写忽略方式：忽略大小写</span><br>      <br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;三&quot;</span>);<br>      <br>        Example&lt;User&gt; userExample = Example.of(user, matcher);<br><span class="hljs-comment">//创建实例</span><br>        Example&lt;User&gt; example = Example.of(user, matcher);<br>      <br>        Page&lt;User&gt; pages = userRepository.findAll(userExample, pageable);<br>        System.out.println(pages);<br>    &#125;<br><br>    <span class="hljs-comment">//修改</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userRepository.findById(<span class="hljs-string">&quot;5ffbfe8197f24a07007bd6ce&quot;</span>).get();<br>        user.setName(<span class="hljs-string">&quot;张三_1&quot;</span>);<br>        user.setAge(<span class="hljs-number">25</span>);<br>        user.setEmail(<span class="hljs-string">&quot;883220990@qq.com&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> userRepository.save(user);<br>        System.out.println(save);<br>    &#125;<br><br>    <span class="hljs-comment">//删除</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        userRepository.deleteById(<span class="hljs-string">&quot;5ffbfe8197f24a07007bd6ce&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>备注：</p><p>Spring Data提供了对mongodb数据访问的支持，我们只需要继承MongoRepository类，按照Spring Data规范就可以了</p><p>SpringData 方法定义规范</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231022153311051.png" alt="image-20231022153311051"></p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231022153318435.png" alt="image-20231022153318435"></p><ol><li>不是随便声明的，而需要符合一定的规范</li><li>查询方法以find | read | get开头</li><li>涉及条件查询时，条件的属性用条件关键字连接</li><li>要注意的是：条件属性首字母需要大写</li><li>支持属性的级联查询，但若当前类有符合条件的属性则优先使用，而不使用级联属性,若需要使用级联属性，则属性之间使用_强制进行连接</li></ol></blockquote><h1 id="3-JWT"><a href="#3-JWT" class="headerlink" title="3. JWT"></a>3. JWT</h1><p>登录完成之后，生成字符串，包含用户信息。每个请求操作，如果有登录的判断，在请求头中查看是否包含token字符串，包含的话，对token进行校验，校验通过，则登录过。JWT最重要的作用就是对token进行防伪。</p><h1 id="4-OAuth2"><a href="#4-OAuth2" class="headerlink" title="4. OAuth2"></a>4. OAuth2</h1><p>解决的问题：</p><ol><li>开放系统间授权问题（令牌授权）</li><li>单点登录问题（登录了一个模块之后，其他模块无需再登录）</li></ol>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>尚医通</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通-管理员后端管理系统</title>
    <link href="/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E7%AE%A1%E7%90%86%E5%91%98%E5%90%8E%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/9511698e604b/"/>
    <url>/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E7%AE%A1%E7%90%86%E5%91%98%E5%90%8E%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/9511698e604b/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本部门重点讲解后端管理员管理系统</p><p>让预约挂号平台和每个医院建立连接，医院的每个操作都调用平台的接口。</p></blockquote><h1 id="1-医院设置管理"><a href="#1-医院设置管理" class="headerlink" title="1. 医院设置管理"></a>1. <a href="https://baijianglai.cn/2023/10/22/%E5%B0%9A%E5%8C%BB%E9%80%9A-%E7%AE%A1%E7%90%86%E5%91%98%E5%90%8E%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-%E5%8C%BB%E9%99%A2%E8%AE%BE%E7%BD%AE%E7%AE%A1%E7%90%86/">医院设置管理</a></h1><h1 id="2-数据字典管理"><a href="#2-数据字典管理" class="headerlink" title="2. 数据字典管理"></a>2. 数据字典管理</h1><blockquote><p>数据字典就是管理系统常用的分类数据或者一些固定数据，例如：省市区三级联动数据、民族数据、行业数据、学历数据等，由于该系统大量使用这种数据，所以我们要做一个数据管理方便管理系统数据，一般系统基本都会做数据管理。</p></blockquote><h2 id="2-1-相关数据库表"><a href="#2-1-相关数据库表" class="headerlink" title="2.1. 相关数据库表"></a>2.1. 相关数据库表</h2><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/dict.png" alt="dict"></p><blockquote><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/image-20231022094110709.png" alt="image-20231022094110709"></p><p>数据之前存在一个层级关系，并且对照element-ui表格中的树形数据与懒加载中有对应的结构</p></blockquote><h2 id="2-2-对应模块"><a href="#2-2-对应模块" class="headerlink" title="2.2. 对应模块"></a>2.2. 对应模块</h2><p>service-cmn</p><h2 id="2-3-对应实体类"><a href="#2-3-对应实体类" class="headerlink" title="2.3. 对应实体类"></a>2.3. 对应实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;数据字典&quot;)</span><br><span class="hljs-meta">@TableName(&quot;dict&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dict</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span><br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;create_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;update_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;逻辑删除(1:已删除，0:未删除)&quot;)</span><br>    <span class="hljs-meta">@TableLogic</span><br>    <span class="hljs-meta">@TableField(&quot;is_deleted&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer isDeleted;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;其他参数&quot;)</span><br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;上级id&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;parent_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long parentId;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;名称&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;值&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;value&quot;)</span><br>    <span class="hljs-keyword">private</span> String value;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;编码&quot;)</span><br>    <span class="hljs-meta">@TableField(&quot;dict_code&quot;)</span><br>    <span class="hljs-keyword">private</span> String dictCode;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;是否包含子节点&quot;)</span> <span class="hljs-comment">//做层级显示的数据</span><br>    <span class="hljs-meta">@TableField(exist = false)</span> <span class="hljs-comment">//数据库表中不存在</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> hasChildren;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-相关操作"><a href="#2-4-相关操作" class="headerlink" title="2.4. 相关操作"></a>2.4. 相关操作</h2><h3 id="2-4-1-根据数据id查询子数据"><a href="#2-4-1-根据数据id查询子数据" class="headerlink" title="2.4.1. 根据数据id查询子数据"></a>2.4.1. 根据数据id查询子数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;根据id查询子数据&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/findChildData/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findChildData</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>    List&lt;Dict&gt; dictList = dictService.findChildData(id);<br>    <span class="hljs-keyword">return</span> Result.ok(dictList);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>查询出所有的数据(select * from cmn where parent_id &#x3D; id)</li><li>每一条数据需要判断自己是否有子数据（设置hasChildren）<ol><li>根据id查询，select * from cmn where parent_id &#x3D; id，</li><li>如果这样查出来有数据，说明该id下有子数据，设置hasChildren为true，否则为false。</li></ol></li></ol><h3 id="2-4-2-数据字典导出"><a href="#2-4-2-数据字典导出" class="headerlink" title="2.4.2. 数据字典导出"></a>2.4.2. 数据字典导出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;字典导出&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/exportData&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportData</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>    dictService.exportData(response);<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的VO对象：</p><p>因为要写入excel中，所以有对应的value和index</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DictEeVo</span> &#123;<br><br><span class="hljs-meta">@ExcelProperty(value = &quot;id&quot; ,index = 0)</span><br><span class="hljs-keyword">private</span> Long id;<br><br><span class="hljs-meta">@ExcelProperty(value = &quot;上级id&quot; ,index = 1)</span><br><span class="hljs-keyword">private</span> Long parentId;<br><br><span class="hljs-meta">@ExcelProperty(value = &quot;名称&quot; ,index = 2)</span><br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-meta">@ExcelProperty(value = &quot;值&quot; ,index = 3)</span><br><span class="hljs-keyword">private</span> String value;<br><br><span class="hljs-meta">@ExcelProperty(value = &quot;编码&quot; ,index = 4)</span><br><span class="hljs-keyword">private</span> String dictCode;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//写入</span><br>EasyExcel.write(response.getOutputStream(), DictEeVo.class).sheet(<span class="hljs-string">&quot;数据字典&quot;</span>).doWrite(voList);<br></code></pre></td></tr></table></figure><h3 id="2-4-3-数据字典导入"><a href="#2-4-3-数据字典导入" class="headerlink" title="2.4.3. 数据字典导入"></a>2.4.3. 数据字典导入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;向字典中导入数据&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/importData&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">importData</span><span class="hljs-params">(MultipartFile file)</span>&#123;<br>    dictService.importData(file);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">EasyExcel.read(file.getInputStream(),DictEeVo.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DictListener</span>(baseMapper)).sheet().doRead();<br></code></pre></td></tr></table></figure><p>使用EasyExcel进行写操作的时候，需要一个listner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DictListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;DictEeVo&gt; &#123;<br><br>  <span class="hljs-keyword">private</span> DictMapper dictMapper;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DictListener</span><span class="hljs-params">(DictMapper dictMapper)</span> &#123;<br>      <span class="hljs-built_in">this</span>.dictMapper = dictMapper;<br>  &#125;<br><br>  <span class="hljs-comment">//一行一行读取</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(DictEeVo dictEeVo, AnalysisContext analysisContext)</span> &#123;<br>      <span class="hljs-comment">//调用方法添加数据库</span><br>      <span class="hljs-type">Dict</span> <span class="hljs-variable">dict</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dict</span>();<br>      BeanUtils.copyProperties(dictEeVo,dict);<br>      dictMapper.insert(dict);<br>  &#125;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> &#123;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-缓存"><a href="#2-5-缓存" class="headerlink" title="2.5. 缓存"></a>2.5. 缓存</h2><p>不经常修改的数据，固定经常会去查询的数据适合做缓存数据</p><ol><li><p>添加依赖</p></li><li><p>添加redis配置类</p></li><li><p>添加redis配置</p></li><li><p><code>@Cacheable</code>：根据方法对其返回结果进行缓存，下次请求时，如果缓存存在，则直接读取缓存数据返回；如果缓存不存在，则执行方法，并把返回的结果存入缓存中。一般用在查询方法上。</p><ol><li><table><thead><tr><th>value</th><th>缓存名，必填，它指定了你的缓存存放在哪块命名空间</th></tr></thead><tbody><tr><td>cacheNames</td><td>与 value 差不多，二选一即可</td></tr><tr><td>key</td><td>可选属性，可以使用 SpEL 标签自定义缓存的key</td></tr></tbody></table></li></ol></li><li><p><code>@CachePut</code>：使用该注解标志的方法，每次都会执行，并将结果存入指定的缓存中。其他方法可以直接从响应的缓存中读取缓存数据，而不需要再去查询数据库。一般用在新增方法上。</p><ol><li><table><thead><tr><th>value</th><th>缓存名，必填，它指定了你的缓存存放在哪块命名空间</th></tr></thead><tbody><tr><td>cacheNames</td><td>与 value 差不多，二选一即可</td></tr><tr><td>key</td><td>可选属性，可以使用 SpEL 标签自定义缓存的key</td></tr></tbody></table></li></ol></li><li><p><code>@CacheEvict</code>：使用该注解标志的方法，会清空指定的缓存。一般用在更新或者删除方法上。</p><ol><li><table><thead><tr><th>value</th><th>缓存名，必填，它指定了你的缓存存放在哪块命名空间</th></tr></thead><tbody><tr><td>cacheNames</td><td>与 value 差不多，二选一即可</td></tr><tr><td>key</td><td>可选属性，可以使用 SpEL 标签自定义缓存的key</td></tr><tr><td>allEntries</td><td>是否清空所有缓存，默认为  false。如果指定为 true，则方法调用后将立即清空所有的缓存</td></tr><tr><td>beforeInvocation</td><td>是否在方法执行前就清空，默认为  false。如果指定为 true，则在方法执行前就会清空缓存</td></tr></tbody></table></li></ol></li><li><p>默认查询的时候，添加尚环迅</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Cacheable(value = &quot;dict&quot;,keyGenerator = &quot;keyGenerator&quot;)</span> <span class="hljs-comment">// 将最终的dictList放入缓存, key dict报名类名方法名</span><br><span class="hljs-keyword">public</span> List&lt;Dict&gt; <span class="hljs-title function_">findChildData</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// sql select * from cmn where parent_id = id</span><br>    QueryWrapper&lt;Dict&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;parent_id&quot;</span>, id);<br>    List&lt;Dict&gt; dictList = baseMapper.selectList(wrapper);<br>    <span class="hljs-keyword">for</span> (Dict dict : dictList) &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">dictId</span> <span class="hljs-operator">=</span> dict.getId();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> hasChild(dictId);<br>        dict.setHasChildren(child);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dictList;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>有新数据导入的时候，清空所有缓存</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@CacheEvict(value = &quot;dict&quot;, allEntries=true)</span> <span class="hljs-comment">// 把该规则下的所有缓存数据进行清除</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">importData</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        EasyExcel.read(file.getInputStream(),DictEeVo.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DictListener</span>(baseMapper)).sheet().doRead();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-用户管理"><a href="#3-用户管理" class="headerlink" title="3. 用户管理"></a>3. 用户管理</h1><h2 id="2-1-用户认证"><a href="#2-1-用户认证" class="headerlink" title="2.1. 用户认证"></a>2.1. 用户认证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserInfoService userInfoService;<br><br>    <span class="hljs-comment">//用户列表（条件查询带分页）</span><br>    <span class="hljs-meta">@GetMapping(&quot;&#123;page&#125;/&#123;limit&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long page,</span><br><span class="hljs-params">                       <span class="hljs-meta">@PathVariable</span> Long limit,</span><br><span class="hljs-params">                       UserInfoQueryVo userInfoQueryVo)</span> &#123;<br>        Page&lt;UserInfo&gt; pageParam = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page,limit);<br>        IPage&lt;UserInfo&gt; pageModel =<br>                userInfoService.selectPage(pageParam,userInfoQueryVo);<br>        <span class="hljs-keyword">return</span> Result.ok(pageModel);<br>    &#125;<br><br>    <span class="hljs-comment">//用户锁定</span><br>    <span class="hljs-meta">@GetMapping(&quot;lock/&#123;userId&#125;/&#123;status&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">lock</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long userId,<span class="hljs-meta">@PathVariable</span> Integer status)</span> &#123;<br>        userInfoService.lock(userId,status);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br><br>    <span class="hljs-comment">//用户详情</span><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">   用户详情不仅需要根据userId查找用户，还需要查找出一个userId的所有的就诊人</span><br><span class="hljs-comment">   **/</span><br>    <span class="hljs-meta">@GetMapping(&quot;show/&#123;userId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long userId)</span> &#123;<br>        Map&lt;String,Object&gt; map = userInfoService.show(userId);<br>        <span class="hljs-keyword">return</span> Result.ok(map);<br>    &#125;<br><br>    <span class="hljs-comment">//认证审批  2通过  -1不通过</span><br>    <span class="hljs-meta">@GetMapping(&quot;approval/&#123;userId&#125;/&#123;authStatus&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">approval</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long userId,<span class="hljs-meta">@PathVariable</span> Integer authStatus)</span> &#123;<br>        userInfoService.approval(userId,authStatus);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-统计管理"><a href="#4-统计管理" class="headerlink" title="4. 统计管理"></a>4. 统计管理</h1><blockquote><p>使用可视化的形式展示出来订单量</p></blockquote><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getCountMap&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getCountMap</span><span class="hljs-params">(OrderCountQueryVo orderCountQueryVo)</span> &#123;<br>    Map&lt;String, Object&gt; countMap = orderFeignClient.getCountMap(orderCountQueryVo);<br>    <span class="hljs-keyword">return</span> Result.ok(countMap);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用远程调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;获取订单统计数据&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;inner/getCountMap&quot;)</span><br><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getCountMap</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrderCountQueryVo orderCountQueryVo)</span> &#123;<br>    <span class="hljs-keyword">return</span> orderService.getCountMap(orderCountQueryVo);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>步骤：</p><ol><li><p>调用mapper方法得到数据</p></li><li><p>获取x需要数据 ，日期数据  list集合</p></li><li><p>获取y需要数据，具体数量  list集合</p></li><li><p>分别放入map中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">map.put(<span class="hljs-string">&quot;dateList&quot;</span>,dateList);<br>map.put(<span class="hljs-string">&quot;countList&quot;</span>,countList);<br></code></pre></td></tr></table></figure></li></ol></blockquote><p>查询每天有多少个订单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT COUNT(*) AS count, reserve_date AS reserveDate<br>FROM order_info<br>WHERE<br>    hosname LIKE CONCAT(&#x27;%&#x27;, #&#123;vo.hosname&#125;, &#x27;%&#x27;)<br>    AND<br>    reserve_date &gt;= #&#123;vo.reserveDateBegin&#125;<br>    AND<br>    reserve_date &lt;= #&#123;vo.reserveDateEnd&#125;<br>    AND is_deleted = 0<br>GROUP BY reserve_date<br>ORDER BY reserve_date;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>尚医通</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚医通项目学习大纲</title>
    <link href="/%E5%B0%9A%E5%8C%BB%E9%80%9A%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/eba6394c8151/"/>
    <url>/%E5%B0%9A%E5%8C%BB%E9%80%9A%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/eba6394c8151/</url>
    
    <content type="html"><![CDATA[<blockquote><p> 背景：现在需要掌握一些前后端的技术应对工作上的事，所以选择了使用该项目进行学习，着重学习后端接口开发，落实后端开发的具体细节。</p><p>补充一句：这个项目的结构是很规范的，以后如果有微服务相关的开发，可以参考此项目。</p><p>不足之处：</p><ul><li>没有涉及到高并发的处理</li><li>没有涉及到事务的处理。</li></ul><p>但是这两个问题将会在之后的其他项目进行补充学习，本项目仅作为开端学习。</p></blockquote><h1 id="1-项目架构"><a href="#1-项目架构" class="headerlink" title="1. 项目架构"></a>1. 项目架构</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/project/%E5%B0%9A%E5%8C%BB%E9%80%9A%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="尚医通架构图"></p><blockquote><p>直白的翻译一下这个项目做了什么？</p><ol><li>搭建了一个门户系统用来对接每个医院，通过这么门户系统来完成在一个界面就可以预约不同医院的号。</li><li>那么整个开发阶段中，实际上就是：一个后端项目（管理员后端管理系统+用户系统）+一个管理员前端项目+一个用户前端项目。并且给出了一个模拟的医院对接系统。</li></ol></blockquote><h1 id="2-项目功能"><a href="#2-项目功能" class="headerlink" title="2. 项目功能"></a>2. 项目功能</h1><h2 id="2-1-管理员后端管理系统"><a href="#2-1-管理员后端管理系统" class="headerlink" title="2.1. 管理员后端管理系统"></a>2.1. 管理员后端管理系统</h2><blockquote><ol><li><p>医院设置管理</p><ol><li>医院设置列表、添加、锁定、删除</li><li>医院列表、详情、排班、下线</li></ol></li><li><p>数据管理</p><ol><li>数据字典树形显示、导入、导出</li></ol></li><li><p>用户管理</p><ol><li>用户列表、查看、锁定</li><li>认证用户审批</li></ol></li><li><p>订单管理</p><ol><li>订单列表、详情</li></ol></li><li><p>统计管理</p><ol><li>预约统计</li></ol></li></ol></blockquote><h2 id="2-2-用户后台系统"><a href="#2-2-用户后台系统" class="headerlink" title="2.2. 用户后台系统"></a>2.2. 用户后台系统</h2><blockquote><ol><li><p>首页数据显示</p><ol><li>医院列表</li></ol></li><li><p>医院详情显示</p><ol><li>医院科室显示</li></ol></li><li><p>用户登录功能</p><ol><li>手机号登录（短信验证码发送）</li><li>微信扫描登录</li></ol></li><li><p>用户实名认证</p></li><li><p>就诊人管理</p><ol><li>列表、添加、详情、删除</li></ol></li><li><p>预约挂号功能</p><ol><li>排班和挂号详情信息</li><li>确认挂号信息</li><li>生成预约挂号订单</li><li>挂号订单支付（微信）</li><li>取消预约订单</li></ol></li><li><p>就医提醒功能</p></li></ol></blockquote><h1 id="3-项目技术"><a href="#3-项目技术" class="headerlink" title="3. 项目技术"></a>3. 项目技术</h1><h2 id="3-1-后端技术"><a href="#3-1-后端技术" class="headerlink" title="3.1. 后端技术"></a>3.1. 后端技术</h2><blockquote><ol><li><p>SpringBoot</p></li><li><p>SpringCloud</p><ol><li>Nacos注册中心</li><li>Feign</li><li>GateWay</li></ol></li><li><p>Redis</p><ol><li>使用Redis作为缓存</li><li>验证码有效时间、支付二维码有效时间</li></ol></li><li><p>MongoDB</p><ol><li>使用MongoDB存储 医院相关数据</li></ol></li><li><p>EasyExcel</p><ol><li>操作excel表格，进行读和写操作</li></ol></li><li><p>MyBatisPlus</p></li><li><p>RabbitMQ</p><ol><li>订单相关操作，发送mq消息</li></ol></li><li><p>阿里云OSS</p></li><li><p>阿里云短信服务</p></li><li><p>微信登录&#x2F;支付</p></li><li><p>定时任务</p></li></ol></blockquote><h2 id="3-2-前端技术"><a href="#3-2-前端技术" class="headerlink" title="3.2. 前端技术"></a>3.2. 前端技术</h2><blockquote><ol><li><p>vue</p></li><li><p>Element-ui</p></li><li><p>nuxt</p></li><li><p>npm(此项目建议使用node14及其以下版本)</p></li><li><p>ECharts</p></li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>尚医通</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程-ThreadLocal</title>
    <link href="/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-ThreadLocal/5c8cef3482ea/"/>
    <url>/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-ThreadLocal/5c8cef3482ea/</url>
    
    <content type="html"><![CDATA[<h1 id="1、ThreadLocal是什么？"><a href="#1、ThreadLocal是什么？" class="headerlink" title="1、ThreadLocal是什么？"></a>1、ThreadLocal是什么？</h1><ul><li>提供线程内局部变量，不同线程之间不会相互干扰。</li><li>ThreadLocal 实例通常来说都是 <code>private static</code> 修饰的，用于关联线程和线程的上下文。</li><li><code>减少同一个线程内的函数 或 组件之间传递变量的复杂性</code>。</li></ul><p>小结：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 线程并发：在多线程并发的场景<br><span class="hljs-bullet">2.</span> 传递数据：通过ThreadLocal在同一线程不同组件中传递公共变量。<br><span class="hljs-bullet">3.</span> 线程隔离：每个线程的变量都是独立的，不会互相影响<br></code></pre></td></tr></table></figure><h2 id="1-1、举例-线程隔离"><a href="#1-1、举例-线程隔离" class="headerlink" title="1.1、举例-线程隔离"></a>1.1、举例-线程隔离</h2><ul><li><p>不使用ThreadLocal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content= content;<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    demo.setContent(Thread.currentThread().getName() + <span class="hljs-string">&quot;的数据&quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;------------&quot;</span>);<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----&gt;&quot;</span> + demo.getContent());<br>                &#125;<br>            &#125;, <span class="hljs-string">&quot;线程&quot;</span> + i).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/image-20230722155750292.png" alt="image-20230722155750292"></p></li><li><p>使用ThreadLocal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    ThreadLocal&lt;String&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        threadLocal.set(content);<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> threadLocal.get();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    demo.setContent(Thread.currentThread().getName() + <span class="hljs-string">&quot;的数据&quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;------------&quot;</span>);<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----&gt;&quot;</span> + demo.getContent());<br>                &#125;<br>            &#125;, <span class="hljs-string">&quot;线程&quot;</span> + i).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/image-20230722155708884.png" alt="image-20230722155708884"></p></li></ul><h2 id="1-2、对比synchronized"><a href="#1-2、对比synchronized" class="headerlink" title="1.2、对比synchronized"></a>1.2、对比synchronized</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">synchronizedDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content= content;<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">synchronizedDemo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">synchronizedDemo</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    <span class="hljs-keyword">synchronized</span> (synchronizedDemo.class) &#123;<br>                        demo.setContent(Thread.currentThread().getName() + <span class="hljs-string">&quot;的数据&quot;</span>);<br>                        System.out.println(<span class="hljs-string">&quot;------------&quot;</span>);<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----&gt;&quot;</span> + demo.getContent());<br>                    &#125;<br>                &#125;<br>            &#125;, <span class="hljs-string">&quot;线程&quot;</span> + i).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/image-20230722161534672.png" alt="image-20230722161534672"></p><p>虽然 <code>ThreadLocal</code> 和 <code>Synchronized</code> 关键字都是用于处理多线程并发访问变量的问题，不过两者处理问题的角度和思路不同。</p><table><thead><tr><th align="center"></th><th align="center">Synchronized</th><th align="center">ThreadLocal</th></tr></thead><tbody><tr><td align="center">原理</td><td align="center">同步机制采用“以时间换空间”的方式，只提供了一份变量，让不同的线程排队访问。</td><td align="center">采用 “以空间换时间”的方式，为每一个线程都提供了一份变量的副本，从而实现同时访问而不互相干扰。</td></tr><tr><td align="center">侧重点</td><td align="center">多个线程之间访问资源的<strong>同步</strong>。</td><td align="center">并发情况下让每个线程之间数据相互<strong>隔离</strong>。</td></tr></tbody></table><h2 id="1-3、ThreadLocal的好处"><a href="#1-3、ThreadLocal的好处" class="headerlink" title="1.3、ThreadLocal的好处"></a>1.3、ThreadLocal的好处</h2><ol><li>传递数据：保证每个线程保定的数据在需要的地方可以直接使用，这样避免了进行参数传递而带来的代码耦合问题。</li><li>线程隔离：各个线程之间的数据相互隔离但有具备并发性，同事避免了使用synchronized加锁带来的性能损耗问题。</li></ol><h1 id="2、案例"><a href="#2、案例" class="headerlink" title="2、案例"></a>2、案例</h1><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/image.png" alt="img"></p><p>那么可以看到在service到Dao层的时候，都会使用connection，那么此时将connection对象和当前线程进行绑定，这样就能保证数据的一致性，并且避免传参导致的代码耦合问题。</p><h2 id="2-1、Service层"><a href="#2-1、Service层" class="headerlink" title="2.1、Service层"></a>2.1、Service层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.transfer.service;<br><br><span class="hljs-keyword">import</span> com.itheima.transfer.dao.AccountDao;<br><span class="hljs-keyword">import</span> com.itheima.transfer.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String outUser, String inUser, <span class="hljs-type">int</span> money)</span> &#123;<br>        <span class="hljs-type">AccountDao</span> <span class="hljs-variable">ad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountDao</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JdbcUtils.getConnection();<br>            <span class="hljs-comment">//开启事务</span><br>            conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">// 转出 ： 这里不需要传参了 ！</span><br>            ad.out(outUser, money);<br>            <span class="hljs-comment">// 模拟转账过程中的异常</span><br><span class="hljs-comment">//            int i = 1 / 0;</span><br>            <span class="hljs-comment">// 转入</span><br>            ad.in(inUser, money);<br>            <span class="hljs-comment">//事务提交</span><br>            JdbcUtils.commitAndClose();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-comment">//事务回滚</span><br>           JdbcUtils.rollbackAndClose();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-2、Dao层"><a href="#2-2、Dao层" class="headerlink" title="2.2、Dao层"></a>2.2、Dao层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.transfer.dao;<br><br><span class="hljs-keyword">import</span> com.itheima.transfer.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountDao</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">(String outUser, <span class="hljs-type">int</span> money)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = money - ? where name = ?&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JdbcUtils.getConnection();<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstm</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>        pstm.setInt(<span class="hljs-number">1</span>,money);<br>        pstm.setString(<span class="hljs-number">2</span>,outUser);<br>        pstm.executeUpdate();<br>        <span class="hljs-comment">//照常使用</span><br><span class="hljs-comment">//        JdbcUtils.release(pstm,conn);</span><br>        JdbcUtils.release(pstm);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">(String inUser, <span class="hljs-type">int</span> money)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = money + ? where name = ?&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JdbcUtils.getConnection();<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstm</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>        pstm.setInt(<span class="hljs-number">1</span>,money);<br>        pstm.setString(<span class="hljs-number">2</span>,inUser);<br>        pstm.executeUpdate();<br><span class="hljs-comment">//        JdbcUtils.release(pstm,conn);</span><br>        JdbcUtils.release(pstm);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-3、Utils方法"><a href="#2-3、Utils方法" class="headerlink" title="2.3、Utils方法"></a>2.3、Utils方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.transfer.utils;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUtils</span> &#123;<br>    <span class="hljs-comment">//ThreadLocal对象 : 将connection绑定在当前线程中</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Connection&gt; tl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>();<br><br>    <span class="hljs-comment">// c3p0 数据库连接池对象属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br><br>    <span class="hljs-comment">// 获取连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//取出当前线程绑定的connection对象</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> tl.get();<br>        <span class="hljs-keyword">if</span> (conn == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//如果没有，则从连接池中取出</span><br>            conn = ds.getConnection();<br>            <span class="hljs-comment">//再将connection对象绑定到当前线程中</span><br>            tl.set(conn);<br>        &#125;<br>        <span class="hljs-keyword">return</span> conn;<br>    &#125;<br><br>    <span class="hljs-comment">//释放资源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">(AutoCloseable... ios)</span> &#123;<br>        <span class="hljs-keyword">for</span> (AutoCloseable io : ios) &#123;<br>            <span class="hljs-keyword">if</span> (io != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    io.close();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commitAndClose</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> getConnection();<br>            <span class="hljs-comment">//提交事务</span><br>            conn.commit();<br>            <span class="hljs-comment">//解除绑定</span><br>            tl.remove();<br>            <span class="hljs-comment">//释放连接</span><br>            conn.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollbackAndClose</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> getConnection();<br>            <span class="hljs-comment">//回滚事务</span><br>            conn.rollback();<br>            <span class="hljs-comment">//解除绑定</span><br>            tl.remove();<br>            <span class="hljs-comment">//释放连接</span><br>            conn.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到，在Utils方法中，getConnection的时候，此时使用了一个ThreadLocal对象，将当前Connection对象和当前线程进行绑定了；如果是第一次获取connection对象，那么就从连接池中获取，不是的话，那么直接从ThreadLocal中获取。</p><h1 id="3、内部结构探索"><a href="#3、内部结构探索" class="headerlink" title="3、内部结构探索"></a>3、内部结构探索</h1><h2 id="3-1、内部结构"><a href="#3-1、内部结构" class="headerlink" title="3.1、内部结构"></a>3.1、内部结构</h2><p>在JDK8中ThreadLocal的设计：每个<code>Thread</code>维护一个<code>ThreadLocalMap</code>，这个Map的<code>key</code>是<code>ThreadLocal</code>对象本身，而<code>value</code>就是真正需要存储的值。</p><p>具体：</p><blockquote><p>（1） 每个Thread线程内部都有一个Map (ThreadLocalMap)<br>（2） Map里面存储ThreadLocal对象（key）和线程的变量副本（value）<br>（3）Thread内部的Map是由ThreadLocal维护的，由ThreadLocal负责向map获取和设置线程的变量值。<br>（4）对于不同的线程，每次获取副本值时，别的线程并不能获取到当前线程的副本值，形成了副本的隔离，互不干扰。</p></blockquote><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/image-20230722171217698.png" alt="image-20230722171217698"></p><p>由于每个Thread中维护一个ThreadLocalMap，Map的key为ThreadLocal对象本身，value为设置的值，这样的优势：</p><ol><li>每个<code>Map</code>存储的<code>Entry</code>数量就会变少，JDK7中的存储数量由<code>Thread</code>的数量决定，现在是由<code>ThreadLocal</code>的数量决定。（ThreadLocal的数量远远小于Thread数量）</li><li>当<code>Thread</code>销毁之后，对应的<code>ThreadLocalMap</code>也会随之销毁，能减少内存的使用。</li></ol><h2 id="3-2、核心方法"><a href="#3-2、核心方法" class="headerlink" title="3.2、核心方法"></a>3.2、核心方法</h2><h3 id="3-2-1、set"><a href="#3-2-1、set" class="headerlink" title="3.2.1、set"></a>3.2.1、set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span> &#123;<br><span class="hljs-comment">// 1）拿到当前线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-comment">// 2）通过线程内部的 threadLocals 变量，拿到对应 ThreadLocalMap 对象。对应着分析1</span><br>        <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>        <span class="hljs-comment">// 3）判断如果不为 null ,则直接调用 ThreadLocalMap 中的 set 方法，传入 当前的 ThreadLocal 对象和要指定修改的值 value，对应着分析2</span><br>        <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>            map.set(<span class="hljs-built_in">this</span>, value);<br>        <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// 4）创建 map 为 null，就创建 map, 对应着分析3</span><br>            createMap(t, value);<br>    &#125; <br><br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadLocalMap <span class="hljs-title function_">getMap</span><span class="hljs-params">(Thread t)</span> &#123;<br>    <span class="hljs-keyword">return</span> t.threadLocals;<br>&#125;<br><br><span class="hljs-comment">// Thread类中持有一个ThreadLocalMap类型的对象threadLocals</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    ThreadLocal.<span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">threadLocals</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    ThreadLocal.<span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">inheritableThreadLocals</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>真正进行赋值：</p><blockquote><p>set方法可以进行修改或者新建的操作。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;<br>    <span class="hljs-comment">// 将ThreadLocal对象的存储表table赋值给局部变量tab</span><br>        Entry[] tab = table;<br>    <span class="hljs-comment">// 计算tab的长度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br>    <span class="hljs-comment">// 先找到对应Entry的数组下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (len-<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 循环查找存储表中能匹配的Entry对象，从索引位置开始一直到链表末尾</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> tab[i];<br>             e != <span class="hljs-literal">null</span>;<br>             e = tab[i = nextIndex(i, len)]) &#123;<br>            <span class="hljs-comment">// 取出当前的ThreadLocal对象</span><br>            ThreadLocal&lt;?&gt; k = e.get();<br>            <span class="hljs-comment">// 判断与Key，即是否是一个ThreadLocal对象，如果是，那么就进行以及修改</span><br>            <span class="hljs-keyword">if</span> (k == key) &#123;<br>                e.value = value;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 当前Entry的ThreadLocal对象为空，说明该Entry无效，可能在之前被GC掉了</span><br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 传入key, value, i创建一个新的Entry，存储在数组tab的位置</span><br>                replaceStaleEntry(key, value, i);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>    <span class="hljs-comment">// 循环找都没有匹配ThreadLocal对象</span><br>    <span class="hljs-comment">// 新建一个Entry，</span><br>        tab[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(key, value);<br><span class="hljs-comment">// 增加存储表中的Entry数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sz</span> <span class="hljs-operator">=</span> ++size;<br>    <span class="hljs-comment">// 判断是否需要清理一些无效的Entry&amp;&amp;是否需要去扩容</span><br>        <span class="hljs-keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)<br>            <span class="hljs-comment">// 进行扩容</span><br>            rehash();<br>    &#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">createMap</span><span class="hljs-params">(Thread t, T firstValue)</span> &#123;<br>        t.threadLocals = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(<span class="hljs-built_in">this</span>, firstValue);<br>    &#125;<br>    <br>ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;<br>        <span class="hljs-comment">// 创建一个默认长度大小为 16 的 Entry 数组</span><br>        table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[INITIAL_CAPACITY];<br>        <span class="hljs-comment">// 计算对应的数组的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 插入节点</span><br>        table[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(firstKey, firstValue);<br>        size = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 设置扩容阈值</span><br>        setThreshold(INITIAL_CAPACITY);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-2-2、get"><a href="#3-2-2、get" class="headerlink" title="3.2.2、get"></a>3.2.2、get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前的线程</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-comment">// 获取当前线程的ThreadLocalMap</span><br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 通过 getEntry 找到线程对应着的 Entry 对象, 对应着分析1</span><br>        ThreadLocalMap.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> map.getEntry(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">// 如果不为 null 则直接拿到返回</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (T)e.value;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// map为空，进行initialValue</span><br>    <span class="hljs-keyword">return</span> setInitialValue();<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Entry <span class="hljs-title function_">getEntry</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key)</span> &#123;<br>    <span class="hljs-comment">// 计算出 index 的值</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (table.length - <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 获取当前tab下表为i的Entry</span><br>    <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> table[i];<br>    <span class="hljs-comment">// 如果存在, 判断是不是相同的对象，是就直接返回</span><br>    <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span> &amp;&amp; e.get() == key)<br>        <span class="hljs-keyword">return</span> e;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// 清空 key 为 null 的对象</span><br>        <span class="hljs-keyword">return</span> getEntryAfterMiss(key, i, e);<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> T <span class="hljs-title function_">setInitialValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 会进行初始化, 如果我们重写了就会调用我们自己重写的，否则就调用默认的。</span><br>    <span class="hljs-comment">// protected T initialValue() &#123;return null;&#125;</span><br>    <span class="hljs-type">T</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> initialValue();<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>     <span class="hljs-comment">// 如果 map 不为 null ，就直接添加本地变量，key 为当前线程，值为添加的本地变量值</span><br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>        map.set(<span class="hljs-built_in">this</span>, value);<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-comment">// 如果 map 为 null，说明首次添加，需要首先创建出对应的 map</span><br>        createMap(t, value);<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-3、remove"><a href="#3-2-3、remove" class="headerlink" title="3.2.3、remove"></a>3.2.3、remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前线程绑定的 threadLocals</span><br>     <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> getMap(Thread.currentThread());<br>     <span class="hljs-comment">// 如果 map 不为 null，就移除当前线程中指定 ThreadLocal 实例的本地变量</span><br>     <span class="hljs-keyword">if</span> (m != <span class="hljs-literal">null</span>)<br>         m.remove(<span class="hljs-built_in">this</span>);<br> &#125;<br><br></code></pre></td></tr></table></figure><h1 id="4、ThreadLocal内存泄漏"><a href="#4、ThreadLocal内存泄漏" class="headerlink" title="4、ThreadLocal内存泄漏"></a>4、ThreadLocal内存泄漏</h1><h2 id="4-1、内存泄漏是什么？"><a href="#4-1、内存泄漏是什么？" class="headerlink" title="4.1、内存泄漏是什么？"></a>4.1、内存泄漏是什么？</h2><blockquote><p>不再会使用的对象或者变量占用的内存不能被回收，就是内存泄漏。</p></blockquote><h2 id="4-2、四种引用"><a href="#4-2、四种引用" class="headerlink" title="4.2、四种引用"></a>4.2、四种引用</h2><h3 id="4-2-1、强引用"><a href="#4-2-1、强引用" class="headerlink" title="4.2.1、强引用"></a>4.2.1、强引用</h3><p>一般我们 new 关键字创建的对象就是 Reference（强引用），当内存不足时，JVM 开始垃圾回收，对于强引用对象，就算是出现 OOM 也不会对该对象进行回收。</p><h3 id="4-2-2、软引用"><a href="#4-2-2、软引用" class="headerlink" title="4.2.2、软引用"></a>4.2.2、软引用</h3><p>软引用是一种相对相对于强引用弱化了一些的引用，需要用 SoftReference 类实现，对于软引用来说，当系统内存充足时，软引用对象不会被垃圾回收，不充足时，会被回收。软引用通常用在对内存敏感的程序中，比如高速缓存就有用到软引用，内存够用的时候就保留，不够用就回收！</p><h3 id="4-2-3、弱引用"><a href="#4-2-3、弱引用" class="headerlink" title="4.2.3、弱引用"></a>4.2.3、弱引用</h3><p>弱引用需要用 WeakReference 类实现，它比软引用的生存期更短，对于弱引用对象来说，只要垃圾回收器运行，不管 JVM 内存空间是否足够，都会回收该对象占用的内存。</p><h3 id="4-2-4、虚引用"><a href="#4-2-4、虚引用" class="headerlink" title="4.2.4、虚引用"></a>4.2.4、虚引用</h3><p>虚引用需要 PhantomReference 类来实现，如果一个对象持有虚引用，那么它就和没有任何引用一样，在任何时候都可能会垃圾回收器回收，它不能单独使用也不能通过它访问对象，虚引用必须和引用队列（ReferenceQueue）联合使用。</p><h2 id="4-3、Entry"><a href="#4-3、Entry" class="headerlink" title="4.3、Entry"></a>4.3、Entry</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalMap</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;<br>        <span class="hljs-comment">/** The value associated with this ThreadLocal. */</span><br>        Object value;<br><br>        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;<br>            <span class="hljs-built_in">super</span>(k);<br>            value = v;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上述代码中可以得知，</p><ul><li>ThreadLocalMap是ThreadLocal的一个内部静态类，用来存储每个线程对应的变量值。Entry类来管理每个线程本地变量的key-value。</li><li><code>Entry</code>是<code>ThreadLocalMap</code>的一个内部静态类，继承自<code>WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</code>。<code>Entry</code>表示一个键值对，用于将<code>ThreadLocal</code>对象与其对应的变量值关联起来。<ul><li>表明：<code>ThreadLocal</code>对象在没有其他强引用对象的时候会被垃圾回收器进行回收，而<code>Entry</code>的声明周期也会随着结束，进而避免了内存泄漏。</li></ul></li></ul><h3 id="4-3-1、为什么是弱引用"><a href="#4-3-1、为什么是弱引用" class="headerlink" title="4.3.1、为什么是弱引用"></a>4.3.1、为什么是弱引用</h3><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/20210219124533810.png" alt="图一"></p><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>    ThreadLocal&lt;Integer&gt; tl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br>    tl .set(<span class="hljs-number">2021</span>);<br>    tl .get();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>当调用method的时候，会向栈中插入一条栈帧。</li><li>new关键字创建一个ThreadLocal对象，此时tl是对象的引用<ul><li>new出的对象是一个强引用，通过set方法进行存储值，Key是ThreadLocal对象本身，Value为需要存储的值。</li><li>Entry继承WeakReference，那么Key是弱引用指向了ThreadLocal对象。</li></ul></li><li>当method方法执行完毕之后，栈帧销毁，此时强引用tl就不存在了。<ul><li>但是Thread的ThreadLocalMap中的某一个Entry的key的引用还指向了ThreadLocal对象</li><li>如果这个Key引用是强引用，会导致Key指向的ThreadLocal对象是强引用对象不能被GC，会造成内存泄漏</li><li>如果这个Key引用是弱引用，会大概率减少内存泄漏的问题。使用了弱引用，就可以使ThreadLocal对象在方法执行完毕之后顺利被回收，并且Key的引用会被指向为null。</li></ul></li></ul><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/20210219131444101.png" alt="图二"></p><blockquote><p>总结：</p><ul><li>new一个ThreadLocal对象的时候，就会有一个强引用指向这个对象。</li><li>调用set方法之后，线程中的ThreadLocalMap中的Entry对象中的Key指向ThreadLocal对象。</li><li>如果Key是强引用的话，当方法执行完，栈帧中的强引用销毁了，对象还不能被回收，此时就会造成内存泄漏。</li></ul></blockquote><h3 id="4-3-2、为什么还是会泄漏"><a href="#4-3-2、为什么还是会泄漏" class="headerlink" title="4.3.2、为什么还是会泄漏"></a>4.3.2、为什么还是会泄漏</h3><p>虽然Entry继承了弱引用，保证了Key指向的ThreadLocal对象能被及时回收，但是此时v指向的Value对象需要再ThreadLocalMap调用get、set的时候发现Key为null的时候才能回收整个的entry、Value。</p><blockquote><p>为什么value还持有引用？</p><p>解答：ThreadLocal作为Thread的一个属性，如果当前线程没有手动销毁，那么ThreadLocalMap也还是存在，同理Entry的引用也持有。</p></blockquote><p><code>所以泄露的根本原因就是因为ThreadLocal的生命周期和Thread的生命周期一样，如果线程没有主动销毁，那么entry就不会被销毁。</code><br><img src="https://workspace-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/image-20230725174415384.png" alt="image-20230725174415384"></p><p>所以：弱引用只是帮助我们降低了内存泄漏的概率，并不能完全避免，在使用完成之后，<code>必须手动remove</code>这个对象。</p><p><img src="https://mypc-1313021454.cos.ap-beijing.myqcloud.com/JUC/ThreadLocal/20210219134347416.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Java多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis-01</title>
    <link href="/redis-01/485c158f7020/"/>
    <url>/redis-01/485c158f7020/</url>
    
    <content type="html"><![CDATA[<h1 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h1><blockquote><p>为什么学习Redis?</p></blockquote><p><img src="https://workspace-1313021454.cos.ap-beijing.myqcloud.com/Redis-01/image-20230710110803521.png" alt="image-20230710110803521"></p><ul><li>存储方式<ul><li>关系型数据库基于磁盘进行存储，会有大量的磁盘IO，对性能有一定影响</li><li>非关系型数据库，他们的操作更多的是依赖于内存来操作，内存的读写速度会非常快，性能自然会好一些</li></ul></li></ul><ul><li>扩展性<ul><li>关系型数据库集群模式一般是主从，主从数据一致，起到数据备份的作用，称为垂直扩展。</li><li>非关系型数据库可以将数据拆分，存储在不同机器上，可以保存海量数据，解决内存大小有限的问题。称为水平扩展。</li><li>关系型数据库因为表之间存在关联关系，如果做水平扩展会给数据查询带来很多麻烦</li></ul></li></ul><h1 id="1、Redis常见命令"><a href="#1、Redis常见命令" class="headerlink" title="1、Redis常见命令"></a>1、Redis常见命令</h1><p>Redis是典型的key-value数据库，key一般是字符串，而value包含很多不同的数据类型：</p><p><img src="https://workspace-1313021454.cos.ap-beijing.myqcloud.com/Redis-01/image-20230710111123811.png" alt="image-20230710111123811"></p><blockquote><p>当然更推荐自行查阅<a href="https://redis.io/commands/">官方</a>或者使用终端(前提先启动redis-server、redis-cli)，通过help命令来查看各种不同group的命令。</p></blockquote><p>同时需要注意的是，redis是基于内存的，因此在set的时候，需要给每个key添加一个过期时间：</p><p><code>expire key time</code>，通过使用<code>ttl key</code>查看该key的剩余时间。</p><blockquote><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li>KEYS：查看符合模板的所有key</li><li>DEL：删除一个指定的key</li><li>EXISTS：判断key是否存在</li><li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li><li>TTL：查看一个KEY的剩余有效期</li></ul><p>通过help [command] 可以查看一个命令的具体用法，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看keys命令的帮助信息：</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">help</span> keys<br><br>KEYS pattern<br>summary: Find all keys matching the given pattern<br>since: 1.0.0<br>group: generic<br></code></pre></td></tr></table></figure></blockquote><h2 id="1-1、String"><a href="#1-1、String" class="headerlink" title="1.1、String"></a>1.1、String</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增.自减操作</li><li>float：浮点类型，可以做自增.自减操作</li></ul><hr><p>String的常见命令有：</p><ul><li>SET：添加或者修改已经存在的一个String类型的键值对</li><li>GET：根据key获取String类型的value</li><li>MSET：批量添加多个String类型的键值对</li><li>MGET：根据多个key获取多个String类型的value</li><li>INCR：让一个整型的key自增1</li><li>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长（<code>不常用</code>）</li><li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li>SETEX：添加一个String类型的键值对，并且指定有效期</li></ul><h2 id="1-2、Key的层级结构"><a href="#1-2、Key的层级结构" class="headerlink" title="1.2、Key的层级结构"></a>1.2、Key的层级结构</h2><p>Redis的key允许有多个单词形成层级结构，多个单词之间用’:’隔开，格式如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">项目名:业务名:类型:<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>例如我们的项目名称叫 heima，有user和product两种不同类型的数据，我们可以这样定义key：</p><ul><li><p>user相关的key：<strong>heima:user:1</strong></p></li><li><p>product相关的key：<strong>heima:product:1</strong></p></li></ul><p>一旦我们向redis采用这样的方式存储，那么在可视化界面中，redis会以层级结构来进行存储，形成类似于这样的结构，更加方便Redis获取数据</p><p><img src="https://workspace-1313021454.cos.ap-beijing.myqcloud.com/Redis-01/image-20230710133129047.png" alt="image-20230710133129047"></p><h2 id="1-3、Hash"><a href="#1-3、Hash" class="headerlink" title="1.3、Hash"></a>1.3、Hash</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><p><img src="https://workspace-1313021454.cos.ap-beijing.myqcloud.com/Redis-01/image-20230710133244234.png" alt="image-20230710133244234"></p><p>即：key:value，这个value又对应field:value结构</p><hr><p><strong>Hash类型的常见命令</strong></p><ul><li><p>HSET key field value：添加或者修改hash类型key的field的值</p></li><li><p>HGET key field：获取一个hash类型key的field的值</p></li><li><p>HMSET：批量添加多个hash类型key的field的值</p></li><li><p>HMGET：批量获取多个hash类型key的field的值</p></li><li><p>HGETALL：获取一个hash类型的key中的所有的field和value</p></li><li><p>HKEYS：获取一个hash类型的key中的所有的field</p></li><li><p>HINCRBY:让一个hash类型key的字段值自增并指定步长</p></li><li><p>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p></li></ul><h2 id="1-4、List"><a href="#1-4、List" class="headerlink" title="1.4、List"></a>1.4、List</h2><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><blockquote><p>特点：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>使用场景：</p><p>例如：朋友圈点赞列表，评论列表等。</p></blockquote><hr><p><strong>List的常见命令有：</strong></p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li><li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li></ul><p><img src="https://workspace-1313021454.cos.ap-beijing.myqcloud.com/Redis-01/1652943604992.png" alt="1652943604992"></p><h2 id="1-5、Set"><a href="#1-5、Set" class="headerlink" title="1.5、Set"></a>1.5、Set</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。</p><blockquote><p>特点：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集.并集.差集等功能</li></ul></blockquote><hr><p><strong>Set类型的常见命令</strong></p><ul><li>SADD key member … ：向set中添加一个或多个元素</li><li>SREM key member … : 移除set中的指定元素</li><li>SCARD key： 返回set中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于set中</li><li>SMEMBERS：获取set中的所有元素</li><li>SINTER key1 key2 … ：求key1与key2的交集</li><li>SDIFF key1 key2 … ：求key1与key2的差集</li><li>SUNION key1 key2 ..：求key1和key2的并集</li></ul><h2 id="1-6、SortedSet类型"><a href="#1-6、SortedSet类型" class="headerlink" title="1.6、SortedSet类型"></a>1.6、SortedSet类型</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><blockquote><p>特点：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>使用场景：</p><p>由于每个key自带一个score，那么通常可以实现一个榜单、排行榜的功能</p></blockquote><hr><p>SortedSet的常见命令有：</p><ul><li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li><li>ZREM key member：删除sorted set中的一个指定元素</li><li>ZSCORE key member : 获取sorted set中的指定元素的score值</li><li>ZRANK key member：获取sorted set 中的指定元素的排名</li><li>ZCARD key：获取sorted set中的元素个数</li><li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li><li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li><li>ZDIFF、ZINTER、ZUNION：求差集、交集、并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加<code>REV</code>即可，例如：</p><ul><li><p><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</p></li><li><p><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</p></li></ul><h1 id="2、Redis的Java客户端"><a href="#2、Redis的Java客户端" class="headerlink" title="2、Redis的Java客户端"></a>2、Redis的Java客户端</h1><p>在Redis官网中提供了各种语言的客户端，地址：<a href="https://redis.io/docs/clients/">https://redis.io/docs/clients/</a></p><p>推荐使用：</p><ul><li>Jedis和Lettuce：这两个主要是提供了Redis命令对应的API，方便我们操作Redis，而SpringDataRedis又对这两种做了抽象和封装，因此我们后期会直接以SpringDataRedis来学习。</li><li>Redisson：是在Redis基础上实现了分布式的可伸缩的java数据结构，例如Map.Queue等，而且支持跨进程的同步机制：Lock.Semaphore等待，比较适合用来实现特殊的功能需求。</li></ul><h2 id="2-1、Jedis"><a href="#2-1、Jedis" class="headerlink" title="2.1、Jedis"></a>2.1、Jedis</h2><ul><li>引入依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jedis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--单元测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>使用Test建立连接:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Jedis jedis;<br><br><span class="hljs-meta">@BeforeEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.建立连接</span><br>    <span class="hljs-comment">// jedis = new Jedis(&quot;192.168.150.101&quot;, 6379);</span><br>    jedis = JedisConnectionFactory.getJedis();<br>    <span class="hljs-comment">// 2.设置密码</span><br>    jedis.auth(<span class="hljs-string">&quot;123321&quot;</span>);<br>    <span class="hljs-comment">// 3.选择库</span><br>    jedis.select(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 存入数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;虎哥&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    <span class="hljs-comment">// 获取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 插入hash数据</span><br>    jedis.hset(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>);<br>    jedis.hset(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>);<br><br>    <span class="hljs-comment">// 获取</span><br>    Map&lt;String, String&gt; map = jedis.hgetAll(<span class="hljs-string">&quot;user:1&quot;</span>);<br>    System.out.println(map);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>资源释放：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (jedis != <span class="hljs-literal">null</span>) &#123;<br>        jedis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-1、Jedis连接池"><a href="#2-1-1、Jedis连接池" class="headerlink" title="2.1.1、Jedis连接池"></a>2.1.1、Jedis连接池</h3><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式</p><ul><li>创建连接池</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectionFacotry</span> &#123;<br><br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JedisPool jedisPool;<br><br>     <span class="hljs-keyword">static</span> &#123;<br>         <span class="hljs-comment">//配置连接池</span><br>         <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>         poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>         poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<br>         poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>         poolConfig.setMaxWaitMillis(<span class="hljs-number">1000</span>);<br>         <span class="hljs-comment">//创建连接池对象</span><br>         jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig,<br>                 <span class="hljs-string">&quot;192.168.150.101&quot;</span>,<span class="hljs-number">6379</span>,<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;123321&quot;</span>);<br>     &#125;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>          <span class="hljs-keyword">return</span> jedisPool.getResource();<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改之前创建对象的方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@BeforeEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//建立连接</span><br>    <span class="hljs-comment">/*jedis = new Jedis(&quot;127.0.0.1&quot;,6379);*/</span><br>    jedis = JedisConnectionFacotry.getJedis();<br>     <span class="hljs-comment">//选择库</span><br>    jedis.select(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-meta">@AfterEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (jedis != <span class="hljs-literal">null</span>) &#123;<br>        jedis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2、SpringDataRedis"><a href="#2-2、SpringDataRedis" class="headerlink" title="2.2、SpringDataRedis"></a>2.2、SpringDataRedis</h2><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis。</p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK.JSON.字符串.Spring对象的数据序列化及反序列化(如果使用Jedis的话，那么需要自己实现序列化操作)</li><li>支持基于Redis的JDKCollection实现</li></ul><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p><p><img src="https://workspace-1313021454.cos.ap-beijing.myqcloud.com/Redis-01/1652976773295.png" alt="1652976773295"></p><h3 id="2-2-1、使用"><a href="#2-2-1、使用" class="headerlink" title="2.2.1、使用"></a>2.2.1、使用</h3><ul><li>引入依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.heima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redis-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>redis-demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--redis依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--common-pool--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Jackson依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span>  <span class="hljs-comment">#最大连接</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span>   <span class="hljs-comment">#最大空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span>   <span class="hljs-comment">#最小空闲连接</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">100ms</span> <span class="hljs-comment">#连接等待时间</span><br></code></pre></td></tr></table></figure><ul><li>测试：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisDemoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate; <span class="hljs-comment">//注入redisTemplate</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 写入一条String数据</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;虎哥&quot;</span>);<br>        <span class="hljs-comment">// 获取string数据</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-2、自定义序列化"><a href="#2-2-2、自定义序列化" class="headerlink" title="2.2.2、自定义序列化"></a>2.2.2、自定义序列化</h3><p>RedisTemplate可以接收任意Object作为值写入Redis。但因为在写入之前会把Object对象序列化为字节的形式，在底层采用的是JDK序列化。</p><p><img src="https://workspace-1313021454.cos.ap-beijing.myqcloud.com/Redis-01/image-20230711082054025.png" alt="image-20230711082054025"></p><p>缺点：</p><ul><li>可读性差</li><li>内存占用较大</li></ul><blockquote><p>主要是创建JSON序列化工具</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span>&#123;<br>        <span class="hljs-comment">// 创建RedisTemplate对象</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置连接工厂</span><br>        template.setConnectionFactory(connectionFactory);<br>        <span class="hljs-comment">// 创建JSON序列化工具</span><br>        <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">jsonRedisSerializer</span> <span class="hljs-operator">=</span> <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br>        <span class="hljs-comment">// 设置Key的序列化</span><br>        template.setKeySerializer(RedisSerializer.string());<br>        template.setHashKeySerializer(RedisSerializer.string());<br>        <span class="hljs-comment">// 设置Value的序列化</span><br>        template.setValueSerializer(jsonRedisSerializer);<br>        template.setHashValueSerializer(jsonRedisSerializer);<br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://workspace-1313021454.cos.ap-beijing.myqcloud.com/Redis-01/image-20230711083639664.png" alt="image-20230711083639664"></p><p>这个<code>@class</code>就是记录了序列化的时候对应类，方便在查询的时候实现反序列化。缺点：会带来额外的内存开销。</p><h3 id="2-2-3、StringRedisTemplate"><a href="#2-2-3、StringRedisTemplate" class="headerlink" title="2.2.3、StringRedisTemplate"></a>2.2.3、StringRedisTemplate</h3><p>对比使用JSON工具进行序列化，StringRedisTemplate需要手动完成序列化和反序列化，最后在存储的时候就不会将class信息写入Redis了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><span class="hljs-comment">// JSON序列化工具（常用的有fastJson等）</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testSaveUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-comment">// 创建对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;虎哥&quot;</span>, <span class="hljs-number">21</span>);<br>    <span class="hljs-comment">// 手动序列化</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br>    <span class="hljs-comment">// 写入数据</span><br>    stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:200&quot;</span>, json);<br><br>    <span class="hljs-comment">// 获取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonUser</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:200&quot;</span>);<br>    <span class="hljs-comment">// 手动反序列化</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> mapper.readValue(jsonUser, User.class);<br>    System.out.println(<span class="hljs-string">&quot;user1 = &quot;</span> + user1);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程-线程交替打印</title>
    <link href="/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0/4fde684e52ae/"/>
    <url>/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0/4fde684e52ae/</url>
    
    <content type="html"><![CDATA[<p>今日复习来自极海Channel的一个面试</p><blockquote><p>如何实现两个线程实现交替打印，线程A打印A，线程B打印B？</p></blockquote><p>讲真当时看到的时候，脑子里面第一反应就是信号量和synchronized解法，那有synchronized就会有ReentrantLock，那就尝试用这三个解法回答一下吧。</p><p>代码地址：<a href="https://github.com/baijiangLai/LearnOfJUC/tree/master/alternatePrint">线程交替打印</a></p><h2 id="1、synchronized实现"><a href="#1、synchronized实现" class="headerlink" title="1、synchronized实现"></a>1、synchronized实现</h2><p>synchronized的方式实现主要是进行加锁，通过一把对象锁，在代码块内只允许一个线程执行后续操作。</p><p>核心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 持有的lock锁</span><br><span class="hljs-keyword">synchronized</span> (lock) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-comment">// 打印顺序就是A--&gt;B--&gt;C</span><br>        <span class="hljs-keyword">while</span> (currentOrder % <span class="hljs-number">3</span> != order) &#123;<br>            lock.wait(); <span class="hljs-comment">// 当前线程等待，直到轮到自己打印</span><br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;------&quot;</span> + message);<br>        currentOrder++;<br>        lock.notifyAll(); <span class="hljs-comment">// 唤醒其他等待的线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、ReentrantLock实现"><a href="#2、ReentrantLock实现" class="headerlink" title="2、ReentrantLock实现"></a>2、ReentrantLock实现</h2><p>ReentrantLock实现，同样会传入锁，但是lock和unlock是自己规定，所以当需要判断打印的时候，进行枷锁操作，同时每个线程进去之后判断是否是自己需要打印，如果不是，那么就唤醒下一个线程。</p><p>核心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-comment">// 某个线程持有锁，只有一个线程进入后续部分</span><br>    lock.lock();<br>    <span class="hljs-comment">// 条件判断，如果不满足，当前线程等待，</span><br>    <span class="hljs-keyword">while</span> (currentOrder % <span class="hljs-number">3</span> != order) &#123;<br>        current.await();<br>    &#125;<br>    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;------&quot;</span> + message);<br>    currentOrder++;<br>    <span class="hljs-comment">// 使用signal()唤醒下一个线程</span><br>    next.signal();<br>    <span class="hljs-comment">// 锁释放</span><br>    lock.unlock();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：Condition对象是与锁（<strong>ReentrantLock</strong>）关联的条件对象，用于线程间的等待和通知机制。因此锁的类型不并不是Object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>lock.newContional();    <span class="hljs-comment">//ConditionalA</span><br>lock.newContional();    <span class="hljs-comment">//ConditionalB</span><br>lock.newContional();    <span class="hljs-comment">//ConditionalC</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="3、信号量实现"><a href="#3、信号量实现" class="headerlink" title="3、信号量实现"></a>3、信号量实现</h2><p>在使用信号量实现的时候，需要指定谁最先拥有许可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphoreA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">1</span>);   <span class="hljs-comment">//信号量A最先拥有许可，所以从他开始</span><br><span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphoreB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">0</span>);<br><span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphoreC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>核心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 核心：通过获取当前线程的信号量来确定是否轮到自己执行。</span><br><span class="hljs-comment">     * 在执行完打印操作后，释放下一个线程的信号量，从而实现线程的交叉打印。</span><br><span class="hljs-comment">     */</span><br>    current.acquire();      <span class="hljs-comment">// 获取当前线程的信号量</span><br>    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;------&quot;</span> + message);<br>    currentOrder++;<br>    next.release();         <span class="hljs-comment">//释放下一个线程的信号量</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
